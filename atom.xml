<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anran758&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://anran758.github.io/blog/"/>
  <updated>2020-06-19T09:49:27.788Z</updated>
  <id>https://anran758.github.io/blog/</id>
  
  <author>
    <name>anran758</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack + Travis CI 自动部署项目应用</title>
    <link href="https://anran758.github.io/blog/2020/06/08/github-travis-build/"/>
    <id>https://anran758.github.io/blog/2020/06/08/github-travis-build/</id>
    <published>2020-06-08T04:43:57.000Z</published>
    <updated>2020-06-19T09:49:27.788Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2020/06/08/github-travis-build/banner.png"><p>我们知道 <strong><a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a></strong> 是 Github 免费提供给用户展示页面的一项服务。当我们完成项目开发后，想将页面部署到 Github Pages 时，该要怎么操作呢？</p><p>可以在 GitHub 的储存库设置中设置用于展示页面的分支，该分支只保留构建后的静态资源，也就是源码与编译后的静态资源分离。按照传统的做法是：手动运行编译命令，编译后再复制到指定分支中。这样操作很繁琐，但使用 <code>Travis CI</code> 持续集成服务之后就可以不用操心这些事了。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>既然我们要使用 <a href="https://travis-ci.com" target="_blank" rel="noopener">Travis CI</a>，首先得搞清楚人家具体是干嘛的吧？</p><p><code>Travis CI</code> 是一个 <strong>持续集成(Continuous integration, CI)</strong>。它与 git 相耦合，每当有 commit 提交时，它将自动触发构建与测试。若运行结果符合预期，才将新代码集成到 <strong>主流(mainline)</strong> 中，这样使应用更加健壮。</p><p>值得注意的是，<code>Travis CI</code> 提倡每次 commit 都是独立较小的改动，而不是突然提交一大堆代码。因为这有助于后续构建失败时可以回退到正常的版本。</p><p>运行构建时，<code>Travis CI</code> 将 GitHub 存储库克隆到全新的虚拟环境中，并执行一系列任务来构建和测试代码。如果这些任务中的一项或多项失败，则将构建视为已损坏。如果所有任务均未失败，则认为构建已通过，<code>Travis CI</code> 会将代码部署到 Web 服务器或应用程序主机中(在本文中是指 <code>Github Pages</code> 服务)。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在使用之前，需要准备一个 <strong>Github</strong> 的账号对 <code>Travis CI</code> 进行授权。</p><ol><li>接着通过 Github 的账号登录 <a href="https://travis-ci.com/signin" target="_blank" rel="noopener">Travis CI</a>，点击 <code>SIGN IN WITH GITHUB</code>。</li><li>点击后会被重定向到 Github 进行授权。 <img data-src="/blog/2020/06/08/github-travis-build/travis-1.jpeg"></li><li>授权后，若是第一次登录的话会被重定向至<a href="https://travis-ci.com/getting_started" target="_blank" rel="noopener">引导页</a>: <img data-src="/blog/2020/06/08/github-travis-build/travis-2.jpeg"></li><li>点击引导页第一步的按钮，使用 <strong>GitHub Apps</strong> 激活储存库。可以选择给全部储存库都激活，也可以激活指定储存库。本文以 <code>&lt;username&gt;.github.io</code> 为例:<blockquote><p>注意: 这个 <code>username</code> 是你自己的 Github 用户名。笔者的 <code>username</code> 为 <code>anran758</code> 那储存库的名字就为 <strong><a href="https://github.com/anran758/anran758.github.io" target="_blank" rel="noopener">anran758.github.io</a></strong>。</p></blockquote><img data-src="/blog/2020/06/08/github-travis-build/travis-3.jpeg"></li><li>激活后会被重定向到<a href="https://travis-ci.com/account/repositories" target="_blank" rel="noopener">设置页</a>，点击待部署的储存库右侧的 <code>setting</code> 按钮，跳转至 <code>Travis CI</code> 储存库设置页。我们需要在此页设置部署 <code>Github Pages</code> 时所需的环境变量:<img data-src="/blog/2020/06/08/github-travis-build/travis-4.jpeg"></li></ol><p>环境变量的值需要从 Github 拿<strong>拥有部署权限的 token</strong>:</p><ol><li>打开 <a href="https://github.com/" target="_blank" rel="noopener">Github</a>，点击头像，再点击 <a href="https://github.com/settings/profile" target="_blank" rel="noopener">Settings</a> 进入设置页： <img data-src="/blog/2020/06/08/github-travis-build/github-1.png"></li><li>进入设置页面后在左侧边栏点击<a href="https://github.com/settings/apps" target="_blank" rel="noopener">开发者设置</a>: <img data-src="/blog/2020/06/08/github-travis-build/github-2.jpeg"></li><li>跳转后在左侧边栏点击 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a>, 然后在头部点击 <a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">Generate new token</a>: <img data-src="/blog/2020/06/08/github-travis-build/github-3.jpeg"></li><li>填写 token 备注、权限，最后点击生成 token: <img data-src="/blog/2020/06/08/github-travis-build/github-4.png"></li><li>生成 token 后点击复制按钮，复制到粘贴板: <img data-src="/blog/2020/06/08/github-travis-build/github-5.png"> <strong>注意要妥善保管好 token，重新刷新页面后这个 token 将不会再展示出来。如果忘记了 token 的话，也只能在 token 编辑页中重新生成。这会导致所有用到该 token 的应用都要更新值。</strong> 比方说有三个应用使用了该 token，重新生成后只在一个应用更新的值，那其他两个应用不更新就无法使用了。 <img data-src="/blog/2020/06/08/github-travis-build/github-6.jpeg"></li><li>复制 token 后切回 <code>Travis CI</code> 储存库的设置页，添加环境变量:<img data-src="/blog/2020/06/08/github-travis-build/github-7.jpeg"></li></ol><p>这样我们的准备工作就完成的差不多了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在项目目录中新建文件 <code>.travis.yml</code>，内容如下:</p><figure class="highlight yml"><figcaption><span>/.travis.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lts/*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span> <span class="comment"># npm ci</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">test</span> <span class="comment"># npm run test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span> <span class="comment"># npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">dist</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">develop</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">$GITHUB_TOKEN</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">keep_history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">committer_from_gh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>由于 webpack 项目依赖 Node.js，因此语言(<code>language</code>) 设置为 <code>node_js</code>，同时还指定使用最新的 LTS Node.js 版本(<code>lts/*</code>)。</p><p><code>install</code> 是安装部署所需的依赖项，<code>script</code> 则是用于运行测试或构建脚本。他们都是 <code>Travis</code> 的工作生命周期(Job Lifecycle)必触发的钩子(阶段)。</p><p><code>install</code> 钩子若有脚本/命令运行失败的话，整个构建会停止。而 <code>script</code> 钩子表现则不同，当有脚本/命令运行失败后虽然构建会失败，但还会继续执行后面的脚本。如 <code>yarn test</code> 运行失败后会继续跑 <code>yarn build</code> 命令。</p><p>以下是 <code>Travis CI</code> 主要的阶段流程图:</p><pre class="mermaid" style="text-align:center">graph TDA[before_install] --> B[install]A & B -.-> Z((停止构建))B --> C[before_script]C --> D[scrip]D --> E(after_success)D --> F(after_failure)E & F --> G[before_deploy]G --> H[deploy]H --> I[after_deploy]I --> J[after_script]</pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>通过 <code>deploy</code> 可以指定部署方式，下面将逐个介绍部署所用的选项：</p><p><a href="https://docs.travis-ci.com/user/deployment/#supported-providers" target="_blank" rel="noopener">provider</a> 是部署类型。现在我们想将页面部署到 Github Pages，那就需要将 <code>provider</code> 设为 <code>pages</code>。</p><p><code>local_dir</code> 指定要推送到 Github Pages 的目录，默认为当前目录。webpack 默认的输出目录是 <code>/dist</code>，因此需要将值设为 <code>dist</code>。除此之外，<code>Travis CI</code> 默认情况下会删除构建期间创建的所有文件，因此需要设置 <code>skip_cleanup: true</code> 保留构建出来的 <code>dist</code> 目录.</p><p>若 <code>on.branch</code> 有 commit 提交的话，<code>Travis CI</code> 将从 <code>on.branch</code> 分支运行编译脚本，编译后会把 <code>local_dir</code> 目录强制推送到 <code>target_branch</code> 中。(<code>target_branch</code> 默认值为 <code>gh-pages</code>)</p><p>现在我们要部署的储存库是 <code>&lt;username&gt;.github.io</code>。这种类型的储存库有些特殊——它只能在 <code>master</code> 分支展示构建后的代码，而不能修改为其他分支。在 GitHub 储存库的 <code>Settings</code> 中的 <code>Source</code> 选项可以看到详细信息:</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-1.jpeg"><p>然而其他储存库则没有这种限制:</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-2.jpeg"><p>因此要部署到 <code>&lt;username&gt;.github.io</code> 储存库的话，<code>target_branch</code> 只能设为 <code>master</code>，触发编译的 <code>on.branch</code> 分支则可以自己定义。</p><p>其他储存库可以按照标准流程来开发：</p><ul><li><code>develop</code> 作为开发分支</li><li><code>master</code> 作为主分支</li><li><code>gh-pages</code> 作为页面展示分支</li></ul><p>等功能开发并测试完毕后，将 <code>develop</code> 的代码合并到 <code>master</code> 分支并推送至远程。<code>Traivis CI</code> 检测到 <code>matser</code> 有 <code>commit</code> 提交后会自动运行脚本构建，构建完毕后将输出目录推送至 <code>gh-pages</code> 分支。</p><p>当然 Github Pages 也不是随便来一个人就可以部署的，你想要部署到储存库中首先得有该储存库的操作权限吧？<code>token</code> 就是证明你身份的东西。在上文中我们预先设置好了一个名为 <code>GITHUB_TOKEN</code> 的环境变量，此处我们可以通过 <code>$GITHUB_TOKEN</code> 直接取出该环境变量的值即可。</p><p>其他还有一些细节问题可以调整：比如推送构建后的代码到 <code>target_branch</code> 时使用的是强制推送(<code>git push --force</code>)，如果你觉得这种强制覆盖历史记录的方式有点暴力的话，可以设置 <code>keep_history: true</code> 来保留提交记录。</p><p>自动部署后 <code>commit</code> 提交者默认是 <code>Travis CI</code> 的信息。也可以设置 <code>committer_from_gh</code> 允许 <code>Travs CI</code> 使用令牌所有者的个人信息来提交 <code>commit</code>。</p><p>配置完毕后现在只需将 <code>.travis.yml</code> 提交到远程，<code>Travis CI</code> 就开始工作了：</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-3.jpeg"><p>甚至还可以在 Github <code>commit</code> 信息中看到编译的情况:</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-4.jpeg"><p>如果构建出问题的话，<code>Travis CI</code> 还会发邮件提示你:</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-5.png"><p>部署成功后就可以直接通过浏览器访问啦~ 储存库部署的是 <code>&lt;username&gt;.github.io</code> 的话，访问链接为 <code>https://&lt;username&gt;.github.io/</code>。其他储存库可以访问 <code>https://&lt;username&gt;.github.io/&lt;repoName&gt;</code>。</p><p>比如笔者的主页与博客是两个项目分离的，部署后的链接地址为 <a href="https://anran758.github.io">https://anran758.github.io</a> 和 <a href="https://anran758.github.io/blog">https://anran758.github.io/blog</a>。</p><h2 id="Travis-CI-CLI"><a href="#Travis-CI-CLI" class="headerlink" title="Travis CI CLI"></a>Travis CI CLI</h2><p>还可以通过 <a href="https://github.com/travis-ci/travis.rb#logs" target="_blank" rel="noopener">Travis CI CLI</a> 来进行操作:</p><p>按照文档的 <a href="https://github.com/travis-ci/travis.rb#installation" target="_blank" rel="noopener">Installation</a> 部分安装 <code>Travis CI CLI</code>。</p><p>安装完毕后通过命令行进入储存库目录，输入 <code>travis -v</code> 来检查是否安装成功。</p><p><code>Travis CI</code> 有两个不同域名版本的 API，一个是 <code>.com</code> 新版本，<code>.org</code> 是旧版本的。先确定自己使用的是哪个平台，再设定它:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认是 .org</span></span><br><span class="line">travis endpoint</span><br><span class="line"><span class="meta">#</span><span class="bash"> API endpoint: https://api.travis-ci.org/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 笔者使用的是 .com 的平台，因此需要修改默认的模式。设置 `--com` 和 `--pro` 的效果是相等的。</span></span><br><span class="line">travis endpoint --com --set-default</span><br><span class="line"><span class="meta">#</span><span class="bash"> API endpoint: https://api.travis-ci.com/ (stored as default)</span></span><br></pre></td></tr></table></figure><p>确定版本后输入 <code>travis login</code> 或 <code>travis login --pro</code> 进行登录。Mac os 系统可能会遇到 <code>Travis Ci CLI</code> 依赖的 <code>ruby</code> 版本和系统自带 <code>ruby</code> 有冲突：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">travis login --com</span><br><span class="line"><span class="meta">#</span><span class="bash"> We need your GitHub login to identify you.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This information will not be sent to Travis CI, only to api.github.com.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The password will not be displayed.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try running with --github-token or --auto <span class="keyword">if</span> you don<span class="string">'t want to enter your password anyway.</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Username: anran758</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Password <span class="keyword">for</span> anran758: ***********</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Unknown error</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> a full error report, run travis report --pro</span></span><br></pre></td></tr></table></figure><p>若不想处理这些麻烦的依赖问题，可以在 Travis CI 的<a href="https://travis-ci.com/account/preferences" target="_blank" rel="noopener">个人设置页</a> 复制 <code>access_token</code> 到 <code>~/.travis/config.yml</code> 的配置中:</p><img data-src="/blog/2020/06/08/github-travis-build/travis-log-settings.jpeg"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> code ~/.travis/config.yml <span class="comment"># 通过 vscode 进行修改</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 vim 进行修改</span></span><br><span class="line">vim ~/.travis/config.yml</span><br></pre></td></tr></table></figure><p>修改 <code>endpoints</code> 下的 <code>access_token</code> 并保存后，在命令输入 <code>travis accounts --pro</code> 检查是否成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">travis accounts --pro</span><br><span class="line"><span class="meta">#</span><span class="bash"> travis accounts --pro</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> anran758 (Anran758): not subscribed, 18 repositories</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">set</span> up a subscription, please visit travis-ci.com.</span></span><br></pre></td></tr></table></figure><p>这样就登录完毕啦~ 接着在输入 <code>travis logs</code> 就可以查看日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看最新构建的日志</span></span><br><span class="line">travis logs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定构建日志</span></span><br><span class="line">travis logs 2</span><br></pre></td></tr></table></figure><p>还可以清空指定构建的日志:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> travis logs 2 --d <span class="comment"># -d 简短选项</span></span></span><br><span class="line">travis logs 2 --delete</span><br></pre></td></tr></table></figure><p>参考资料:</p><ul><li><a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener">Creating a personal access token for the command line</a></li><li><a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">GitHub Pages Deployment</a></li><li><a href="https://docs.travis-ci.com/user/job-lifecycle/" target="_blank" rel="noopener">Job Lifecycle</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2020/06/08/github-travis-build/banner.png&quot;&gt;&lt;p&gt;我们知道 &lt;strong&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt;&lt;/strong&gt; 是 Github 免费提供给用户展示页面的一项服务。当我们完成项目开发后，想将页面部署到 Github Pages 时，该要怎么操作呢？&lt;/p&gt;&lt;p&gt;可以在 GitHub 的储存库设置中设置用于展示页面的分支，该分支只保留构建后的静态资源，也就是源码与编译后的静态资源分离。按照传统的做法是：手动运行编译命令，编译后再复制到指定分支中。这样操作很繁琐，但使用 &lt;code&gt;Travis CI&lt;/code&gt; 持续集成服务之后就可以不用操心这些事了。&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="https://anran758.github.io/blog/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="webpack" scheme="https://anran758.github.io/blog/tags/webpack/"/>
    
      <category term="环境搭建" scheme="https://anran758.github.io/blog/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="CI" scheme="https://anran758.github.io/blog/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>从零构建 webpack 脚手架(基础篇)</title>
    <link href="https://anran758.github.io/blog/2020/05/04/webpack-example/"/>
    <id>https://anran758.github.io/blog/2020/05/04/webpack-example/</id>
    <published>2020-05-04T14:58:56.000Z</published>
    <updated>2020-06-17T15:25:19.444Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2020/05/04/webpack-example/banner.png"><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包工具，它对于前端工程师来说可谓是如雷贯耳，基本上现在的大型应用都是通过 webpack 进行构建的。</p><p>webpack 具有高度可配置性，它拥有非常丰富的配置。在过去一段时间内曾有人将熟练配置 webpack 的人称呼为 “webapck 工程师”。当然，这称呼只是个玩笑话，但也能从侧面了解到 webpack 配置的灵活与复杂。</p><p>为了能够熟练掌握 webpack 的使用，接下来通过几个例子循序渐进的学习如何使用 webpack。</p><p>以下 <code>Demo</code> 都可以在 Github 的 <a href="https://github.com/anran758/webpack-example" target="_blank" rel="noopener">webpack-example</a> 中找到对应的示例，欢迎 star~</p><a id="more"></a><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>从 <code>webpack@v4.0.0</code> 开始，就可以不用再引入配置文件来打包项目。若没有提供配置的话，webpack 将按照默认规则进行打包。默认情况下 <code>src/index</code> 是项目的源代码入口，打包后的代码会输出到 <code>dist/main.js</code> 上。</p><p>首先来初始化一个项目，项目名为 <a href="https://github.com/anran758/webpack-example/tree/master/getting-started" target="_blank" rel="noopener">getting-started</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建项目文件夹</span></span><br><span class="line">mkdir getting-started</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入项目目录</span></span><br><span class="line">cd getting-started</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm 项目</span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>初始化项目后，项目目录会新增一个 <code>package.json</code>，该文件记录了项目依赖的相关信息。若想要使用 webpack 的话需要安装它的依赖: <code>webpack</code> (本体)和 <code>webpack-cli</code> (可以在命令行操作 webpack 的工具):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -D 和 --save-dev 选项都可以用于安装开发依赖</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm i --save-dev webpack webpack-cli</span></span><br><span class="line">npm i -D webpack webpack-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用 yarn 安装开发依赖</span></span><br><span class="line">yarn add -D webpack webpack-cli</span><br></pre></td></tr></table></figure><p>接着创建 webpack 所需的默认入口文件 <code>src/index.js</code> 以及测试模块所用的 <code>src/log.js</code> 文件。此时的项目结构大致如下:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  .</span><br><span class="line">  ├── package.json</span><br><span class="line"><span class="addition">+ ├── src</span></span><br><span class="line"><span class="addition">+ │   ├── index.js</span></span><br><span class="line"><span class="addition">+ │   └── log.js</span></span><br><span class="line">  └── node_modules</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/log.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> log = <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  src/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; log &#125; <span class="keyword">from</span> <span class="string">'./log'</span></span><br><span class="line"></span><br><span class="line">log(<span class="string">'anran758'</span>);</span><br></pre></td></tr></table></figure><p><code>src/log.js</code> 导出了一个工具函数，它负责向控制台发送消息。<code>src/index.js</code> 是默认的入口文件，它引入 <code>log</code> 函数并调用了它。</p><p>上面的代码很简单，像这种模块化的代码按照传统 <code>&lt;script src&gt;</code> 引入的话，浏览器是不能正确执行的。可以在根目录上创建一个 <code>index.html</code> 引入 js 脚本来测试一下:</p><figure class="highlight html"><figcaption><span>/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入脚本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./src/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建文件后，将上例代码复制到 <code>index.html</code> 中。保存并打开该文件，看看浏览器能否正确处理模块逻辑。不出意外的话，文件在浏览器打开后，浏览器开发者工具会抛出错误信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught SyntaxError: Cannot use import statement outside a module</span><br></pre></td></tr></table></figure><p>言下之意就是说浏览器不能正确的解析 <code>ES module</code> 语句，此时 webpack 就可以派上用场啦~ 在 <code>package.json</code> 中的 <code>scripts</code> 字段中添加如下命令:</p><figure class="highlight diff"><figcaption><span>/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+    "build": "webpack"</span></span><br><span class="line"><span class="deletion">-    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在命令行输入 <code>npm run build</code> 调用 <code>webpack</code> 对当前项目进行编译，编译后的结果会输出到 <code>dist/main.js</code> 文件中(即便本地没有 dist 目录，它都会自动创建该目录)。输出文件后，修改 <code>index.html</code> 对 js 的引用:</p><figure class="highlight diff"><figcaption><span>/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;body&gt;</span><br><span class="line"><span class="addition">+   &lt;script src="./dist/main.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="deletion">-   &lt;script src="./src/index.js"&gt;&lt;/script&gt;</span></span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><p>重新刷新页面后就能看到 <code>log</code> 正确的输出了 <code>Hello anran758!</code>。点击 log 右侧的链接，可以跳转至 <code>Source</code> 面板，将代码格式化后可以清晰地看到编译后 js 的变化:</p><img data-src="/blog/2020/05/04/webpack-example/example-1.png"><h2 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h2><p>当然，上例代码只不过是小试牛刀。对于正式的项目会有更复杂的需求，因此需要自定义配置。<code>webpack</code> 主要有两种方式接收配置：</p><p><strong>第一种:</strong> 通过 <code>Node.js</code> API引入 webpack 包，在调用 webpack 函数时传入配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">  <span class="comment">// webpack 配置对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webpack(webpackConfig, (err, stats) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err || stats.hasErrors()) &#123;</span><br><span class="line">    <span class="comment">// 在这里处理错误</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理完成</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>第二种:</strong> 通过 <code>webpack-cli</code> 在终端使使用 webpack 时指定配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack [--config webpack.config.js]</span><br></pre></td></tr></table></figure><p>两种方法内配置都是相似的，只是调用的形式不同。本篇先使用 <code>webpack-cli</code> 来做示例。</p><p>webpack 接受一个特定的配置文件，配置文件要求导出一个对象、函数、<code>Promise</code> 或多个配置对象组成的数组。</p><p>现在将上一章的 Demo 复制一份出来，并重命名为 <strong><a href="https://github.com/anran758/webpack-example/tree/master/getting-started-config" target="_blank" rel="noopener">getting-started-config</a></strong>，在该目录下新建 <code>webpack.config.js</code> 文件，文件内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  起点或是应用程序的起点入口</span></span><br><span class="line">  entry: <span class="string">"./src/index"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 编译后的输出路径</span></span><br><span class="line">    <span class="comment">// 注意此处必须是绝对路径，不然 webpack 将会抛错（使用 Node.js 的 path 模块）</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出 bundle 的名称</span></span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置主要是定义了程序入口、编译后的文件输出目录。然后在 <code>src/index.js</code> 中修改一些内容用来打包后测试文件是否被正确被编译:</p><figure class="highlight diff"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  import &#123; log &#125; from './log'</span><br><span class="line"></span><br><span class="line"><span class="addition">+ log('本节在测试配置噢');</span></span><br><span class="line"><span class="deletion">- log('anran758');</span></span><br></pre></td></tr></table></figure><p>随后在终端输入 <code>num run build</code> 进行编译，可以看到 <code>dist</code> 目录下多了个 <code>bundle.js</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> webpack --config ./webpack.config.js</span></span><br><span class="line"></span><br><span class="line">Hash: 3cd5f3bbfaf23f01de37</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 117ms</span><br><span class="line">Built at: 05/06/2020 1:01:37 PM</span><br><span class="line">    Asset        Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  1010 bytes       0  [emitted]  main</span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[0] ./src/index.js + 1 modules 123 bytes &#123;0&#125; [built]</span><br><span class="line">    | ./src/index.js 62 bytes [built]</span><br><span class="line">    | ./src/log.js 61 bytes [built]</span><br><span class="line"></span><br><span class="line">WARNING in configuration</span><br><span class="line">The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class="line">You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br></pre></td></tr></table></figure><p>由于我们输出的文件名被修改了，此时还得修改 <code>html</code> 的引入路径。但每改一次输出目录，<code>HTML</code> 中的引入路径也得跟着改，这样替换的话就比较容易出纰漏。那能不能让 webpack 自动帮我们插入资源呢？答案是可以的。</p><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p>webpack 提供<strong>插件(plugin)</strong>的功能，它可以用于各种方式自定义 webpack 构建过程。</p><p><strong><a href="https://webpack.js.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener">html-webpack-plugin</a></strong> 可以在运行 webpack 时自动生成一个 <code>HTML</code> 文件，并将打包后的 <code>js</code> 代码自动插入到文档中。下面来安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --D html-webpack-plugin</span><br></pre></td></tr></table></figure><p>安装后在 <code>webpack.config.js</code> 中使用该插件:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    // 起点或是应用程序的起点入口</span><br><span class="line">    entry: "./src/index",</span><br><span class="line"></span><br><span class="line">    // 输出配置</span><br><span class="line">    output: &#123;</span><br><span class="line">      // 编译后的输出路径</span><br><span class="line">      // 注意此处必须是绝对路径，不然 webpack 将会抛错（使用 Node.js 的 path 模块）</span><br><span class="line">      path: path.resolve(__dirname, "dist"),</span><br><span class="line"></span><br><span class="line">      // 输出 bundle 的名称</span><br><span class="line">      filename: "bundle.js",</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+   plugins: [</span></span><br><span class="line"><span class="addition">+     new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+       title: 'Test Configuration'</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line"><span class="addition">+   ],</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>重新编译后 <code>HTML</code> 也被输出到 <code>dist</code> 目录下。查看 <code>dist/index.html</code> 的源码可以发现：不仅源码被压缩了，同时 <code>&lt;script&gt;</code> 标签也正确的引入了 <code>bundle.js</code>。</p><p>此时目录结构如下:</p><blockquote><p>后续目录展示会将 <code>node_modules</code>、<code>package-lock.json</code>、<code>yarn.lock</code> 这种对项目架构讲解影响不大的目录省略掉..</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── bundle.js</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── main.js</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── log.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><p>处理完资源自动插入的问题后，还有一个问题需要我们处理：虽然 webpack 现在能自动生成 <code>HTML</code> 并插入脚本，但我们还得在 <code>HTML</code> 中写其他代码逻辑呀，总不能去改 <code>/dist/index.html</code> 文件吧？</p><p>这个问题也很好解决。<code>html-webpack-plugin</code> 在初始化实例时，传入的配置中可以加上 <code>template</code> 属性来指定模板。配置后直接在指定模板上进行编码就可以解决这个问题了:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    // 起点或是应用程序的起点入口</span><br><span class="line">    entry: "./src/index",</span><br><span class="line">  </span><br><span class="line">    // 输出配置</span><br><span class="line">    output: &#123;</span><br><span class="line">      // 编译后的输出路径</span><br><span class="line">      // 注意此处必须是绝对路径，不然 webpack 将会抛错（使用 Node.js 的 path 模块）</span><br><span class="line">      path: path.resolve(__dirname, "dist"),</span><br><span class="line">  </span><br><span class="line">      // 输出 bundle 的名称</span><br><span class="line">      filename: "bundle.js",</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      // html-webpack-plugin</span><br><span class="line">      // https://github.com/jantimon/html-webpack-plugin#configuration</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Test Configuration',</span><br><span class="line"><span class="addition">+       template: path.resolve(__dirname, "./index.html"),</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用模板后 <code>html-webpack-plugin</code> 也会自动将脚本插入到模板中。因此可以将模板中的 <code>&lt;script&gt;</code> 给去掉了。为了测试输出的文件是否使用了模板，在 <code>&lt;body&gt;</code> 内随便插入一句话，重新打包后预览输出的文件是否包含这句话:</p><figure class="highlight diff"><figcaption><span>/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang="en"&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line"><span class="addition">+    &lt;title&gt;Test Config&lt;/title&gt;</span></span><br><span class="line"><span class="deletion">-    &lt;title&gt;Test&lt;/title&gt;</span></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"><span class="addition">+   &lt;p&gt;Test Config&lt;/p&gt;</span></span><br><span class="line"><span class="deletion">-   &lt;script src="./dist/main.js"&gt;&lt;/script&gt;</span></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改文件后，重新打包就能看到模板也被压缩输出至 <code>/dist/index.html</code> 了，<code>script</code> 标签也正常的插入了。</p><h2 id="清理目录"><a href="#清理目录" class="headerlink" title="清理目录"></a>清理目录</h2><p>现在来看编译后的目录，我们发现 <code>dist/mian.js</code> 这文件是使用配置之前编译出来的文件，现在我们的项目已经不再需要它了。这种历史遗留的旧文件就应该在每次编译之前就被扔进垃圾桶，只输出最新的结果。</p><p><strong><a href="https://www.npmjs.com/package/clean-webpack-plugin" target="_blank" rel="noopener">clean-webpack-plugin</a></strong> 或 <strong><a href="https://www.npmjs.com/package/rimraf" target="_blank" rel="noopener">rimraf</a></strong> 可以完成清理功能。前者是比较流行的 webpack 清除插件，后者是通用的 unix 删除命令(安装该依赖包后 windows 平台也能用)。如果仅是清理 <code>/dist</code> 目录下文件的话，个人是比较倾向使用 <code>rimraf</code>的，因为它更小更灵活。而 <code>clean-webpack-plugin</code> 是针对 webpack 输出做的一系列操作。</p><p>在终端安装依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D rimraf</span><br></pre></td></tr></table></figure><p><code>rimraf</code> 的命令行的语法是: <code>rimraf &lt;path&gt; [&lt;path&gt; ...]</code>，我们在 <code>package.json</code> 的 <code>scirpts</code> 中修改 <code>build</code> 的命令:</p><figure class="highlight diff"><figcaption><span>/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"><span class="addition">+  "build": "rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js"</span></span><br><span class="line"><span class="deletion">-  "build": "webpack --config ./webpack.config.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js</span></span><br><span class="line"></span><br><span class="line">Hash: 763fe4b004e1c33c6876</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 342ms</span><br><span class="line">Built at: 05/06/2020 2:35:49 PM</span><br><span class="line">     Asset        Size  Chunks             Chunk Names</span><br><span class="line"> bundle.js  1010 bytes       0  [emitted]  main</span><br><span class="line">index.html   209 bytes          [emitted]  </span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[0] ./src/index.js + 1 modules 123 bytes &#123;0&#125; [built]</span><br><span class="line">    | ./src/index.js 62 bytes [built]</span><br><span class="line">    | ./src/log.js 61 bytes [built]</span><br><span class="line"></span><br><span class="line">WARNING in configuration</span><br><span class="line">The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class="line">You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">       1 module</span><br></pre></td></tr></table></figure><p>这样 webpack 输出的 <code>/dist</code> 目录始终是最新的东西。</p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>在正常的页面中，引入 <code>css</code> 样式表会让页面变得更美观。引入图片可以让页面内容更丰富。</p><p>然而 webpack 本体只能处理原生的 JavaScript 模块，你让它处理 <code>css</code> 或图片资源，它是无法直接处理的。为了处理这种问题，webpack 提供了 <strong><a href="https://webpack.js.org/concepts/loaders/" target="_blank" rel="noopener">loader</a></strong> 的机制，用于对模块外的源码进行转换。</p><p><code>loader</code> 一般是单独的包，我们可以在社区找到对应 <code>loader</code> 来处理特定的资源。在使用前通过 <code>npm</code> 安装到项目的开发依赖中即可。<code>loader</code> 可以通过<a href="https://webpack.js.org/concepts/loaders/#configuration" target="_blank" rel="noopener">配置</a>、<a href="https://webpack.js.org/concepts/loaders/#inline" target="_blank" rel="noopener">内联</a>或 <a href="https://webpack.js.org/concepts/loaders/#cli" target="_blank" rel="noopener">Cli</a> 这三种方式来使用。下文主要以 <code>配置</code> 的方式来使用。</p><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>往常引入 <code>css</code> 样式表无非就是在 <code>html</code> 中通过 <code>&lt;link&gt;</code> 标签引入。现在想通过 webpack 来管理依赖得需要安装对应的 <code>loader</code> 来处理这些事。</p><p><strong><a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="noopener">css-loader</a></strong> 可以让 webpack 可以引入 <code>css</code> 资源。光有让 webpack 识别 css 的能还不够。为了能将 <code>css</code> 资源进行导出，还要安装 <strong><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a></strong> 插件：</p><p>现在将上一节的 Demo 复制并重名为 <a href="https://github.com/anran758/webpack-example/tree/master/getting-started-loader-css" target="_blank" rel="noopener">getting-started-loader-css</a>。进入新的项目目录后安装依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D css-loader mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>在更改配置之前，为了使项目结构更清晰，咱们按照文件类型重新调整<strong>源码目录结构</strong>。将 <code>src</code> 下的 <code>js</code> 文件都放进 <code>js</code> 文件夹中。同时创建 <code>/src/css/style.css</code> 样式表。调整后的目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── style.css</span><br><span class="line">│   └── js</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── log.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><p>现在将 <a href="https://codepen.io/anran758/pen/QWbdgPx" target="_blank" rel="noopener">Flexbox 布局用例</a> 中结尾的 Demo 迁移到项目中，测试一下效果:</p><details><summary>HTML 源码</summary><figure class="highlight html"><figcaption><span>/src/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panels"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item name"</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item index"</span>&gt;</span>I<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item desc"</span>&gt;</span>Pixiv Content ID: 65843704<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item name"</span>&gt;</span>Birthday<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item index"</span>&gt;</span>II<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item desc"</span>&gt;</span>Pixiv Content ID: 70487844<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item name"</span>&gt;</span>Dream<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item index"</span>&gt;</span>III<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item desc"</span>&gt;</span>Pixiv Content ID: 65040104<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item name"</span>&gt;</span>Daliy<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item index"</span>&gt;</span>IV<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item desc"</span>&gt;</span>Pixiv Content ID: 64702860<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel5"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item name"</span>&gt;</span>Schoolyard<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item index"</span>&gt;</span>V<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item desc"</span>&gt;</span>Pixiv Content ID: 67270728<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></details><details><summary>CSS 源码</summary><figure class="highlight css"><figcaption><span>/src/css/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'helvetica neue'</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panels</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ececec</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: font-size <span class="number">0.7s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.61</span>, -<span class="number">0.19</span>, <span class="number">0.7</span>, -<span class="number">0.11</span>),</span><br><span class="line">    flex <span class="number">0.7s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.61</span>, -<span class="number">0.19</span>, <span class="number">0.7</span>, -<span class="number">0.11</span>), background <span class="number">0.2s</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f8ea</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fffcdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#beddcf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel4</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: ​<span class="number">#c3cbd8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel5</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#dfe0e4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Amatic SC'</span>, cursive;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.72</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.45</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.name</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> <span class="selector-class">.index</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">4em</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.desc</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.open-active</span> <span class="selector-class">.name</span>,</span><br><span class="line"><span class="selector-class">.open-active</span> <span class="selector-class">.desc</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span><span class="selector-class">.open</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>JavaScript 源码</summary><figure class="highlight js"><figcaption><span>/src/js/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; log &#125; <span class="keyword">from</span> <span class="string">'./log'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../css/style.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> panels = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.panel'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toggleOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    panels.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item === <span class="keyword">this</span>) <span class="keyword">return</span>;</span><br><span class="line">      item.classList.remove(<span class="string">'open'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.classList.toggle(<span class="string">'open'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toggleActicon</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.propertyName.includes(<span class="string">'flex-grow'</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.classList.toggle(<span class="string">'open-active'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给每个元素注册事件</span></span><br><span class="line">  panels.forEach(<span class="function"><span class="params">panel</span> =&gt;</span> &#123;</span><br><span class="line">    panel.addEventListener(<span class="string">'click'</span>, toggleOpen)</span><br><span class="line">    panel.addEventListener(<span class="string">'transitionend'</span>, toggleActicon)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">installEvent();</span><br><span class="line">log(<span class="string">'本节在测试配置噢'</span>);</span><br></pre></td></tr></table></figure></details><p>修改 webpack 配置，引入 <code>css-loader</code> 和 <code>mini-css-extract-plugin</code>。既然已经对源码目录进行分类了，那顺便也给输出目录的文件也进行分类整理吧:</p><figure class="highlight diff"><figcaption><span>/webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"><span class="addition">+ const MiniCssExtractPlugin = require('mini-css-extract-plugin');</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 起点或是应用程序的起点入口</span><br><span class="line">  entry: "./src/js/index",</span><br><span class="line"></span><br><span class="line">  // 输出配置</span><br><span class="line">  output: &#123;</span><br><span class="line">    // 编译后的输出路径</span><br><span class="line">    // 注意此处必须是绝对路径，不然 webpack 将会抛错（使用 Node.js 的 path 模块）</span><br><span class="line">    path: path.resolve(__dirname, "dist"),</span><br><span class="line"></span><br><span class="line">    // 输出 bundle 的名称</span><br><span class="line"><span class="deletion">-    filename: "bundle.js",</span></span><br><span class="line"><span class="addition">+    filename: "js/bundle.js",</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line"><span class="addition">+  module: &#123;</span></span><br><span class="line"><span class="addition">+    rules: [</span></span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.css$/i,</span></span><br><span class="line"><span class="addition">+        use: [MiniCssExtractPlugin.loader, 'css-loader'],</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line"><span class="addition">+    ],</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">  plugins: [</span><br><span class="line">    // html-webpack-plugin</span><br><span class="line">    // https://github.com/jantimon/html-webpack-plugin#configuration</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: 'Test Configuration',</span><br><span class="line"><span class="deletion">-      template: path.resolve(__dirname, "./index.html"),</span></span><br><span class="line"><span class="addition">+      template: path.resolve(__dirname, "./src/index.html"),</span></span><br><span class="line"><span class="addition">+    &#125;),</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    // 提取 css 到单独的文件</span></span><br><span class="line"><span class="addition">+    // https://github.com/webpack-contrib/mini-css-extract-plugin</span></span><br><span class="line"><span class="addition">+    new MiniCssExtractPlugin(&#123;</span></span><br><span class="line"><span class="addition">+      // 选项类似于 webpackOptions.output 中的相同选项，该选项是可选的</span></span><br><span class="line"><span class="addition">+      filename: 'css/index.css',</span></span><br><span class="line"><span class="addition">+    &#125;)</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们根据上面的配置来解读 <code>loader</code> 的使用:</p><p>在上面的配置中，<strong><a href="https://webpack.js.org/configuration/module/" target="_blank" rel="noopener">module</a></strong> 规定了如何处理项目中的不同类型的模块。<strong><a href="https://webpack.js.org/configuration/module/#modulerules" target="_blank" rel="noopener">rules</a></strong> 是创建模块时，匹配请求的 <code>rule</code> (规则)数组。<code>rule</code> 是一个对象，其中最常见的属性就是 <a href="https://webpack.js.org/configuration/module/#ruletest" target="_blank" rel="noopener">test</a> 、 <a href="https://webpack.js.org/configuration/module/#ruleuse" target="_blank" rel="noopener">use</a> 和 <a href="https://webpack.js.org/configuration/module/#ruleloader" target="_blank" rel="noopener">loader</a>。</p><p><code>rule.test</code> 是匹配条件，通常会给它提供一个<strong>正则表达式</strong>或是<strong>由正则表达式组成的数组</strong>。如果配置了 <code>test</code> 属性，那这个 <code>rule</code> 将匹配指定条件。比如匹配条件写为 <code>test: /\.css$/i</code>，这意味着给后缀为 <code>.css</code> 的文件使用 <code>loader</code>。</p><p><code>rule.use</code> 顾名思义就是使用，给符合匹配条件的文件使用 <code>loader</code>。它可以接收一个字符串，这个字符串会通过 webpack 的 <a href="https://webpack.js.org/configuration/resolve/#resolveloader" target="_blank" rel="noopener">resolveLoader</a> 选项进行解析。该选项可以不配置，它内置有解析规则。比如下例中默认会从 <code>node_modules</code> 中查找依赖:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use: <span class="string">'css-loader'</span></span><br></pre></td></tr></table></figure><p><code>rule.use</code> 还可以是应用于模块的 <a href="https://webpack.js.org/configuration/module/#useentry" target="_blank" rel="noopener">UseEntry</a> 对象。<code>UseEntry</code> 对象内主要有 <code>loader</code> 和 <code>options</code> 两个属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use 传入 UseEntry 类型的对象</span></span><br><span class="line">use: &#123;</span><br><span class="line">  <span class="comment">// 必选项，要告诉 webpack 使用什么 loader</span></span><br><span class="line">  loader: <span class="string">'css-loader'</span>,</span><br><span class="line">  <span class="comment">// 可选项，传递给 loader 选项</span></span><br><span class="line">  options: &#123;</span><br><span class="line">    modules: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果 <code>UseEntry</code> 对象内只设置 <code>loader</code> 属性，那它与单传的字符串的效果是一样的。而 <code>options</code> 是传递给 <code>loader</code> 的配置项，不同 <code>loader</code> 会提供有不同的 <code>options</code>。值得注意的是，如果 <code>use</code> 是以对象形式传入，<strong><code>loader</code> 属性是必填的，而 <code>options</code> 是可选的</strong>。</p><p><code>rule.use</code> 还可以是一个函数，函数形参是正在加载的模块对象参数，最终该函数要返回 <code>UseEntry</code> 对象或数组:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use: <span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(info);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">   loader: <span class="string">'svgo-loader'</span>,</span><br><span class="line">   options: &#123;</span><br><span class="line">     plugins: [&#123;</span><br><span class="line">       cleanupIDs: &#123; <span class="attr">prefix</span>: basename(info.resource) &#125;</span><br><span class="line">     &#125;]</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出函数的形参 <code>info</code> 可以看到该对象拥有如下属性:</p><ul><li><code>compiler</code>: 当前的 webpack 编译器（可以未定义）</li><li><code>issuer</code>: 导入正在加载的模块的模块的路径</li><li><code>realResource</code>: 始终是要加载的模块的路径</li><li><code>resource</code>: 要加载的模块的路径，通常等于 <code>realResource</code>。除非在请求字符串中通过 <a href="https://webpack.js.org/concepts/loaders/#inline" target="_blank" rel="noopener">!=!</a> 覆盖资源名。</li></ul><p>由此可见，使用函数方式可用于按模块更改 loader 选项。</p><p><code>rule.use</code> 最常见的使用形式还是提供一个数组，数组中每项可以是字符串、<code>UseEntry</code> 对象、<code>UseEntry</code> 函数。这也是一个套娃的过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use: [&#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;, <span class="string">'css-loader'</span>],</span><br></pre></td></tr></table></figure><p>这里需要注意的是，<strong><code>rule</code> 中使用多个 <code>loader</code> 要注意其顺序</strong>。使用数组 <code>loader</code> 将会<strong>从右至左进行应用</strong>。</p><p>比如上例中最先通过 <code>css-loader</code> 来处理 <code>.css</code> 文件的引入问题，再通过 <code>MiniCssExtractPlugin.loader</code> (Tips: 该值是 <code>loader</code> 的绝对路径)来提取出文件。如果反过来应用就会出问题了，<code>webpack</code> 都不知道如何引用 <code>css</code> 文件，自然提取不出东西啦。</p><p><code>rule.loader</code> 是 <code>rule.use</code> 的缩写，等价于 <code>rule.use: [{ loader }]</code>。webpack 像这样简写的配置属性还有很多，这样做有利也有弊。对于熟手来说，提供这种简便选项可以减少配置的嵌套关系，但对新手来说，这配置有种错综复杂的感觉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 匹配文件规则</span></span><br><span class="line">  test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">  <span class="comment">// rule.use 简写形式</span></span><br><span class="line">  loader: <span class="string">'css-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来回归正题。重新编译 webpack，编译后的目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── index.css</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       └── bundle.js</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── style.css</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── log.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>图片资源也是项目中的常见资源，引入图片资源同样需要安装 <code>loader</code>。处理图片资源的 <code>loader</code> 主要有两种，分别是 <code>url-loader</code> 和 <code>file-loader</code>。</p><h4 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h4><p><strong><a href="https://github.com/webpack-contrib/file-loader" target="_blank" rel="noopener">file-loader</a></strong> 是将 <code>import/require()</code> 引入的文件解析为 url，并把文件输出到输出目录中。</p><p>复制一份新 <code>Demo</code> 并重命名为 <strong><a href="https://github.com/anran758/webpack-example/tree/master/getting-started-loader-images" target="_blank" rel="noopener">getting-started-loader-images</a></strong>。在安装 <code>loader</code> 之前先做一个小优化:</p><p>如果我们会频繁修改源码文件，修改完后又要重新编译，这个步骤实际是有点繁琐的。webpack 有个 <code>watch</code> 选项可以监听文件变化，若文件有修改 webpack 将自动编译(若修改的是配置文件的话，还是需要重新运行命令)。</p><p>在 <code>package.json</code> 的 <code>script</code> 中给 webpack 添加 <code>-w</code> 选项:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build:watch": "rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js -w"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>接下来就可以安装依赖了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D file-loader</span><br></pre></td></tr></table></figure><p>新建一个 <code>/src/images</code> 文件夹，往里面添加一些图片：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  .</span><br><span class="line">  ├── package.json</span><br><span class="line">  ├── src</span><br><span class="line">  │   ├── css</span><br><span class="line">  │   │   └── style.css</span><br><span class="line"><span class="addition">+ │   ├── images</span></span><br><span class="line"><span class="addition">+ │   │   ├── 01.jpg</span></span><br><span class="line"><span class="addition">+ │   │   ├── 02.png</span></span><br><span class="line"><span class="addition">+ │   │   ├── 03.jpg</span></span><br><span class="line"><span class="addition">+ │   │   ├── 04.png</span></span><br><span class="line"><span class="addition">+ │   │   ├── 05.png</span></span><br><span class="line"><span class="addition">+ │   │   ├── 06.jpg</span></span><br><span class="line"><span class="addition">+ │   │   ├── webpack.jpg</span></span><br><span class="line"><span class="addition">+ │   │   └── webpack.svg</span></span><br><span class="line">  │   ├── index.html</span><br><span class="line">  │   └── js</span><br><span class="line">  │       ├── index.js</span><br><span class="line">  │       └── log.js</span><br><span class="line">  └── webpack.config.js</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中配置 <code>loader</code>：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.html$/i,</span><br><span class="line">      loader: 'html-loader',</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      // 匹配文件规则</span><br><span class="line">      test: /\.css$/i,</span><br><span class="line">      // use 从右至左进行应用</span><br><span class="line">      use: [MiniCssExtractPlugin.loader, 'css-loader'],</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+   &#123;</span></span><br><span class="line"><span class="addition">+     test: /\.(png|jpe?g|gif|webp|svg)(\?.*)?$/,</span></span><br><span class="line"><span class="addition">+     use: &#123;</span></span><br><span class="line"><span class="addition">+       loader: 'file-loader',</span></span><br><span class="line"><span class="addition">+       options: &#123;</span></span><br><span class="line"><span class="addition">+         name: 'img/[name].[hash:8].[ext]'</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>默认情况下图片会被输出到 <code>dist</code> 目录中，文件名也会被更改为一长串的哈希值。为了保持目录整洁，将要被输出的图片资源都归类到 <code>img</code> 目录中。</p><p>可以通过设定 <code>name</code> 或 <code>publicPath</code> 来指定目录:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接设置 name</span></span><br><span class="line">use: &#123;</span><br><span class="line">  loader: <span class="string">'file-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    name: <span class="string">'img/[name].[hash:8].[ext]'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 publicPath，效果与上例等价</span></span><br><span class="line">use: &#123;</span><br><span class="line">  loader: <span class="string">'file-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    publicPath: <span class="string">'img'</span>,</span><br><span class="line">    name: <span class="string">'[name].[hash:8].[ext]'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>name</code> 属性的值可以用 <code>/</code> 分层。除去最末尾一层的是文件名，前面每层 <code>/</code> 分隔都是嵌套的文件夹。比如值为 <code>static/img/[name].[hash:8].[ext]</code> 最后输出的结果是：根目录创建一个 <code>static</code> 目录，<code>static</code> 内又会创建一个 <code>img</code> 目录，<code>img</code> 内输出被引用的图片资源。</p><p>由于匹配的图片资源有很多，咱们不能写死输出的文件名，不然会引发重名问题，操作系统不准这样干。这时 <strong><a href="https://github.com/webpack-contrib/file-loader#placeholders" target="_blank" rel="noopener">占位符(placeholder)</a></strong>就能排上用场了。<code>name</code> 中方括号包裹起来的是占位符，不同占位符会被替换成不同的信息。</p><p>比如上例中使用了三个占位符: <code>name</code> 是文件的名称、<code>hash</code> 是指定用于对文件内容进行 hash (哈希)处理的 hash 方法，后面冒号加数值代表截取 hash 的长度为 8、<code>ext</code> 是文件的扩展名。在文件名加入 <code>hash</code> 的用意是针对浏览器缓存而特意加入的。现在可以不用在意这种优化问题，未来会专门另起一篇文章讲优化的问题。</p><p>现在修改完 webapck 配置，接着再来完善上一节的 Demo。在 <code>/src/css/styles.css</code> 中使用 <code>backgournd-image</code> 引入图片:</p><details><summary>css 引入图片资源</summary><figure class="highlight css"><figcaption><span>/src/css/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 省略其他代码... */</span></span><br><span class="line"><span class="selector-class">.panel1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f8ea</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../images/01.jpg'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fffcdd</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../images/02.png'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#beddcf</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../images/03.jpg'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel4</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: ​<span class="number">#c3cbd8</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../images/04.png'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel5</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#dfe0e4</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../images/05.png'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>重新编译后的结果如下:</p><details><summary>编译结果</summary><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js -w</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> webpack is watching the files…</span><br><span class="line"></span><br><span class="line"> Hash: 398663f1f4d417d17c94</span><br><span class="line"> Version: webpack 4.43.0</span><br><span class="line"> Time: 1086ms</span><br><span class="line"> Built at: 05/29/2020 2:19:03 PM</span><br><span class="line">               Asset       Size  Chunks                    Chunk Names</span><br><span class="line">       css/index.css   1.72 KiB       0  [emitted]         main</span><br><span class="line"> img/01.a8e7ddb2.jpg    170 KiB          [emitted]         </span><br><span class="line"> img/02.46713ed3.png    744 KiB          [emitted]  [big]  </span><br><span class="line"> img/03.70b4bb75.jpg    529 KiB          [emitted]  [big]  </span><br><span class="line"> img/04.b7d3aa38.png    368 KiB          [emitted]  [big]  </span><br><span class="line"> img/05.875a8bc2.png    499 KiB          [emitted]  [big]  </span><br><span class="line">          index.html  990 bytes          [emitted]         </span><br><span class="line">        js/bundle.js   1.33 KiB       0  [emitted]         main</span><br><span class="line"> Entrypoint main = css/index.css js/bundle.js</span><br><span class="line"> [0] ./src/css/style.css 39 bytes &#123;0&#125; [built]</span><br><span class="line"> [1] ./src/js/index.js + 1 modules 938 bytes &#123;0&#125; [built]</span><br><span class="line">     | ./src/js/index.js 873 bytes [built]</span><br><span class="line">     | ./src/js/log.js 60 bytes [built]</span><br><span class="line">     + 1 hidden module</span><br><span class="line"></span><br><span class="line"> WARNING in configuration</span><br><span class="line"> The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class="line"> You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br><span class="line"></span><br><span class="line"> WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).</span><br><span class="line"> This can impact web performance.</span><br><span class="line"> Assets: </span><br><span class="line">   img/04.b7d3aa38.png (368 KiB)</span><br><span class="line">   img/05.875a8bc2.png (499 KiB)</span><br><span class="line">   img/02.46713ed3.png (744 KiB)</span><br><span class="line">   img/03.70b4bb75.jpg (529 KiB)</span><br><span class="line"></span><br><span class="line"> WARNING in webpack performance recommendations: </span><br><span class="line"> You can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.</span><br><span class="line"> For more info visit https://webpack.js.org/guides/code-splitting/</span><br><span class="line"> Child HtmlWebpackCompiler:</span><br><span class="line">      1 asset</span><br><span class="line">     Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">     [0] ./node_modules/html-webpack-plugin/lib/loader.js!./src/index.html 1.01 KiB &#123;0&#125; [built]</span><br><span class="line"> Child mini-css-extract-plugin node_modules/css-loader/dist/cjs.js!src/css/style.css:</span><br><span class="line">     Entrypoint mini-css-extract-plugin = *</span><br><span class="line">     [0] ./node_modules/css-loader/dist/cjs.js!./src/css/style.css 3.09 KiB &#123;0&#125; [built]</span><br><span class="line">     [3] ./src/images/01.jpg 63 bytes &#123;0&#125; [built]</span><br><span class="line">     [4] ./src/images/02.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">     [5] ./src/images/03.jpg 63 bytes &#123;0&#125; [built]</span><br><span class="line">     [6] ./src/images/04.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">     [7] ./src/images/05.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">         + 2 hidden modules</span><br></pre></td></tr></table></figure></details><p>当我们重新打开 <code>/dist/index.html</code> 时会发现图片并没有加载出来？查看 <code>css</code> 源码后发现原来是路径有问题，编译后的路径是 <code>img/01.a8e7ddb2.jpg</code> 这种相对路径。</p><p>由于 <code>css</code> 本身有一个文件夹，通过相对路径引入，那就会从 css 目录下进行查找。实际找到的是 <code>dist/css/img/01.a8e7ddb2.jpg</code> 这条路径。</p><p>遇到这种情况怎么办呢？我们可以给 <code>MiniCssExtractPlugin.loader</code> 添加 <code>publicPath</code> 选项用以修正路径，重新编译后就可以看到图片正确被加载了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 匹配文件规则</span></span><br><span class="line">  test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">  <span class="comment">// use 从右至左进行应用</span></span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: MiniCssExtractPlugin.loader,</span><br><span class="line">      options: &#123;</span><br><span class="line">        publicPath: <span class="string">'../'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'css-loader'</span></span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在 js 中也可以引用文件，打开 <code>/src/js/index.js</code>, 在原先的基础上添加如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> img1 <span class="keyword">from</span> <span class="string">'../images/06.jpg'</span>;</span><br><span class="line"><span class="keyword">import</span> img2 <span class="keyword">from</span> <span class="string">'../images/webpack.jpg'</span>;</span><br><span class="line"><span class="keyword">import</span> img3 <span class="keyword">from</span> <span class="string">'../images/webpack.svg'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略其他代码...</span></span><br><span class="line"></span><br><span class="line">log(<span class="string">'测试图片引入~'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'img1 --&gt; '</span>, img1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'img2 --&gt; '</span>, img2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'img3 --&gt; '</span>, img3);</span><br></pre></td></tr></table></figure><p>重新编译后可以在 <code>Console</code> 面板可以看到 js 输出了文件资源的路径:</p><img data-src="/blog/2020/05/04/webpack-example/file-loader-1.png"><h4 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h4><p><a href="https://www.webpackjs.com/loaders/url-loader/" target="_blank" rel="noopener">url-loader</a> 功能也类似于 <code>file-loader</code>，不同的是当文件大小(单位 byte)小于 <code>limit</code> 时，可以返回一个 <code>DataURL</code>。</p><p>为什么要用 <code>DataURL</code> 呢？我们知道页面上每加载一个图片资源，都会发起一个 <code>HTTP</code> 请求。而建立 <code>HTTP</code> 请求的过程是需要花时间的。因此可以将文件转为 <code>DataURL</code> 嵌入 <code>html/css/js</code> 文件中，这样可以有效减少 <code>HTTP</code> 建立连接时所带来额外的时间开销了。同时 <code>html/css/js</code> 文件也可以被浏览器缓存，<code>DataURL</code> 被引入后也能一同被缓存。</p><p>图片转 <code>DataURL</code> 也有缺点，那就是<strong>编码后文本储存所占的空间比图片会更大</strong>。这其实就是传输体积与 HTTP 连接数的权衡。所以最佳做法是将小图片转为 <code>DataURL</code>，转换后并不会有过多体积溢出，而大尺寸图片照常引入即可。</p><p>安装 <code>url-loader</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader -D</span><br></pre></td></tr></table></figure><p>修改 <code>webpack.config.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 匹配文件规则</span></span><br><span class="line">    test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">    <span class="comment">// use 从右至左进行应用</span></span><br><span class="line">    use: [</span><br><span class="line">      &#123;</span><br><span class="line">        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">        options: &#123; <span class="attr">publicPath</span>: <span class="string">'../'</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'css-loader'</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpe?g|gif|webp)(\?.*)?$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        name: <span class="string">'img/[name].[hash:8].[ext]'</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(svg)(\?.*)?$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">'file-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        name: <span class="string">'img/[name].[hash:8].[ext]'</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>在上例中将 <code>png</code>、<code>jpg</code>、<code>jpeg</code>、<code>gif</code>、<code>webp</code> 文件交给 <code>url-loader</code> 处理，而 <code>svg</code> 仍由 <code>file-loader</code> 处理。这样做的理由是: <code>DataURL</code> 内联 svg 会破坏 <code>sprite 系统</code> (将多个 svg 合为一张使用的技术) 中使用的<a href="https://css-tricks.com/svg-fragment-identifiers-work/" target="_blank" rel="noopener">Fragment Identifiers</a>，因此不将 svg 转为 <code>DataURL</code>。</p><p>给 <code>url-loader</code> 设定匹配规则后，配置 <code>name</code> 和 <code>limit</code> 选项。<code>url-loader</code> 的 <code>name</code> 选项与 <code>file-loader</code> 的 <code>name</code> 作用是相同的，就不再累述。</p><p><code>limit</code> 是指定以<strong>字节(byte)</strong> 为单位的文件最大尺寸。当文件尺寸<strong>小于等于</strong> <code>limit</code> 所设的值，那文件将会被转为 <code>DataURL</code>。相反，若文件尺寸<strong>大于</strong> <code>limit</code> 时，则使用备用 <code>loader</code>。默认备用 <code>loader</code> 是 <code>file-loader</code>。可以设定 <code>fallback</code> 选项来修改备用 <code>loader</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  loader: <span class="string">'url-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    limit: <span class="number">10000</span>,</span><br><span class="line">    name: <span class="string">'img/[name].[hash:8].[ext]'</span></span><br><span class="line">    fallback: <span class="string">'file-loader'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>limit</code> 的选值不易过大，可以设为 <code>10240</code> (10KB)或 <code>10000</code>，也可以根据项目实际情况进行调整。</p><p>现在来测试 <code>limit</code> 的效果。unix 系统可以在终端使用 <code>ls -l</code> 命令来查看文件信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  getting-started-loader-images git:(master) ✗ cd ./src/images</span><br><span class="line">➜  images git:(master) ✗ ls -l          </span><br><span class="line">total 6144</span><br><span class="line">-rwxr-xr-x  1 anran  staff  173596 May 28 17:41 01.jpg</span><br><span class="line">-rwxr-xr-x  1 anran  staff  761560 May 28 17:41 02.png</span><br><span class="line">-rwxr-xr-x  1 anran  staff  542065 May 28 17:41 03.jpg</span><br><span class="line">-rwxr-xr-x  1 anran  staff  376562 May 28 17:41 04.png</span><br><span class="line">-rwxr-xr-x  1 anran  staff  510812 May 28 17:41 05.png</span><br><span class="line">-rw-r--r--  1 anran  staff  760117 May 28 17:41 06.jpg</span><br><span class="line">-rw-r--r--@ 1 anran  staff    6943 May 30 13:54 webpack.jpg</span><br><span class="line">-rw-------  1 anran  staff     647 May 28 21:33 webpack.svg</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到 <code>webpack.svg</code> (647B) 和 <code>webpack.jpg</code> (6943B) 的文件尺寸都低于设定的 <code>limit: 10000</code>。由于 <code>svg</code> 文件不通过 <code>url-loader</code> 处理，那按照预想它将会被输出到 <code>/dist/img</code> 中。<code>webpack.jpg</code> 可以被 <code>url-loader</code>，那编译后应该被嵌入到 <code>js</code> 代码中。</p><p>重新编译测试一下:</p><details><summary>编译结果</summary><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">➜  getting-started-loader-images git:(master) ✗ npm run build</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getting-started-loader@1.0.0 build /Users/anran/project_my/webpack-example/getting-started-loader-images</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js</span></span><br><span class="line"></span><br><span class="line">Hash: 8d2e8c8220e86d46e388</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 692ms</span><br><span class="line">Built at: 05/30/2020 2:08:46 PM</span><br><span class="line">                   Asset       Size  Chunks                    Chunk Names</span><br><span class="line">           css/index.css   1.63 KiB       0  [emitted]         main</span><br><span class="line">     img/01.a8e7ddb2.jpg    170 KiB          [emitted]         </span><br><span class="line">     img/02.46713ed3.png    744 KiB          [emitted]  [big]  </span><br><span class="line">     img/03.70b4bb75.jpg    529 KiB          [emitted]  [big]  </span><br><span class="line">     img/04.b7d3aa38.png    368 KiB          [emitted]  [big]  </span><br><span class="line">     img/05.875a8bc2.png    499 KiB          [emitted]  [big]  </span><br><span class="line">     img/06.5b8e9d1e.jpg    742 KiB          [emitted]  [big]  </span><br><span class="line">img/webpack.258a5471.svg  647 bytes          [emitted]         </span><br><span class="line">              index.html  990 bytes          [emitted]         </span><br><span class="line">            js/bundle.js   10.5 KiB       0  [emitted]         main</span><br><span class="line">Entrypoint main = css/index.css js/bundle.js</span><br><span class="line">[0] ./src/css/style.css 39 bytes &#123;0&#125; [built]</span><br><span class="line">[1] ./src/js/index.js + 4 modules 10.1 KiB &#123;0&#125; [built]</span><br><span class="line">    | ./src/js/index.js 881 bytes [built]</span><br><span class="line">    | ./src/js/log.js 60 bytes [built]</span><br><span class="line">    | ./src/images/06.jpg 63 bytes [built]</span><br><span class="line">    | ./src/images/webpack.jpg 9.08 KiB [built]</span><br><span class="line">    | ./src/images/webpack.svg 68 bytes [built]</span><br><span class="line">    + 1 hidden module</span><br><span class="line"></span><br><span class="line">WARNING in configuration</span><br><span class="line">The 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.</span><br><span class="line">You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br><span class="line"></span><br><span class="line">WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).</span><br><span class="line">This can impact web performance.</span><br><span class="line">Assets: </span><br><span class="line">  img/04.b7d3aa38.png (368 KiB)</span><br><span class="line">  img/03.70b4bb75.jpg (529 KiB)</span><br><span class="line">  img/05.875a8bc2.png (499 KiB)</span><br><span class="line">  img/02.46713ed3.png (744 KiB)</span><br><span class="line">  img/06.5b8e9d1e.jpg (742 KiB)</span><br><span class="line"></span><br><span class="line">WARNING in webpack performance recommendations: </span><br><span class="line">You can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.</span><br><span class="line">For more info visit https://webpack.js.org/guides/code-splitting/</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">    [0] ./node_modules/html-webpack-plugin/lib/loader.js!./src/index.html 1.37 KiB &#123;0&#125; [built]</span><br><span class="line">Child mini-css-extract-plugin node_modules/css-loader/dist/cjs.js!src/css/style.css:</span><br><span class="line">    Entrypoint mini-css-extract-plugin = *</span><br><span class="line">    [0] ./node_modules/css-loader/dist/cjs.js!./src/css/style.css 2.98 KiB &#123;0&#125; [built]</span><br><span class="line">    [3] ./src/images/01.jpg 63 bytes &#123;0&#125; [built]</span><br><span class="line">    [4] ./src/images/02.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">    [5] ./src/images/03.jpg 63 bytes &#123;0&#125; [built]</span><br><span class="line">    [6] ./src/images/04.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">    [7] ./src/images/05.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">        + 2 hidden modules</span><br></pre></td></tr></table></figure></details><details><summary>编译后的目录</summary><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   .</span><br><span class="line">├── dist</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── index.css</span><br><span class="line">│   ├── img</span><br><span class="line">│   │   ├── 01.a8e7ddb2.jpg</span><br><span class="line">│   │   ├── 02.46713ed3.png</span><br><span class="line">│   │   ├── 03.70b4bb75.jpg</span><br><span class="line">│   │   ├── 04.b7d3aa38.png</span><br><span class="line">│   │   ├── 05.875a8bc2.png</span><br><span class="line">│   │   ├── 06.5b8e9d1e.jpg</span><br><span class="line">│   │   └── webpack.258a5471.svg</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       └── bundle.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── style.css</span><br><span class="line">│   ├── images</span><br><span class="line">│   │   ├── 01.jpg</span><br><span class="line">│   │   ├── 02.png</span><br><span class="line">│   │   ├── 03.jpg</span><br><span class="line">│   │   ├── 04.png</span><br><span class="line">│   │   ├── 05.png</span><br><span class="line">│   │   ├── 06.jpg</span><br><span class="line">│   │   ├── webpack.jpg</span><br><span class="line">│   │   └── webpack.svg</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── log.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure></details><p>重新打开 <code>/dist/index.html</code> 后可以在浏览器控制台看到如下输出的信息:</p><img data-src="/blog/2020/05/04/webpack-example/url-loader-js.jpeg"><h2 id="HTML-资源引入"><a href="#HTML-资源引入" class="headerlink" title="HTML 资源引入"></a>HTML 资源引入</h2><p>在 <code>HTML</code> 中有一种常见的情况是：在模板中通过相对路径引入图片、脚本等资源时，发现引入的资源都没有被打包进去。</p><p>为什么会发生这种情况呢？原来是 webpack 默认不会处理 <code>html</code> 中的资源引入。为了能使 <code>HTML</code> 能通过相对路径引入资源，主要有 3 种解决的方案：</p><h3 id="lodash-template"><a href="#lodash-template" class="headerlink" title="lodash template"></a>lodash template</h3><p>现在项目中 <code>/src/index.html</code> 是作为 <code>html-webpack-plugin</code> 的模板，在模板中可以使用 <a href="https://lodash.com/docs/4.17.15#template" target="_blank" rel="noopener">lodash template</a> 语法(以下简称模板语法)来插入内容。语法格式为: <code>&lt;%= value %&gt;</code></p><p>比如在 <code>src/index.html</code> 的模板中插入图片:</p><figure class="highlight html"><figcaption><span>/src/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panels"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他代码略... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"&lt;%= require('./images/06.jpg').default %&gt;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>/src/css/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 为了使页面美观，再添加一些样式 */</span></span><br><span class="line"><span class="selector-class">.panel6</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#061927</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel6</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel6</span> <span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.4s</span> <span class="number">0.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel6</span><span class="selector-class">.open</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel6</span><span class="selector-class">.open</span> <span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例将通过 <code>require()</code> 函数引入图片。webpack 引入图片时默认是通过 <code>ESModule</code> 来引入的，因此解析的结果大致为 <code>{default: module}</code> 这种形式。因此后面还需要再加一个 <code>default</code>。这样就能正确的引入资源啦。</p><h3 id="静态目录"><a href="#静态目录" class="headerlink" title="静态目录"></a>静态目录</h3><p><strong>第二种</strong>就是新增一个静态目录 <code>static</code>(或者叫 <code>public</code>)。</p><p><code>HTML</code> 默认不是引用不了源码目录上的资源吗？那我就直接将资源输出到 <code>dist</code> 目录上。模板引用资源时直接引入输出后的文件不就行啦？</p><p><strong><a href="https://github.com/webpack-contrib/copy-webpack-plugin" target="_blank" rel="noopener">copy-webpack-plugin</a></strong> 可以完成这种迁移的功能。它将从 <code>form</code> 处复制文件/文件夹，复制到 <code>to</code> (默认是 webpack 的输出目录)中。现在来安装它:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D copy-webpack-plugin</span><br></pre></td></tr></table></figure><p>新增 <code>static</code> 目录，并添加一些测试文件:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  .</span><br><span class="line">  ├── package.json</span><br><span class="line">  ├── src</span><br><span class="line">  │   ├── css</span><br><span class="line">  │   │   └── style.css</span><br><span class="line">  │   ├── images</span><br><span class="line">  │   │   ├── 01.jpg</span><br><span class="line">  │   │   ├── 02.png</span><br><span class="line">  │   │   ├── 03.jpg</span><br><span class="line">  │   │   ├── 04.png</span><br><span class="line">  │   │   ├── 05.png</span><br><span class="line">  │   │   ├── 06.jpg</span><br><span class="line">  │   │   ├── webpack.jpg</span><br><span class="line">  │   │   └── webpack.svg</span><br><span class="line">  │   ├── index.html</span><br><span class="line">  │   ├── js</span><br><span class="line">  │   │   ├── index.js</span><br><span class="line">  │   │   └── log.js</span><br><span class="line"><span class="addition">+ │   └── static</span></span><br><span class="line"><span class="addition">+ │       └── images</span></span><br><span class="line"><span class="addition">+ │           ├── 06.jpg</span></span><br><span class="line"><span class="addition">+ │           ├── webpack.jpg</span></span><br><span class="line"><span class="addition">+ │           └── webpack.svg</span></span><br><span class="line">  └── webpack.config.js</span><br></pre></td></tr></table></figure><p>现在将 <code>src/static/images</code> 的所有文件(不管代码里有没有引入这些文件)都复制到 <code>dist/img</code> 中。</p><figure class="highlight js"><figcaption><span>/webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'src/static/images'</span>),</span><br><span class="line">          to: path.resolve(__dirname, <span class="string">'dist/img'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不仅想要复制图片还想要复制其他诸如 css 样式表、js 脚本甚至是 excel 文件到输出目录的话。那可以考虑将 <code>static</code> 目录与 dist 目录进行合并，将 <code>static</code> 和 <code>dist</code> 下的目录名保持一致。</p><p>比如将 <code>static</code> 的下 <code>images</code> 文件夹更名为图片输出目录 <code>img</code>，这样打包后会输出到同一个目录中:</p><figure class="highlight js"><figcaption><span>/webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        <span class="comment">// 如果只传 string 的话，那这个 string 相当于 from</span></span><br><span class="line">        <span class="comment">// path.resolve(__dirname, 'src', 'static'),</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// to 默认是 `compiler.options.output`, 也就是 dist 目录</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//   from: path.resolve(__dirname, 'src/static'),</span></span><br><span class="line">        <span class="comment">//   to: ''</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前配置中与上面两例等价</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'src/static'</span>),</span><br><span class="line">          to: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若指定文件/文件夹不想复制到 <code>dist</code> 中，还可以使用 <code>globOptions.ignore</code> 来忽略：</p><figure class="highlight js"><figcaption><span>/webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'src/static'</span>),</span><br><span class="line">          to: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">          globOptions: &#123;</span><br><span class="line">            ignore: [<span class="string">'/**/webpack.jpg'</span>, <span class="string">'/**/img/webpack.svg'</span>],</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新修改模板中的图片的引入的路径，使其指向输出目录的 <code>img</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel6"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"./img/06.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item index"</span>&gt;</span>VI<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译后就能看到图片正确被引用了。</p><h3 id="html-loader"><a href="#html-loader" class="headerlink" title="html-loader"></a>html-loader</h3><p><strong>最后一种</strong>是安装 <code>html-loader</code>，让 webapck 可以处理 <code>html</code> 资源的引入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D html-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.html$/i</span>,</span><br><span class="line">    loader: <span class="string">'html-loader'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 省略其他 rule...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置 <code>html-loader</code> 后，<code>HTML</code> 访问相对路径的资源就由 <code>html-loader</code> 来进行引入。将模板中的路径改为<strong>源码相对路径</strong>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel6"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"./images/06.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item index"</span>&gt;</span>VI<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际编译时，<code>&lt;img class=&quot;img&quot; src=&quot;./images/06.jpg&quot; alt=&quot;&quot;&gt;</code> 中 <code>src</code> 的值会被转为 <code>require(&#39;./images/06.jpg&#39;)</code>，通过 webpack 引入后再将编译后的结果传入图片的 <code>src</code> 属性中。</p><p>此时重新编译后就可以正确引入了。但<strong>配置 <code>html-loader</code> 的方法会与方法二访问静态目录资源有点冲突</strong>。配置 <code>html-loader</code> 后就不能通过 <code>./</code>、<code>../</code> 这种相对路径来访问资输出目录的资源了。</p><p>如果我们配置了 <code>html-loader</code> 的同时又还想访问静态资源怎么办呢？这时可以通过根路径 <code>/</code> 逐层来访问，这样 <code>html-loader</code> 就不会处理这种路径:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel6"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"/img/06.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item index"</span>&gt;</span>VI<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在问题又来了，若我们通过根路径来访问资源的话，那就不能单纯地打开文件来在浏览器查看效果了。因为直接打开文件到浏览器上，是通过 <code>file://</code> 协议打开的。浏览器实际上访问的路径是文件的绝对地址。</p><p>比如笔者打开文件后，浏览器地址栏展示的 url 是: <code>file:///Users/anran/project_my/webpack-example/getting-started-static-assets/dist/index.html</code>。现在通过根路径访问资源，需要浏览器补全为完整的 URL，经过浏览器补全后绝对路径是 <code>file:///img/06.jpg</code>。这样路径都是错误的自然就访问不到想要的资源啦。</p><p>如果有写过 <code>SPA(单页面应用)</code> 项目的朋友应该很熟悉。将 <code>SPA</code> 项目打包后直接访问 <code>index.html</code> 页面是空白的，这种情况多半就是从根路径引入资源失败而引起的。</p><p>这个问题解决的办法也很简单，就是将编译后的项目部署到服务器上，直接通过服务器进行访问，问题就迎刃而解了。为什么这样就可以解决了呢？</p><p>比如笔者的网站域名是 <code>anran758.github.io</code>，现在将页面部署到服务器后，直接在浏览器访问 <code>https://anran758.github.io/</code>，实际上访问的是 <code>/dist/index.html</code> 文件。<code>html</code> 通过相对路径访问<code>/img/06.jpg</code>，那补全后图片的路径就是 <code>https://anran758.github.io/img/06.jpg</code>。这样自然就能访问资源啦。</p><p>我们不妨通过 <code>Node.js</code> 起一个本地服务器测试一下。在 <code>/dist</code> 同级目录上新建一个 <code>server.js</code> 脚本，添加如下代码:</p><figure class="highlight js"><figcaption><span>/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">8001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置静态资源入口</span></span><br><span class="line">app.use(express.static(config.output.path));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(PORT, (err) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Listening at http://localhost:'</span> + PORT + <span class="string">'\n'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上例脚本代码是通过 <a href="https://expressjs.com/" target="_blank" rel="noopener">express</a> 快速搭建一个本地服务器，将服务器静态资源入口设为 <code>webpack.config.js</code> 的输出目录(也就是 <code>/dist</code>)，随后启动服务器。</p><p><code>express</code> 是基于 <code>Node.js</code> 的 web 框架，要使用它之前需要安装依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D express</span><br></pre></td></tr></table></figure><p><code>package.json</code> 中添加个快捷入口，并在终端运行该脚本:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="comment">// 其他脚本..</span></span><br><span class="line">    <span class="attr">"test:prod"</span>: <span class="string">"node server.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  getting-started-static-assets git:(master) ✗ npm run test:prod </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getting-started-loader@1.0.0 <span class="built_in">test</span>:prod /Users/anran/project_my/webpack-example/getting-started-static-assets</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node server.js</span></span><br><span class="line"></span><br><span class="line">Server is running at http://localhost:8001 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>打开 <a href="http://localhost:8001" target="_blank" rel="noopener">http://localhost:8001</a> 后就能看到图片资源正确被引用了。</p><img data-src="/blog/2020/05/04/webpack-example/file-loader-2.jpeg"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好啦，现在 webpack 基础篇也到了尾声。我们对上述知识做一个简单的小结:</p><p>webpack 是一个静态模块打包工具，它本体虽然只支持处理 javascript 的模块，但可以通过 loader 让 webpack 完成原本它不能处理的功能。</p><p>webpack 的提供插件的功能，插件可以针对某种需求做特定处理，比如自动给 <code>html</code> 插入资源。</p><p>除了静态目录的文件外，我们发现 webpack 输出的文件都是有依赖关系的。为什么会这么说呢？仔细看看 webpack 处理的逻辑就能想清楚了:</p><p>webpack 从程序的入口 <code>/src/js/index.js</code> 开始处理，入口文件引入了 <code>style.css</code>，而 <code>style.css</code> 内又引用了图片资源。然后 <code>HTML</code> 再通过 webpack 插件引入模板，再将这些资源插入模板中。这就是文件的依赖关系，这些依赖关系最终会生成一个<strong>依赖图(Dependency Graph)</strong>。</p><p>想必看到这里的各位对 webpack 都有了个比较清晰的概念了吧？当然这只是一个开始，后面还有一些高级的概念在本文中由于篇幅的限制无法一并理清。若对笔者 webpack 的笔记感兴趣的话可以继续关注此系列的更新，下一篇将围绕开发环境进行梳理。</p><p><strong>参考资料:</strong></p><ul><li><a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack document</a></li><li><a href="https://github.com/facebook/create-react-app/pull/1180" target="_blank" rel="noopener">Use file-loader for svgs #1180</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2020/05/04/webpack-example/banner.png&quot;&gt;&lt;p&gt;webpack 是一个现代 JavaScript 应用程序的静态模块打包工具，它对于前端工程师来说可谓是如雷贯耳，基本上现在的大型应用都是通过 webpack 进行构建的。&lt;/p&gt;&lt;p&gt;webpack 具有高度可配置性，它拥有非常丰富的配置。在过去一段时间内曾有人将熟练配置 webpack 的人称呼为 “webapck 工程师”。当然，这称呼只是个玩笑话，但也能从侧面了解到 webpack 配置的灵活与复杂。&lt;/p&gt;&lt;p&gt;为了能够熟练掌握 webpack 的使用，接下来通过几个例子循序渐进的学习如何使用 webpack。&lt;/p&gt;&lt;p&gt;以下 &lt;code&gt;Demo&lt;/code&gt; 都可以在 Github 的 &lt;a href=&quot;https://github.com/anran758/webpack-example&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webpack-example&lt;/a&gt; 中找到对应的示例，欢迎 star~&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://anran758.github.io/blog/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://anran758.github.io/blog/tags/webpack/"/>
    
      <category term="脚手架" scheme="https://anran758.github.io/blog/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
      <category term="环境搭建" scheme="https://anran758.github.io/blog/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Javascript" scheme="https://anran758.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Flexbox 布局实际用例</title>
    <link href="https://anran758.github.io/blog/2020/02/22/flexbox-use-cases/"/>
    <id>https://anran758.github.io/blog/2020/02/22/flexbox-use-cases/</id>
    <published>2020-02-22T08:28:44.000Z</published>
    <updated>2020-05-07T05:26:43.101Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章介绍了 flexbox 的属性与示例，本文再通过几个 flex 布局的案例来体会 flex 布局的特性带来的便利和问题~</p><img data-src="/blog/2020/02/22/flexbox-use-cases/banner.png"><a id="more"></a><h2 id="格式化上下文"><a href="#格式化上下文" class="headerlink" title="格式化上下文"></a>格式化上下文</h2><p>当我们给父容器设置 flex 属性后，flex 容器会在容器内创建一个新的 <strong>flex 格式化上下文(formatting context)</strong>。在这上下文中 <code>float</code>、 <code>clear</code> 将失去作用，<code>vertical-align</code> 对于 flex 元素也不再会起作用。</p><p>在实际开发中，当我们使用行内元素(<code>inline</code>、<code>inline-block</code>) 时，有时候可能会看到元素之间会有一个奇怪的间隙，并且设置的字体越大间隙就越大。原来这个间隙是我们在编写源代码时标签换行导致，不换行就不会出现这种情况。</p><p>多数情况下，我们在编写代码时会习惯用编辑器对代码进行格式化，格式化后会使这些标签换行从而导致间隙。这在要求像素级还原的项目中就有点尴尬了。</p><p>以前常见的做法是在父元素设置 <code>font-size: 0</code> 消除间隙，再设置子元素的字体大小。这样做确实有点麻烦，因此在 flex 上下文中，这些间隙默认就会被清除。</p><iframe height="328" style="width:100%" scrolling="no" title="flex vs inline gap" src="https://codepen.io/anran758/embed/GRJNQNb?height=328&theme-id=32168&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/GRJNQNb" target="_blank" rel="noopener">flex vs inline gap</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>通常我们使用 <code>flex</code> 布局更多的是用于整体的布局设计，如:</p><iframe height="382" style="width:100%" scrolling="no" title="[flex] 圣杯布局" src="https://codepen.io/anran758/embed/NWqbYvX?height=382&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/NWqbYvX" target="_blank" rel="noopener">[flex] 圣杯布局</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>在互联网早期，由于用户网路的限制，经常会出现 <code>html</code> 的内容显示出来但页面样式还没加载出来的情况，这会导致用户没能最先看到想看的东西。因此 <a href="https://alistapart.com/author/matthewlevine/" target="_blank" rel="noopener">Matthew Levine</a> 在 2006 年提出了圣杯布局的概念，在 <code>HTML</code> 源代码中将用户想看的内容挪到次要内容的前面。</p><p>上例 demo 就是使用 flex 布局实现的圣杯布局，虽然在 <code>HTML</code> 源码里 <code>Main</code> 处于其他两块内容之上，但通过 <code>order</code> 属性可以调整元素间的顺序。</p><p>除此之外，还可以通过媒体查询(<code>@media</code>)做响应式页面，当屏幕宽度小于 <code>640px</code> 后仅需修改几项 flex 属性就可以改变布局排列的方式，十分灵活。</p><p>如果你使用过 <code>react/vue</code> 主流 UI 库的话，你就会发现他们使用布局容器也是 <code>flex</code> 布局实现的，比如 <a href="https://element.eleme.cn/#/zh-CN/component/container" target="_blank" rel="noopener">Element UI</a>、<a href="https://next.ant.design/components/layout-cn/" target="_blank" rel="noopener">Ant Design</a> 等。</p><h2 id="栅格布局"><a href="#栅格布局" class="headerlink" title="栅格布局"></a>栅格布局</h2><p>栅格布局也可以通过 flex 来实现：在以下的 demo 中，<code>HTML</code> 源码内的各元素都是平级，通过调整 flex 属性实现了跨行或跨列的效果。</p><iframe height="501" style="width:100%" scrolling="no" title="[flex] 栅格布局" src="https://codepen.io/anran758/embed/ZEGpdXP?height=501&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/ZEGpdXP" target="_blank" rel="noopener">[flex] 栅格布局</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="justify-content-尾列不整齐"><a href="#justify-content-尾列不整齐" class="headerlink" title="justify-content 尾列不整齐"></a>justify-content 尾列不整齐</h2><blockquote><p><a href="https://www.zhangxinxu.com/wordpress/2019/08/css-flex-last-align/" target="_blank" rel="noopener">让CSS flex布局最后一行列表左对齐的N种方法</a> –By 张鑫旭</p></blockquote><p>多数情况下使用 <code>justify-content</code> 是要求子元素们散开，但尾列元素不够的时候，散开就显得很奇怪了，为此我们可以做如下处理:</p><iframe height="640" style="width:100%" scrolling="no" title="[flex] 解决 justify-content 尾部不整齐的问题" src="https://codepen.io/anran758/embed/VwLmJJm?height=640&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/VwLmJJm" target="_blank" rel="noopener">[flex] 解决 justify-content 尾部不整齐的问题</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>在 MDN <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties" target="_blank" rel="noopener">Animatable CSS properties</a> 上列出了可以使用 <code>Animations</code> 或 <code>Transitions</code> 进行动画处理的属性，其中就有 <code>flex</code> 属性。因此还可以结合动画进行布局设计:</p><iframe height="510" style="width:100%" scrolling="no" title="[flex] flex 与动画" src="https://codepen.io/anran758/embed/QWbdgPx?height=510&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/QWbdgPx" target="_blank" rel="noopener">[flex] flex 与动画</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>通过以上几个案例是不是对 flex 布局的灵活有了更深的感受呢？以上 demo 大多借鉴已有的思路，如果你有什么好的想法，也可以自己动手尝试一番或分享出来~</p><p><strong>参考资料:</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="noopener">MDN | 使用 CSS 弹性盒子</a></li><li><a href="https://www.zhihu.com/question/28542816" target="_blank" rel="noopener">一丝 | 以下 CSS 栅格布局除了用 table 以外，有什么其他的方法吗？</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2019/08/css-flex-last-align/" target="_blank" rel="noopener">张鑫旭 | 让 CSS flex布局最后一行列表左对齐的N种方法</a></li></ul><p><strong>Pixiv 背景图例：</strong></p><ol><li><a href="https://www.pixiv.net/artworks/65843704" target="_blank" rel="noopener">ちょけ | アリスミクと白うさぎ</a></li><li><a href="https://www.pixiv.net/artworks/70487844" target="_blank" rel="noopener">Azit | Miku</a></li><li><a href="https://www.pixiv.net/artworks/65040104" target="_blank" rel="noopener">ぽむ | もっと高くまで！</a></li><li><a href="https://www.pixiv.net/artworks/64702860" target="_blank" rel="noopener">雨陌 | 8.31</a></li><li><a href="https://www.pixiv.net/artworks/67270728" target="_blank" rel="noopener">akino | つもりつもるキモチ。</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章介绍了 flexbox 的属性与示例，本文再通过几个 flex 布局的案例来体会 flex 布局的特性带来的便利和问题~&lt;/p&gt;&lt;img src=&quot;/blog/2020/02/22/flexbox-use-cases/banner.png&quot;&gt;
    
    </summary>
    
      <category term="layout" scheme="https://anran758.github.io/blog/categories/layout/"/>
    
    
      <category term="css" scheme="https://anran758.github.io/blog/tags/css/"/>
    
      <category term="layout" scheme="https://anran758.github.io/blog/tags/layout/"/>
    
      <category term="flexbox" scheme="https://anran758.github.io/blog/tags/flexbox/"/>
    
      <category term="transition" scheme="https://anran758.github.io/blog/tags/transition/"/>
    
  </entry>
  
  <entry>
    <title>Flexbox 布局入门</title>
    <link href="https://anran758.github.io/blog/2020/02/05/css-getting-started-with-flexbox/"/>
    <id>https://anran758.github.io/blog/2020/02/05/css-getting-started-with-flexbox/</id>
    <published>2020-02-05T13:36:54.000Z</published>
    <updated>2020-05-19T21:02:22.441Z</updated>
    
    <content type="html"><![CDATA[<p>互联网早期实现布局是需要通过多种不同属性组合才能实现我们想要的布局。</p><p>比如常见的垂直居中，刚接触 css 的朋友看到 <code>vertical-align: middle;</code> 这个属性可能就会认为它就是用于垂直居中的，但实际上并没有那么简单。如果想要通过该属性来实现垂直居中，还需要其他小伙伴配合。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e44b27</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该伪类是实现垂直居中关键 */</span></span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">white-space</span>: normal;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>我想居中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样看来，为了实现垂直居中布局，我们还得打一套组合拳才能出来才行，是不是看起来有点麻烦的样子？</p><p>W3C 在 2009 年提出的 <code>Fiexbox(flex)</code> 布局<a href="https://www.w3.org/TR/2009/WD-css3-flexbox-20090723/" target="_blank" rel="noopener">草案</a>，就是针对用户界面设计优化的 CSS 盒模型。如果使用 flex 布局来实现上面的垂直居中布局的话，可以简化为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e44b27</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 使用 flex 布局 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我想居中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后的代码就显得更精简了，也不需要其他小伙伴来搭把手。布局的事情就让 flex 家族自己来解决即可。</p><a id="more"></a><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>应用 flex 布局的容器我们通常称为 <strong>弹性盒子/容器(flex container)</strong>。弹性容器可以由 <code>display: flex</code> 或 <code>display: inline-flex</code> 生成。弹性盒子的子项常称为 <strong>弹性元素/项目(flex items)</strong>，它以 flex 布局模型进行布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex | inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要学习 flex 布局的工作方式，最先需要学习的是它自身的术语。下面直接引用 flex 草案中术语的介绍图:</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-terms.svg" title="术语介绍图(en)"><p>别被原版英文术语给吓倒了，咱们翻译一下其实就很好理解了：</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-terms-tra-cn.svg" title="翻译后的术语介绍"><p>在术语示意图中可以看到两根轴，分别是<strong>主轴(main axis)</strong>和<strong>垂直交叉轴(cross axis)</strong>。同时标注了<strong>主轴起点(main start)</strong>与<strong>终点(main end)</strong>，<strong>交叉轴的起点(cross start)</strong>与<strong>终点(cross end)</strong>。</p><p>默认情况下 flex 布局是按主轴的方向进行布局的。flex 元素所占据的 <strong>主轴空间(main size)</strong> 就是 flex 元素的宽度(width)、所占据的 <strong>交叉轴空间(cross size)</strong> 就是 flex 元素的高度(height)。</p><hr><h2 id="flex-容器属性"><a href="#flex-容器属性" class="headerlink" title="flex 容器属性"></a>flex 容器属性</h2><p>flex 容器里可以通过以下几种属性来控制容器的行为:</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-content</li><li>align-items</li></ul><p>为了更好的观察各属性的行为，笔者在 codepen 上给不同属性都写了 demo 做参考。</p><p>目前有个新规范(<a href="https://drafts.csswg.org/css-align-3/#propdef-justify-content" target="_blank" rel="noopener">CSS Box Alignment Module Level 3</a>)正处于工作草案的状态中，对一些属性添加新值，如 <code>[first|last]? baseline</code>、<code>self-start</code>、<code>self-end</code>、<code>start</code>、<code>end</code>、<code>left</code>、<code>right</code>、<code>unsafe | safe</code>。</p><p>这些新值多数浏览器都没实现，为了便于演示，此处仅讲解初始版本的值。<code>Firefox</code> 浏览器对新值实现的比较超前，也建议通过使用 <code>Firefox</code> 浏览器来查看 demo。</p><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p><code>flex-direction</code> 指示内部元素如何在 flex 容器中布局。可以简单的理解为 flex 容器的布局方向。其默认值为 <code>row</code>，可选语法如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 常用属性 */</span></span><br><span class="line">flex-direction: row | row-reverse | column | column-reverse;</span><br></pre></td></tr></table></figure><ul><li><code>row</code>: <strong>主轴起点和主轴终点与内容方向相同</strong>。简而言之就是内容从左到右进行布局。</li><li><code>row-reverse</code>: 与 <code>row</code> 行为相同，但主轴起点和主轴终点对调了位置。</li><li><code>column</code>: 主轴由水平方向转为垂直方向，布局从上往下排。</li><li><code>column-reverse</code>: 主轴由水平方向转为垂直方向，布局从上往下排。</li></ul><p><strong>值得注意的是，全局属性 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir" target="_blank" rel="noopener">dir</a> 的作用是指示元素的文本的方向性，该属性会受到 <code>row</code> 和 <code>row-reverse</code> 的影响。</strong></p><iframe height="486" style="width:100%" scrolling="no" title="[vue demo] flex-direction" src="https://codepen.io/anran758/embed/XWJLqjM?height=486&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/XWJLqjM" target="_blank" rel="noopener">[vue demo] flex-direction</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><code>flex-wrap</code> 指定 flex 元素单行显示还是多行显示 。如果可以换行，你甚至还可以通过该属性控制行的堆叠方向。它的取值如下所示:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-wrap: nowrap(默认值) | wrap | wrap-reverse;</span><br></pre></td></tr></table></figure><p>可以通过本例 demo 右上角的按钮来修改元素的数量，观察三个值之间的变化:</p><iframe height="357" style="width:100%" scrolling="no" title="[vue demo] flex-wrap" src="https://codepen.io/anran758/embed/OJPexQp?height=357&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/OJPexQp" target="_blank" rel="noopener">[vue demo] flex-wrap</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><ul><li><code>nowrap</code>: flex 容器宁愿压榨元素的空间也不肯换行。甚至压缩到一定地步后还会溢出容器。</li><li><code>wrap</code>: 若子项超过容器所容纳的宽度，则允许断行展示。</li><li><code>wrap-reverse</code>: 和 <code>wrap</code> 的行为一样，只是<strong>交叉轴起点与终点互换</strong>。</li></ul><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code> 属性是 <a href="#flex-direction">flex-direction</a> 和 <a href="#flex-wrap">flex-wrap</a> 的简写。这个没啥好说的，也就不额外写 demo 了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line">flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单独设置 flex-direction 的属性 */</span></span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">row</span>;</span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">column</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单独设置 flex-wrap 的属性 */</span></span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">wrap</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同时设置两种属性，建议按照语法顺序进行书写 */</span></span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">row</span> <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">column</span> <span class="selector-tag">wrap</span>;</span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code> 属性定义了容器主轴中各 flex 元素之间的对齐方式。这是 flex 布局中常用的属性之一。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">justify-content: normal |</span><br><span class="line">                 space-between | space-around | space-evenly |</span><br><span class="line">                 center | flex-start | flex-end</span><br></pre></td></tr></table></figure><p>在初始版本中，<code>justify-content</code> 的默认值为 <code>flex-start</code>。但在最新版本中的 chrome 浏览器被修改为了 <code>normal</code>。</p><p>为了对比属性之间的差异，本例 demo 将元素的两侧 <code>margin</code> 清空:</p><iframe height="400" style="width:100%" scrolling="no" title="[vue demo] justify-content" src="https://codepen.io/anran758/embed/mdyZZWM?height=400&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/mdyZZWM" target="_blank" rel="noopener">[vue demo] justify-content</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><ul><li><code>normal</code>: 排列效果等同 <code>flex-start</code>。</li><li><code>flex-start</code>: 默认情况是左对齐，从行首开始排列。每行第一个 flex 元素与行首对齐，同时所有后续的 flex 元素与前一个对齐。</li><li><code>flex-end</code>: 默认情况下是右对齐，从行尾开始排列。每行最后一个 flex 元素与行尾对齐，其他元素将与后一个对齐。</li><li><code>center</code>: 该值使元素居中对齐。</li></ul><ul><li><code>space-between</code>: 首尾两端对齐，内部元素之间的间距相等。</li><li><code>space-around</code>: 在每行上均匀分配弹性元素。相邻元素间距离相同，<strong>首尾两个元素的距离是相邻元素之间距离的一半</strong>。</li><li><code>space-evenly</code>: 主轴内各元素两侧均匀分配剩余空间。(注意此处与 <code>space-around</code> 的差异)</li></ul><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code> 属性除了可以在 flex 布局中有效，还可以在 <code>grid(网格)</code> 布局中应用。在 flex 布局中它的作用是<strong>决定交叉轴的对齐方式</strong>。这也是 flex</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 主流浏览器已经实现的值 */</span></span><br><span class="line">align-items: normal | flex-start | flex-end | center | baseline | stretch</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新草案添加的值 */</span></span><br><span class="line">align-items:  | start | end | [ first | last ]baseline | left | right</span><br></pre></td></tr></table></figure><iframe height="420" style="width:100%" scrolling="no" title="[vue demo] align-items" src="https://codepen.io/anran758/embed/qBEeNjb?height=420&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/qBEeNjb" target="_blank" rel="noopener">[vue demo] align-items</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><ul><li><code>normal</code>: 在 flex 布局中 <code>normal</code> 的表现效果如同 <code>stretch</code> 一样。</li><li><code>stretch</code>: 弹性元素被在交叉轴轴方向被拉伸到与容器相同的高度或宽度。若容器没有设置高度，则取当前行中最高元素的高度，如本例中<strong>元素 4</strong> 是第一行中最高的元素，那第一行中的高度都被拉伸到与最高元素相同的高度。第二行中<strong>最高的元素是元素 2</strong>，因此第二行高度都取至元素 2。</li></ul><ul><li><code>flex-start</code>: 元素向交叉轴起点对齐。</li><li><code>flex-end</code>: 元素向交叉轴终点对齐。</li><li><code>center</code>: 元素在交叉轴居中。</li></ul><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/align-items-baseline.png"><ul><li><code>baseline</code>: 所有元素向基线对齐。侧轴起点到元素基线距离最大的元素将会于侧轴起点对齐以确定基线。<strong>在例子中放大元素 6 的 <code>font-size</code>, 与 <code>center</code> 进行对比就能看到差异了。</strong></li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>justify-content</code> 是作用于主轴上，而 <code>align-content</code> 则是用于定义交叉轴的对齐方式。值得注意的是，若 <strong>flex 容器内只有一根轴线，该属性将不起作用</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 主流浏览器已经实现的值 */</span></span><br><span class="line">align-content: normal | space-between | space-around | space-evenly | stretch |  center | flex-start | flex-end</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主流浏览器多数未实现的值 */</span></span><br><span class="line"><span class="selector-tag">align-content</span>: <span class="selector-attr">[first|last]</span>? <span class="selector-tag">baseline</span>, <span class="selector-tag">start</span>, <span class="selector-tag">end</span>, <span class="selector-tag">left</span>, <span class="selector-tag">right</span></span><br></pre></td></tr></table></figure><p>父容器设置了 flex 布局后，若子元素没有设定 <code>height</code> 属性的话，默认会将容器内的子元素进行拉伸。</p><p>为了便于观察两者的差异，笔者在 demo 中新增一列进行对比。左列的 flex 元素使用 <code>height</code> 属性，右列使用 <code>min-height</code> 属性。同时将 flex 容器高度设置为 <code>400px</code>:</p><iframe height="657" style="width:100%" scrolling="no" title="[vue demo] align-content" src="https://codepen.io/anran758/embed/OJPKWyj?height=657&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/OJPKWyj" target="_blank" rel="noopener">[vue demo] align-content</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><ul><li><code>normal</code>: 像未设置值，元素处于默认位置。</li><li><code>stretch</code>: 拉伸所有行来填满剩余空间。剩余空间平均的分配给每一行(若某元素设置了高度，那么该值对这个元素将不会起作用)。</li><li><code>flex-start</code>: 交叉轴起点对齐。</li><li><code>flex-end</code>: 交叉轴终点对齐。</li><li><code>center</code>: 交叉轴居中对齐。</li><li><code>space-between</code>: 交叉轴两端对齐，行之间间距相等</li><li><code>space-around</code>: 交叉轴均匀对齐，行两端间距相等</li><li><code>space-evenly</code>: 交叉轴内各元素两侧均匀分配剩余空间。</li></ul><hr><h2 id="Flex-Item"><a href="#Flex-Item" class="headerlink" title="Flex Item"></a>Flex Item</h2><p>Flex Container(弹性容器)的一级子元素就是 Flex item(弹性元素)。以下主要应用于 Flex item 的属性。</p><ul><li>flex-basis</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li><li>order</li></ul><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code> 属性用于定义元素所占有的比例，它接受一个正整数，默认值为 <code>0</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-grow</span>: &lt;<span class="selector-tag">number</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子: 仅接受正数的值 */</span></span><br><span class="line"><span class="selector-tag">flex-grow</span>: 1;</span><br></pre></td></tr></table></figure><iframe height="340" style="width:100%" scrolling="no" title="[vue] flex-grow" src="https://codepen.io/anran758/embed/LYEwdRV?height=340&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/LYEwdRV" target="_blank" rel="noopener">[vue] flex-grow</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>与 <code>flex-grow</code> 相反，<code>flex-shrink</code> 属性处理元素收缩的问题，默认为 <code>1</code>，意味着元素默认会随着容器缩小而等比例缩小。当值为 <code>0</code> 时则不缩放。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-shrink</span>: &lt;<span class="selector-tag">number</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子: 默认缩放 */</span></span><br><span class="line"><span class="selector-tag">flex-shrink</span>: 1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子: 使元素不缩放 */</span></span><br><span class="line"><span class="selector-tag">flex-shrink</span>: 0;</span><br></pre></td></tr></table></figure><p>在以下 demo 中，各 flex 项目的宽高相等。当父容器有足够的空间时，元素不需要紧衣缩食，因此 <code>flex-shrink</code> 也没有机会表现出它的作用。</p><iframe height="275" style="width:100%" scrolling="no" title="[vue] flex-shrink" src="https://codepen.io/anran758/embed/eYmqKpG?height=275&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/eYmqKpG" target="_blank" rel="noopener">[vue] flex-shrink</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>将 flex 容器尺寸调小后可以发现，<code>flex-shrink</code> 的值越大，元素被压榨的空间越多。</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-shrink-3.png"><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code> 指定了 flex 元素在主轴空间(main size)所占的初始大小。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-basis:  &lt;'width'&gt;</span><br></pre></td></tr></table></figure><p>当一个元素同时被设置了 <code>flex-basis</code> (值为 <code>auto</code> 除外)和 <code>width</code> 属性时，<code>flex-basis</code> 具有更高的优先级。</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-basis.png"><p><code>W3C</code> 鼓励使用 <code>flex</code> 简写属性(下一小节进行秒速)来控制灵活性，而不是直接使用 <code>flex-basis</code> 属性。因为简写属性 <code>flex</code> 可以正确地重置任何未指定的属性以适应常见的用途。</p><iframe height="366" style="width:100%" scrolling="no" title="[vue] flex-basis" src="https://codepen.io/anran758/embed/yLymboP?height=366&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/yLymboP" target="_blank" rel="noopener">[vue] flex-basis</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code> 属性是 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code> 的简写，规定了弹性元素如何伸缩以适应 flex 容器中的可用空间，默认值为 <code>0 1 auto</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]</span><br></pre></td></tr></table></figure><p><code>flex</code> 属性可以指定 1 个，2 个或 3 个值。</p><p><strong>单值语法</strong>: 值必须为以下其中之一:</p><ul><li>一个无单位数(<code>&lt;number&gt;</code>): 它会被当作 <code>&lt;flex-grow&gt;</code> 的值。</li><li>一个有效的宽度(width)值: 它会被当作 <code>&lt;flex-basis&gt;</code>的值。</li><li>关键字 <code>none</code>、<code>auto</code>、<code>initial</code>。</li></ul><p><strong>双值语法</strong>: 第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。第二个值必须为以下之一：</p><ul><li>一个无单位数：它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li><li>一个有效的宽度值: 它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li></ul><p><strong>三值语法:</strong></p><ul><li>第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。</li><li>第二个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li><li>第三个值必须为一个有效的宽度值， 并且它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li></ul><p>这个属性没啥好演示的，其实就是之前介绍的三个属性的组合:</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-flex.png"><iframe height="345" style="width:100%" scrolling="no" title="[vue] flex" src="https://codepen.io/anran758/embed/dyPxaXw?height=345&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/dyPxaXw" target="_blank" rel="noopener">[vue] flex</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><code>align-self</code> 属性在 flex 布局中作用于单个 flex 元素上，它将控制指定元素在交叉轴上的位置。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">align-self: auto | normal | stretch | center | flex-start | flex-end;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多数浏览器未实现的功能 */</span></span><br><span class="line">align-self: start | end | self-start | self-end | [first | last]? baseline;</span><br></pre></td></tr></table></figure><ul><li><code>auto</code>: 设置为父元素的 align-items 值，如果该元素没有父元素的话，就设置为 <code>stretch</code>。</li><li><code>normal</code>: 在 flex 布局中，相当于 <code>stretch</code> 的效果。</li><li><code>stretch</code>: flex 元素将会基于容器的宽和高，按照自身 margin box 的 cross-size 拉伸。</li><li><code>center</code>: 使项目在交叉轴中居中。</li><li><code>flex-start</code>: flex 元素会对齐到 cross-axis 的首端。</li><li><code>flex-end</code>: flex 元素会对齐到 cross-axis 的尾端。</li></ul><iframe height="762" style="width:100%" scrolling="no" title="[vue] align-self" src="https://codepen.io/anran758/embed/mdJbyKz?height=762&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/mdJbyKz" target="_blank" rel="noopener">[vue] align-self</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><code>order</code> 属性用于设置指定 flex 元素在容器中的顺序。容器中的 flex 元素按升序值排序，若值相同则按其源代码出现的顺序进行排序，默认值为 <code>0</code>。它接受一个整数值(integer)，如 <code>-2</code>、<code>0</code>、<code>3</code> 等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">order</span>: &lt;<span class="selector-tag">integer</span>&gt;</span><br></pre></td></tr></table></figure><p>我们可以操作下面的 demo 来控制元素的顺序，比如将第三项元素通过 <code>order</code> 在移动到第一位。</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-order.png"><iframe height="863" style="width:100%" scrolling="no" title="[vue] order" src="https://codepen.io/anran758/embed/wvawEbL?height=863&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/wvawEbL" target="_blank" rel="noopener">[vue] order</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><hr><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><iframe data-feature="flexbox" src="https://caniuse.bitsofco.de/embed/index.html?feat=flexbox&periods=future_3,current,past_1,past_2&accessible-colours=false" frameborder="0" width="100%" height="400px"></iframe><p>要将学到的新东西应用到实际项目中就不得不考虑其兼容性了。通过 <a href="https://caniuse.com/#feat=flexbox" target="_blank" rel="noopener">caniuse</a> 我们可以看到：flex 布局经过多年的发展，主流浏览器都已经对 flex 布局基本模块都实现完毕了。</p><p><code>PC</code> 端需要考虑的是要不要兼容 <code>IE</code>，移动端最低兼容为 <code>ios 3.2+</code>、<code>Android 2.1+</code>。如果你需要开发微信小程序，那么小程序官方就推荐使用 flex 布局。</p><p>早期 flex 布局是通过 <code>display: box;</code> 来申明，这是使用了旧的规范，后来该值被 <code>flex</code> 给替换掉了。还有一些很低版本的浏览器或许还需要添加浏览器前缀才能使用 flex 布局。因此你在某处看到如下代码也不用感到奇怪，这是开发者在给布局做兼容呢:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: -moz-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">     <span class="attribute">-moz-box-pack</span>: center;</span><br><span class="line">      <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line">          <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">     <span class="attribute">-moz-box-align</span>: center;</span><br><span class="line">      <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果要我们在开发时手动写这种兼容好像不是很靠谱，兼容又冗余。所幸现在的前端开发都会使用脚手架，这些脚手架一般都会内置 <code>postcss</code> 和 <code>autoprefix</code> 之类的插件来帮助我们完成这些事。</p><p>还有一些朋友可能会说，我们老项目还是得要兼容 <code>IE 8+</code> 呀，是不是意味着跟 flex 布局无缘了？其实不是的，github 上有一个叫 <a href="https://github.com/jonathantneal/flexibility" target="_blank" rel="noopener">flexibility</a> 的 <code>polyfill</code> 可以让 <code>IE8 +</code> 也实现 flex 布局效果.</p><hr><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本篇介绍了 flex 布局该如何使用、各属性的作用与效果，下一篇再详细讲讲 flex 布局在实际工作中的妙用~</p><p><strong>参考资料:</strong></p><ol><li><a href="https://www.w3.org/TR/css-flexbox-1/" target="_blank" rel="noopener">CSS Flexible Box Layout Module Level 1</a></li><li><a href="https://drafts.csswg.org/css-align-3/" target="_blank" rel="noopener">CSS Box Alignment Module Level 3</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Flex_Item" target="_blank" rel="noopener">Flex Item</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;互联网早期实现布局是需要通过多种不同属性组合才能实现我们想要的布局。&lt;/p&gt;&lt;p&gt;比如常见的垂直居中，刚接触 css 的朋友看到 &lt;code&gt;vertical-align: middle;&lt;/code&gt; 这个属性可能就会认为它就是用于垂直居中的，但实际上并没有那么简单。如果想要通过该属性来实现垂直居中，还需要其他小伙伴配合。&lt;/p&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#e44b27&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;white-space&lt;/span&gt;: nowrap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 该伪类是实现垂直居中关键 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.content&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;white-space&lt;/span&gt;: normal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;我想居中！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样看来，为了实现垂直居中布局，我们还得打一套组合拳才能出来才行，是不是看起来有点麻烦的样子？&lt;/p&gt;&lt;p&gt;W3C 在 2009 年提出的 &lt;code&gt;Fiexbox(flex)&lt;/code&gt; 布局&lt;a href=&quot;https://www.w3.org/TR/2009/WD-css3-flexbox-20090723/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;草案&lt;/a&gt;，就是针对用户界面设计优化的 CSS 盒模型。如果使用 flex 布局来实现上面的垂直居中布局的话，可以简化为：&lt;/p&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#e44b27&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 使用 flex 布局 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;align-items&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;我想居中！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;修改后的代码就显得更精简了，也不需要其他小伙伴来搭把手。布局的事情就让 flex 家族自己来解决即可。&lt;/p&gt;
    
    </summary>
    
      <category term="layout" scheme="https://anran758.github.io/blog/categories/layout/"/>
    
    
      <category term="css" scheme="https://anran758.github.io/blog/tags/css/"/>
    
      <category term="layout" scheme="https://anran758.github.io/blog/tags/layout/"/>
    
      <category term="flexbox" scheme="https://anran758.github.io/blog/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title>Hexo blog 的升级与同步方案</title>
    <link href="https://anran758.github.io/blog/2019/11/02/hexo-blog-upgrade-and-version-control/"/>
    <id>https://anran758.github.io/blog/2019/11/02/hexo-blog-upgrade-and-version-control/</id>
    <published>2019-11-02T01:44:24.000Z</published>
    <updated>2020-05-05T06:43:44.941Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇我们介绍了如何使用 <code>Hexo</code> 框架及 <code>Next</code> 主题搭建博客。这次来聊聊如何安全的更新博客与主题的版本。</p><p><img data-src="https://user-images.githubusercontent.com/16272760/63487983-da41b080-c4df-11e9-951c-64883a8a5e9b.png" alt="next theme"></p><a id="more"></a><hr><p>早期写博客时笔者就有考虑过使用 <code>git</code> 来做版本控制，那时 <code>github</code> 私人仓库还没有免费开放，国内虽然有 <code>coding</code> 和码云这些平台有开放少量的私人仓库，但由于懒得折腾就选了最方便同步的 <code>OneDrive</code>(因为它只需将文件夹移入就可以实现跨设备共享)。</p><p>后来笔者因为工作的原因，需要在多设备中频繁切换，这种简单同步方式就会暴露出一些问题。比如说，在<strong>设备 A</strong> 想对博客做一些自定义的修改，其中可能会动到依赖，但此时<strong>设备 B</strong> 的文件正在同步，那这样可能会导致文件不一致的问题。可能会将旧的文件重新同步过来，这可能会导致程序报错，还不易于排查。</p><p>冲突文件合并失败会额外添加如 <code>index-anran758&#39;s MacBook Pro.js</code> 之类的同名文件，并且发生冲突时是隐式的，你甚至不知道发生了冲突，这种体验使用不太友好。</p><p>因此 <code>OneDrive</code> 的同步方式适用于改动不会太大的文件。</p><hr><p>如果你对 <code>git</code> 版本控制比较熟悉的话，那可以通过 <code>git</code> 对 blog 进行版本控制。</p><p>使用源码托管平台的话就如上文所说主要有这么几种选择:</p><p>国内的 <a href="https://gitee.com/" target="_blank" rel="noopener">gitee(码云)</a>、<a href="https://coding.net/" target="_blank" rel="noopener">coding</a> 是一个不错的选择，代码的上传于下载速度也比较可观。国外可以使用 <a href="https://github.com/" target="_blank" rel="noopener">github</a>，github 的私人仓库是今年才开放无限制免费创建仓库数量的，缺点由于众所周知的问题，有时可能拉代码速度较慢。</p><p>笔者使用的是 github 作为源码托管，下文将要介绍的方法对于 <code>git</code> 仓库是通用，因此根据自身的喜好选择对应的平台。</p><h2 id="博客托管"><a href="#博客托管" class="headerlink" title="博客托管"></a>博客托管</h2><p>托管 blog 源码的步骤如下:</p><ol><li><p>找到对应的平台，创建私人仓库(注意是 <strong>Private</strong>，不要将自己的私人配置也开源咯)。</p></li><li><p>仓库创建完毕后，得到仓库的地址。打开命令行，进入 <code>/blog</code> 目录下并输入命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 git 项目</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个名为 origin 的 remote</span></span><br><span class="line"><span class="comment"># your_repo_path 是你创建仓库得到的仓库地址</span></span><br><span class="line">git remote add origin your_repo_path</span><br></pre></td></tr></table></figure></li><li><p>由于 <code>/theme/next</code> 本身也是一个仓库，<code>git</code> 无法提交嵌套仓库的文件夹，因此需要在 <code>.gitignore</code> 添加配置，忽略该文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其他忽略规则...</span></span><br><span class="line">themes/next/</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交代码</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"new: blog 数据开始进行版本控制"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上游(-u)并推送至远程的 master 分支</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>这样我们就完成了博客的源码托管。</p></li></ol><h2 id="主题托管"><a href="#主题托管" class="headerlink" title="主题托管"></a>主题托管</h2><p><code>Next theme</code> 官网介绍的安装方式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 blog 目录</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 言下之意就是将该库克隆到 themes 目录下的 next 文件夹中</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>在 <code>Next theme 7.0+</code> 版本中，主题嵌入了检查版本更新的代码，每当运行本地服务器时，都会进行检查版本号的更新。当有新的版本发布时会在命令行输出警告:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARN  Your theme NexT is outdated. Current version: v7.4.2, latest version: v7.5.0</span><br><span class="line">WARN  Visit https://github.com/theme-next/hexo-theme-next/releases <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p>这时你想体验 <code>Next</code> 的新特性的话可能会有点麻烦，因为原先我们在旧版本上修改了配置，或添加了一些自定义的布局。这将会造成代码冲突。</p><p>因此我们需要独立开两条分支:</p><ul><li><code>master</code> 分支是官方发布的正式版本，我们不去修改 <code>master</code> 分支的中的任何文件。</li><li>另一条是我们自己创建的新分支，笔者命名为 <code>customize</code>, 言下之意为该分支含有我们自定义的修改，包括私人配置等。</li></ul><p>除此之外，由于主题配置文件(<code>theme/next/_config.yml</code>)中含有某些应用的 <code>appid</code> 或者 <code>secret</code>，这些配置不应该被其他人随意看到以防冒名滥用。因此我们应该将该项目额外添加一个 <code>remote</code> 来保存我们的私人配置。 具体操作如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时已经下载到了主题文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换新分支</span></span><br><span class="line">git checkout -B customize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行主题配置或其他修改操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交改动(未推送)</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"chg: 修改为自定义配置"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个名为 userRepo(名字可以自己定义，只要自己能搞清是哪个来源即可) 的新 remote，</span></span><br><span class="line">git remote add userRepo git@github.com:anran758/hexo-xxx-next.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上游(即以后使用 git pull/status 时默认拉取 userRepo 源的 customize 分支)，并推送指定 remote</span></span><br><span class="line">git push -u userRepo customize</span><br></pre></td></tr></table></figure><p>如此就完成了代码的追踪，以后使用 <code>next</code> 主题就不是从 <code>hexo-theme-next</code> 中获取了，而是我们自己的私人仓库 <code>hexo-xxx-next</code> 中获取，安装方式是一样的。</p><h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2><h3 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h3><p>前文说过我们将源码托管的需求之一就是为了解决代码合并的问题，为了体验新版本的特性，我们需要将新版本的代码合并进我们的分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 origin/master 获取最新版本的代码</span></span><br><span class="line"><span class="comment"># 理论上我们不修改 master 分支的代码不会发生冲突</span></span><br><span class="line">git fetch origin</span><br><span class="line">git pull --no-commit origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至 customize 分支</span></span><br><span class="line">git checkout customize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查本地是否有文件改动，有的话需要进行 commit 提交或者使用 git stash 藏起来</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并代码</span></span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure><p>我们最起码修改过 _config.yml，因此会发生冲突也不奇怪，有冲突咱们就解决冲突。</p><p>如果你使用 vscode 进行编码，侧边栏有一个源代码管理，打开它可以看到冲突的文件。</p><p>打开冲突的文件，判断冲突项确定要保留(删除)的代码，解决冲突后，提交到缓存区(git add .(file))。缓冲区有本次升级所涉及的代码，可以大致预览一下本次的更新都做了什么事</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将缓冲区的文件提交至 commit</span></span><br><span class="line">git commit -m <span class="string">"Merge release v(version) into customize branch"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交代码</span></span><br><span class="line">git push</span><br><span class="line"><span class="comment"># Counting objects: 99, done.</span></span><br><span class="line"><span class="comment"># Delta compression using up to 4 threads.</span></span><br><span class="line"><span class="comment"># Compressing objects: 100% (57/57), done.</span></span><br><span class="line"><span class="comment"># Writing objects: 100% (99/99), 12.86 KiB | 346.00 KiB/s, done.</span></span><br><span class="line"><span class="comment"># Total 99 (delta 71), reused 64 (delta 42)</span></span><br><span class="line"><span class="comment"># remote: Resolving deltas: 100% (71/71), completed with 41 local objects.</span></span><br><span class="line"><span class="comment"># To github.com:anran758/hexo-xxx-next.git</span></span><br><span class="line"><span class="comment">#    4a70c18..54805a2  customize -&gt; customize</span></span><br></pre></td></tr></table></figure><p>升级完后运行本地服务器最后会输出一条：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Congratulations! Your are using the latest version of theme NexT.</span><br></pre></td></tr></table></figure><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>若最新版本的 <code>Hexo</code> 引入了你想要的新功能，你想更新 <code>Hexo</code> 版本的话，首先确定版本号变动的是哪一位。</p><p><code>package.json</code> 的版本号格式是数字由点分隔，如 <code>主版本号.功能版本号.补丁版本号</code>。若更新是主(大)版本号的话，则需要先修改 <code>dependencies</code> 依赖中 <code>hexo</code> 的主版本号，再输入 <code>npm update</code>。</p><p>以下是 <code>hexo@v3</code> 更新为 <code>hexo@v4</code> 的示例:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   // ...</span><br><span class="line">   "dependencies": &#123;</span><br><span class="line"><span class="addition">+    "hexo": "^4.0.0",</span></span><br><span class="line"><span class="deletion">-    "hexo": "^3.9.0",</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx hexo -v</span></span><br><span class="line">hexo: 3.9.0</span><br><span class="line">hexo-cli: 2.0.0</span><br><span class="line">os: Darwin 17.7.0 darwin x64</span><br><span class="line">node: 12.13.1</span><br><span class="line">v8: 7.7.299.13-node.16</span><br><span class="line">uv: 1.33.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.39.2</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 1.1.4</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">cldr: 35.1</span><br><span class="line">icu: 64.2</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm update</span></span><br><span class="line">+ hexo@4.2.0</span><br><span class="line">added 71 packages from 90 contributors, updated 14 packages and moved 5 packages in 12.513s</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx hexo -v</span></span><br><span class="line">hexo: 4.2.0</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Darwin 17.7.0 darwin x64</span><br><span class="line">node: 12.13.1</span><br><span class="line">v8: 7.7.299.13-node.16</span><br><span class="line">uv: 1.33.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.39.2</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 1.1.4</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">cldr: 35.1</span><br><span class="line">icu: 64.2</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></table></figure><p>若只是后面两位版本号有变更的话，仅需输入 <code>npm update</code> 即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单单从升级版本来合并代码的角度来看，实际上本地 commit 也可以做这种事，将 <code>commit</code> 储存在本地(<code>.git</code>)中不提交远端也是没有问题的，<code>OneDrive</code>也可以完成同步。</p><p>但从安全和可调试的角度来看，<code>OneDrive</code>的同步方式存在一定风险(懒的代价)。使用 <code>git</code> 版本控制可以清晰看到每一次提交的修改，不会多出奇奇怪怪的东西。必要的时候还可以进行回滚，相对来说更安全。但这种方案需要使用者了解一定的 <code>git</code> 知识。</p><p>从操作步骤来看，使用的 <code>git</code> 同步方案会产生多个仓库，这些仓库一般是拥有权限的人才能查看(修改)源码。比如完成了本文中两个仓库源码同步后，在另一台设备初次同步的步骤是：</p><ol><li>通过 <code>git clone</code> 下载 blog 本体。</li><li>通过 <code>git clone</code> 下载私人仓库 <code>next theme</code> 到 <code>/theme</code> 目录下。</li><li>进入两个仓库内安装对应的依赖</li></ol><p>以上可以在 blog 项目下的 <code>package.json</code> 设置 <code>scripts</code>，通过一条命令来完成这些事。</p><p>由此我们可以看到，相比 <code>OneDrive</code> 的懒人方案，<code>git</code> 方案的操作步骤会更繁琐。更新方式也从自动更新变成手动更新。</p><p>两者种方案各有利弊，具体采用什么方案就看朋友们的习惯啦~</p><hr><p>本文涉及到的 <code>git</code> 命令都是可以在 <a href="https://github.com/anran758/Front-End-Lab/tree/master/git" target="_blank" rel="noopener">git 速查方案</a> 查找相应的解释。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇我们介绍了如何使用 &lt;code&gt;Hexo&lt;/code&gt; 框架及 &lt;code&gt;Next&lt;/code&gt; 主题搭建博客。这次来聊聊如何安全的更新博客与主题的版本。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16272760/63487983-da41b080-c4df-11e9-951c-64883a8a5e9b.png&quot; alt=&quot;next theme&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://anran758.github.io/blog/categories/Hexo/"/>
    
    
      <category term="git" scheme="https://anran758.github.io/blog/tags/git/"/>
    
      <category term="Hexo" scheme="https://anran758.github.io/blog/tags/Hexo/"/>
    
      <category term="blog" scheme="https://anran758.github.io/blog/tags/blog/"/>
    
      <category term="Next" scheme="https://anran758.github.io/blog/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>将 JSON 数据格式输出至页面上</title>
    <link href="https://anran758.github.io/blog/2019/08/24/js-%E5%B0%86JSON%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E8%87%B3%E9%A1%B5%E9%9D%A2%E4%B8%8A/"/>
    <id>https://anran758.github.io/blog/2019/08/24/js-将JSON数据格式输出至页面上/</id>
    <published>2019-08-24T08:04:52.000Z</published>
    <updated>2020-05-21T01:19:54.985Z</updated>
    
    <content type="html"><![CDATA[<p><code>JSON</code> 是一种轻量级的数据交换格式，它有键值对集合(js 中的对象)和数组两种结构。<code>JSON</code>是一个通用的格式，在前后端语言中都能跟该 <code>JSON</code> 打交道。</p><p>有时候我们需要将 <code>JSON</code> 格式输入至页面展示的需求，其中还需要保持一定的索引，那么该如何实现呢？</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们将对象转为 <code>JSON</code> 字符串时会经常使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">JSON.stringify</a> 这个 API，其实该方法就内置有格式化的参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfo = &#123;<span class="attr">name</span>: <span class="string">'anran758'</span>,<span class="attr">github</span>: <span class="string">'https://github.com/anran758'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">JSON</span>.stringify(userInfo, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br><span class="line"><span class="comment">// "&#123;↵  "name": "anran758",↵  "github": "https://github.com/anran758"↵&#125;"</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们第一个参数(<code>value</code>)传入了一个需要序列化的对象。第二个参数是<code>replacer</code>，用以对属性转换和处理，由于我们不需要额外的处理，因此传入一个<code>null</code>；第三个参数则是空格索引的个数，封顶是<code>10</code>，<code>0</code>或不传则没有空格。</p><p>在控制台打印出信息后，我们可以看的出来格式化的数据是带换行符，并且有缩进的格式。接下来我们就要考虑如何输出到页面中。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>只要学过<code>HTML</code>的朋友都知道，我们直接将数据输入至<code>HTML</code>中，空格缩进会被浏览器给忽略掉的。因此不能输入到 <code>&lt;div&gt;</code> 中。这时候又想到，<code>JSON</code>格式实际上也算是代码的一种，那能不能输入至雷士代码块的标签中呢？答案是可以的。</p><p><code>HTML</code> 中有两个标签可以展示源代码: <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 。它们之间不同之处在于:</p><ul><li><code>&lt;pre&gt;</code> 表示预定义<strong>格式文本</strong>，按照原文件中的编排，以等宽字体的形式展现出来，<strong>文本中的空白符（比如空格和换行符）都会显示出来</strong>。</li><li><code>&lt;code&gt;</code> 则是呈现一段计算机代码，它以浏览器的默认等宽字体显示，<strong>但并不一定会完整呈现原来的格式</strong>。</li></ul><p>这些标签知识实际上算是比较冷门的知识，或许远古的面试题会考这种知识点，平时很少会遇到。但是如果你经常使用<code>markdown</code>的话，那么这些标签在<code>markdown</code>中有不同的别名:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如 markdown 语法中的 ``，实际上等同于 <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span> 标签。实际作用是短代码块标签</span><br><span class="line"></span><br><span class="line">而 markdown 语法中的长代码块就等同于 <span class="code">`&lt;pre&gt;`</span> 标签，不同的博客或者网站的应用中还可以对 <span class="code">`&lt;pre&gt;`</span> 加类名，用以展示不同的语言的语法高亮。</span><br></pre></td></tr></table></figure><p>通过三者之间的对比可以看出，只有 <code>&lt;pre&gt;</code> 才是符合我们需求的。</p><iframe height="300" style="width:100%" scrolling="no" title="代码格式输出 - demo1" src="//codepen.io/anran758/embed/NWKdVYQ/?height=300&theme-id=32168&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/NWKdVYQ/" target="_blank" rel="noopener">代码格式输出 - demo1</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>确定好展示的方式后，就可以考虑进一步扩展格式化的功能。比如对象中还有属性是 <code>JSON</code> 字符串的话，咱也进一步的解析，直至最底层。想实现这种功能需要编写一个递归函数，考虑如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPlainObject = <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(v) === <span class="string">"[object Object]"</span></span><br><span class="line"><span class="keyword">const</span> isString = <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(v) === <span class="string">"[object String]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式 JSON 字符串为对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author <span class="variable">anran758</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123; any &#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatJsonStrAsObj</span>(<span class="params">sample</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = sample;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isString(temp)) &#123;</span><br><span class="line">    <span class="comment">// 因为有解析失败的可能，使用 try catch 做相应处理</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      temp = <span class="built_in">JSON</span>.parse(temp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="comment">// parse error，return this sample</span></span><br><span class="line">      <span class="keyword">return</span> sample;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isPlainObject(temp)) &#123;</span><br><span class="line">    temp = &#123; ...temp &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.keys(temp).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> item = temp[key];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 字符串或者对象进行递归确认</span></span><br><span class="line">      <span class="keyword">if</span> (isString(item) || isPlainObject(item)) &#123;</span><br><span class="line">        temp[key] = formatJsonStrAsObj(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 JSON 字符串转换为带缩进的字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>sample JSON 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>[indnt=2] 缩进数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatJSONIndnt</span>(<span class="params">sample, indnt = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newSample = formatJsonStrAsObj(sample);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isString(newSample)) <span class="keyword">return</span> newSample;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(newSample, <span class="literal">null</span>, indnt);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="keyword">return</span> newSample.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  name: <span class="string">'anran758'</span>,</span><br><span class="line">  avatar: <span class="string">'https://xxx'</span>,</span><br><span class="line">  detail: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    desc: <span class="string">'some description'</span>,</span><br><span class="line">    level: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> data = formatJSONIndnt(info);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接将 data 输出至 dom 中</span></span><br></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>上文讲了如何将数据输出至页面，以及扩展格式化功能的示例。接下来讲解输入方面的应用。</p><p>当用户从别的地方复制数据想粘贴至输入框时，可以在输入框上设置监控事件，触发事件后尝试帮用户格式化数据，示例代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">"preview pre"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"textarea"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  name: <span class="string">'anran758'</span>,</span><br><span class="line">  avatar: <span class="string">'https://xxx'</span>,</span><br><span class="line">  detail: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    desc: <span class="string">'some description'</span>,</span><br><span class="line">    level: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> data = formatJSONIndnt(info);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textarea = <span class="built_in">document</span>.querySelector(<span class="string">'.textarea'</span>);</span><br><span class="line"><span class="keyword">const</span> preview = <span class="built_in">document</span>.querySelector(<span class="string">'.pre'</span>);</span><br><span class="line"></span><br><span class="line">preview.innerHTML = data;</span><br><span class="line">textarea.addEventListener(<span class="string">'paste'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 阻止默认事件</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">const</span> value = (e.clipboardData || <span class="built_in">window</span>.clipboardData).getData(<span class="string">'text'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里使用了上面定义的函数，进行格式化数据</span></span><br><span class="line">  e.target.value = formatJSONIndnt(value, <span class="number">2</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f5fcff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3eeff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.textarea</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'SFMono-Regular'</span>, Consolas, <span class="string">'Liberation Mono'</span>, Menlo, Courier,</span><br><span class="line">    monospace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview</span> + <span class="selector-class">.preview</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe height="300" style="width:100%" scrolling="no" title="代码格式输入 - demo1" src="//codepen.io/anran758/embed/oNvBrWm/?height=300&theme-id=32168&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/anran758/pen/oNvBrWm/" target="_blank" rel="noopener">代码格式输入 - demo1</a> by anran758 (<a href="https://codepen.io/anran758" target="_blank" rel="noopener">@anran758</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">JSON.stringify() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre" target="_blank" rel="noopener"><code>&lt;pre&gt;</code> - HTML（超文本标记语言） | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code" target="_blank" rel="noopener"><code>&lt;code&gt;</code> - HTML（超文本标记语言） | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;JSON&lt;/code&gt; 是一种轻量级的数据交换格式，它有键值对集合(js 中的对象)和数组两种结构。&lt;code&gt;JSON&lt;/code&gt;是一个通用的格式，在前后端语言中都能跟该 &lt;code&gt;JSON&lt;/code&gt; 打交道。&lt;/p&gt;&lt;p&gt;有时候我们需要将 &lt;code&gt;JSON&lt;/code&gt; 格式输入至页面展示的需求，其中还需要保持一定的索引，那么该如何实现呢？&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://anran758.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://anran758.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>从搭建到部署，快速构建一个私人博客</title>
    <link href="https://anran758.github.io/blog/2019/08/19/hexo-blog/"/>
    <id>https://anran758.github.io/blog/2019/08/19/hexo-blog/</id>
    <published>2019-08-18T16:33:39.000Z</published>
    <updated>2019-11-02T09:28:54.444Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们希望有一个受控的博客，来记录或分享一些东西。这个博客的主题内容由你自己来决定，可以是技术分享(编程、汉化分享等)，也可以是生活感想。</p><img data-src="/blog/2019/08/19/hexo-blog/banner.png"><a id="more"></a><p>本文将介绍一个可以迅速搭建并部署的受控博客。阅读本文前，希望你对以下知识点有所了解:</p><ul><li><code>git(版本控制)</code> 的基础使用</li><li><code>markdown</code> 的使用</li></ul><h2 id="为什么要搭建博客"><a href="#为什么要搭建博客" class="headerlink" title="为什么要搭建博客"></a>为什么要搭建博客</h2><p>在线类博客有很多选择，为什么我们需要从零搭建新的博客呢？自己搭建的博客有什么好处吗？</p><p>首先，前文所提的 <strong>“博客受控”</strong>，指的就是能够自己控制的博客的样式、内容等，自己想怎么改就怎么改。</p><p>内容受控是指我们知道在线类的博客是受平台限制的，这意味着你所发表的内容是需要受审才能发出的，一些敏感的技术词汇，该篇文章都可能会被和谐或被删除。但在自己搭建博客就没有这样的问题，最起码能保留源文件。</p><p>其二，博客的样式是受控的。像著名在线博客<code>CSDN</code>上一些博主的文章确实是有学习参考的价值，但问题的是该站广告是在是太多了，字体和排版的阅读体验并不太好。但如果是自己搭建的博客的话，就可以自己着手优化这些问题。</p><p>但博客的搭建还需要我们从各方面考虑利弊。平台类博客会有相应的推荐系统，会对同类型文章相互引流，在 SEO 方面会做得比我们好。</p><p>个人搭建的博客，刚起步时的浏览量并不高，但是可以通过<code>SEO</code>等方式来逐步增加自己网站的权重。或者提高博客的质量和干货，读者认为文章有价值，自然会收藏起来形成熟客。</p><p>那么博客能写什么东西呢？在日常生活中，有很多知识点是呈碎片状，写博客的本质上就是对自己知识的一种梳理，然后再将这些知识分享出来，可能会有对这方面知识有疑惑，或者想找到解决方案，自身分享出来的东西能给读者做一定的参考。同时这也会是一个良性循环，因为分享的同时，你可能也需要去查询一些资料，同时也可以找到别人遇到过并分享出来的解决方案，是一个相互收益的过程。</p><p>我们的基本需求是梳理与分享，那么更应该把注意力放在内容本身，网站布局的排版样式等则是增加读者阅读体验的问题。因此我们可以使用现成的博客框架快速完成这些事。</p><p>博客框架有很多种选择，笔者选择的是 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>，因为它足够便捷优雅。</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p><code>Hexo</code> 依赖 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 和 <code>NPM</code>包管理，<code>Node.js</code> 安装后一般会自带<code>NPM</code>。</p><p>我们打开终端(<code>Windows PowerShell / cmd.exe</code>、<code>bash</code>、<code>macOS</code> 里的终端)，输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 npm 是否安装成功</span></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 hexo cli，</span></span><br><span class="line"><span class="comment"># 如果安装速度过慢的话，可以安装国内的淘宝镜像</span></span><br><span class="line"><span class="comment"># 在命令行输入 ` npm install -g cnpm --registry=https://registry.npm.taobao.org`</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 hexo 是否安装成功，并查看版本</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>依赖安装成功后，我们可以在命令行输入 <code>hexo help</code> 查看使用方式(描述是英文，示例部分笔者将其转为中文):</p><p><strong><code>Usage: hexo &lt;command&gt;</code></strong></p><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td><code>help</code></td><td>获取命令的帮助</td></tr><tr><td><code>init</code></td><td>创建一个新的 Hexo 文件夹</td></tr><tr><td><code>version</code></td><td>显示版本信息</td></tr></tbody></table><p>使用 <code>hexo help [command]</code> 可以查看更多的信息, 如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="built_in">help</span> init</span><br><span class="line"><span class="comment"># Usage: hexo init [destination]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Description(描述):</span></span><br><span class="line"><span class="comment"># 在指定的路径或当前目录中创建一个新的Hexo文件夹.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments（参数）:</span></span><br><span class="line"><span class="comment">#  destination  文件夹路径。 如果未指定，则在当前文件夹中初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Options（选项）:</span></span><br><span class="line"><span class="comment">#  --no-clone    复制文件而不是从GitHub克隆</span></span><br><span class="line"><span class="comment">#  --no-install  跳过 npm 依赖安装(默认初始化会自动装依赖)</span></span><br></pre></td></tr></table></figure><p><strong>全局选项：</strong></p><table><thead><tr><th>options</th><th>description</th></tr></thead><tbody><tr><td><code>--config</code></td><td>指定配置文件而不是使用默认的 <code>_config.yml</code></td></tr><tr><td><code>--cwd</code></td><td>指定 CWD</td></tr><tr><td><code>--debug</code></td><td>显示终端中的所有详细消息</td></tr><tr><td><code>--draft</code></td><td>显示草稿帖子</td></tr><tr><td><code>--safe</code></td><td>禁用所有插件和脚本</td></tr><tr><td><code>--silent</code></td><td>在控制台上隐藏输出</td></tr></tbody></table><p>在官网 <a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">commands</a> 中可以找到全部完整的解释。</p><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>在终端上，我们可以看到有一个 <code>init</code> 的命令，我们可以使用这个命令来初始化 <code>hexo</code> 项目，但再建站之前我们需要先决定在哪里存放博客源代码。</p><p>我推荐使用如微软的 <a href="https://onedrive.live.com/about/en-US/" target="_blank" rel="noopener">OneDrive</a>（win10 系统自带）之类的云文件夹。你可以白嫖它 5G 的云储存空间。当你在<code>设备A</code>下修改了文件，它会自动同步到云端上。切换回<code>设备B</code>并登录账号后，它又会自动从云端下载数据，是一个便捷的方式。</p><p>但值得注意的是 <code>OneDrive</code> 毕竟是国外服务，由于众所周知的原因可能需要科学上网才能使用。该方式只是数据备份与同步的问题，不使用它也不会影响下文的构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你是 unix 系统的话，可以使用该命令查看当前路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># /Users/anran/OneDrive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化文件夹名为 blog</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="comment"># INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span></span><br><span class="line"><span class="comment"># other install info ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>安装完成后目录如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   (网站的配置信息)</span><br><span class="line">├── package.json  (应用依赖信息)</span><br><span class="line">├── node_modules  (依赖包)</span><br><span class="line">├── scaffolds     (模板文件)</span><br><span class="line">├── source        (资源文件夹是存放用户资源的地方)</span><br><span class="line">|   ├── _drafts      (草稿文件夹，刚初始化时可能不存在)</span><br><span class="line">|   └── _posts       (文章&#x2F;帖子源码列表)</span><br><span class="line">└── themes        (主题)</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>建站完成后我们需要进行 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a>，<code>hexo</code> 中主要有两项配置。一项是<code>站点配置文件</code>，路径为 <code>/_config.yml</code>。另一项是<code>主题配置文件</code>,路径是<code>/themes/(下载的主题)/_config.yml</code>。</p><p>我们可以先在<code>站点配置文件</code>修改以下基础选项:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站主标题，SEO元素之一</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#网站副标题，可选</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站描述, SEO元素之一，用于告诉搜索引擎关于这个站点的描述</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">分享生活、分享技术</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站的关键词，如:</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Front</span> <span class="string">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站作者</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">anran758</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站使用的语言, 由于 Hexo 具备多语言配置，默认为英文，我们需要修改回中文语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>初始化项目后默认会安装相关的依赖，接着在命令行输入如下命令来<strong>运行博客</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务，默认端口为 4000，启动服务后可以在浏览器输入 `http://localhost:4000` 查看效果</span></span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># or 简写方式</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以使用 -p, 指定 9000 端口</span></span><br><span class="line">hexo s -p 9000</span><br></pre></td></tr></table></figure><img data-src="/blog/2019/08/19/hexo-blog/preview-blog.jpg"><h3 id="写作步骤"><a href="#写作步骤" class="headerlink" title="写作步骤"></a>写作步骤</h3><p>我们一般通过命令行来操作博客:</p><p>比如创建文章的方式如下: <code>hexo new [layout] &lt;title&gt;</code></p><p><code>layout</code>是指定布局，<code>Hexo</code>默认有<code>post</code>、<code>page</code> 和 <code>draft</code> 三种布局，它们分别对应不同的路径。我们也可以自定义布局，但实际页面会和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>按照我个人的写作习惯，通常写作步骤是：</p><ol><li>创建草稿(<code>drafts</code>)</li><li>在草稿上进行写作</li><li>整理细节并在本地服务器上查看效果(<code>server</code>)</li><li>发布至正式的帖子上</li><li>生成静态文件并部署(后续讲)</li></ol><hr><p><strong>创建草稿(<code>drafts</code>)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft <span class="string">"My first post"</span></span><br><span class="line"><span class="comment"># INFO  Created: ~/blog/source/_drafts/My-first-post.md</span></span><br></pre></td></tr></table></figure><p>在初次创建草稿会生成一个名为 <code>_drafts</code> 的草稿文件夹，接着该文件夹下有一个我们刚刚创建的草稿，名为 <code>My-first-post.md</code> 的 <code>markdown</code> 文件，文件内容如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: My first post</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>在本地服务器查看草稿(<code>drafts</code>)</strong></p><p>我们可以启动本地服务器一边写作一边预览,但默认情况下草稿是不会被展示出来的，如果你想查看草稿的话，可以输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -p 9000 --draft</span><br><span class="line"><span class="comment"># INFO  Start processing</span></span><br><span class="line"><span class="comment"># INFO  Hexo is running at http://localhost:9000 . Press Ctrl+C to stop.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要退出服务器，按住 control + c</span></span><br></pre></td></tr></table></figure><img data-src="/blog/2019/08/19/hexo-blog/preview.jpg"><p><strong>发布草稿(<code>publish</code>)</strong></p><p>如果我们在本地服务器上校队完草稿细节后，可以将草稿发布为文章，否则在后续生成博客静态文件时不会被打包出来:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo publish [layout] &lt;filename&gt;</span></span><br><span class="line"><span class="comment"># 将草稿发布为文章</span></span><br><span class="line">$ hexo publish post My-first-post</span><br><span class="line"><span class="comment"># INFO  Published: ~/blog/source/_posts/My-first-post.md</span></span><br></pre></td></tr></table></figure><p>输入命令后你可以发现发布的文章被转移到了<code>source/_posts/</code>上，这样就完成了本地的文章发布。</p><p><strong>生成静态文件(<code>generate</code>)</strong></p><p><code>Hexo</code>框架的一项工作就是将源文件 <code>markdown</code> 最后生成为 <code>HTML</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># INFO  Start processing</span></span><br><span class="line"><span class="comment"># INFO  Files loaded in 275 ms</span></span><br><span class="line"><span class="comment"># INFO  Generated: 2019/08/11/My-first-post/index.html</span></span><br><span class="line"><span class="comment"># INFO  1 files generated in 152 ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写形式</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控文件变化，并生成静态文件</span></span><br><span class="line">$ hexo g --watch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成文件并部署(部署后面单独章节来讲解)</span></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>我们熟悉完博客系统的操作后，接下来就是美化博客。<code>Hexo</code> 支持主题，我们可以根据<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="noopener">官网的创建主题教程</a>自己来设计，也可以直接在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题商城</a> 中找现成的主题。这里以笔者推荐的主题 <code>Next</code> 为例:</p><img data-src="/blog/2019/08/19/hexo-blog/hexo.jpg"><p><img data-src="https://user-images.githubusercontent.com/16272760/61057395-d2deb000-a427-11e9-8e28-f348fe181795.png" alt="theme next"></p><p>笔者一开始使用 <code>next</code> 主题时，版本才 <code>5.x</code>，当时仍有很多博客所需的东西没有集成。如今回头一看，发现 <code>next</code> 升级了好几个大版本。github 主题仓库也迁移至了 <code>https://github.com/theme-next</code> 里，乃至文档都有两个不同的版本。</p><p><a href="https://theme-next.org/" target="_blank" rel="noopener">新文档</a>是采用它自身主题的一个<code>scheme</code>来建成，是全英文文档，可以保证信息资料是最新的。<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">旧文档</a>布局便于阅读，同时是中文文档，大多参数也能在该文档找到，但毕竟没有再过多的维护，建议还是以最新文档为参考。</p><p>安装主题可以通过<code>git clone</code>克隆至<code>blog/theme/</code>下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># /Users/anran/OneDrive/Blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动主题前需要清除缓存与已部署的文件</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># clone 主题</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>接着在 <code>站点配置文件(/_config.yml)</code> 中启动 <code>theme</code>。再打开<code>主题配置文件(/themes/next/_config.yml)</code>选择 Scheme:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="string">+</span> <span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /themes/next/_config.yml</span></span><br><span class="line"><span class="comment"># 提供三种模式</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure><img data-src="/blog/2019/08/19/hexo-blog/start.jpg"><p>评论、订阅、数据统计、SEO 等部分功能配置已经集成至 <code>next</code> 主题配置中，但大多还需要额外添加依赖还需要根据<a href="https://theme-next.org/docs/getting-started/" target="_blank" rel="noopener">文档</a>来配置。<code>next</code> 在主题配置中集成了由于配置自定义项过多，读者可以根据自己所需添加相应的统计、SEO 相关的 <code>app key</code> 等就不进一步展开讲。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>我们使用<code>git</code>进行部署，可以将网站部署至私人服务器、也可以部署到免费的<code>github pages</code>上。本文将介绍部署至<code>github</code>的方法，如果你还没有<code>github</code>账号的话，那你需要先<a href="github.com">注册一个账号</a>。</p><p>步骤如下:</p><ol><li><p>访问<code>github.com</code>，点击<code>sign up</code>注册账号。</p></li><li><p>进入注册页，输入账号密码和邮箱，输入验证码!</p><img data-src="/blog/2019/08/19/hexo-blog/join-github.png"></li><li><p>选择免费用户</p><img data-src="/blog/2019/08/19/hexo-blog/choose-free-account.jpg"></li><li><p>接着是关于<code>github</code>推荐服务的调查，当然你也可以跳过它.</p><img data-src="/blog/2019/08/19/hexo-blog/img-1.jpg"></li><li><p>验证完毕后，它会提示你创建一个仓库，这里我们先创建一个<code>blog</code>。</p><img data-src="/blog/2019/08/19/hexo-blog/create-blog.jpg"></li><li><p>复制仓库链接，copy 至 <code>站点配置文件(/_config.yml)</code>里。同时安装<code>hexo-deployer-git</code>的依赖：</p><img data-src="/blog/2019/08/19/hexo-blog/copy.jpg"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://yourname.github.io/blog</span>   <span class="comment"># 修改为 github io 的地址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span>                           <span class="comment"># 要将资源映射到仓库名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourname/blog.git</span>  <span class="comment"># blog 的 git 地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span>                            <span class="comment"># 发布至 gp-pages 分支，如果该分支不存在，就会自动创建它</span></span><br></pre></td></tr></table></figure></li><li><p>接着开始部署。如果你还没配置<code>git</code>账号的话，它会提示你输入账号密码，输入正确的账号密码后就部署成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者使用`hexo d -g`, 两者是等价的效果</span></span><br><span class="line">hexo g -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># *** Please tell me who you are.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run</span></span><br><span class="line"><span class="comment">#  git config --global user.email "you@example.com"</span></span><br><span class="line"><span class="comment">#  git config --global user.name "Your Name"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to set your account's default identity.</span></span><br><span class="line"><span class="comment"># Omit --global to set the identity only in this repository.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fatal: unable to auto-detect email address (got '29625@DESKTOP-0R7P8H4.(none)')</span></span><br><span class="line"><span class="comment"># Logon failed, use ctrl+c to cancel basic credential prompt.</span></span><br><span class="line"><span class="comment"># Username for 'https://github.com': anran758</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> 621 ms</span><br><span class="line">INFO  0 files generated <span class="keyword">in</span> 424 ms</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend <span class="built_in">dirs</span>...</span><br><span class="line"></span><br><span class="line">INFO  Congratulations! Your are using the latest version of theme NexT.</span><br><span class="line">Enumerating objects: 131, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (131/131), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (91/91), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (131/131), 257.72 KiB | 2.48 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 131 (delta 43), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (43/43), <span class="keyword">done</span>.</span><br><span class="line">To https://github.com/yourname/blog.git</span><br><span class="line"> * [new branch]      HEAD -&gt; gh-pages</span><br><span class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'gh-pages'</span> from <span class="string">'https://github.com/yourname/blog.git'</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有配置全局 git 账号的话可以先配置，不然下次部署还是会提示你输入账号密码</span></span><br><span class="line">git config --global user.email <span class="string">"you@example.com"</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br></pre></td></tr></table></figure></li><li><p>接着在我们创建的<code>blog</code>下进入<code>settings</code>项，设置 <code>github pages</code> 为 <code>gh-pages</code> 也就是之前在配置里设置的分支即可。这样就可以在线上查看我们部署的状况啦~</p></li></ol><img data-src="/blog/2019/08/19/hexo-blog/settings.jpg"> <img data-src="/blog/2019/08/19/hexo-blog/githu-pages.png"> <img data-src="/blog/2019/08/19/hexo-blog/finish.jpg"><h2 id="优化与扩展"><a href="#优化与扩展" class="headerlink" title="优化与扩展"></a>优化与扩展</h2><p>下面介绍一下文档中没有提到的相关问题与扩展。</p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p><code>next</code> 有内置本地搜索的配置项，但文档上说明需要额外安装 <code>hexo-generator-searchdb</code> 这个依赖。但该项目现在已经被归档了，它还存在一些问题没有修复。你可以使用 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 来代替它。接者在<code>站点配置文件</code>添加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Expansion: hexo-generator-search</span></span><br><span class="line"><span class="comment"># 站内搜索</span></span><br><span class="line"><span class="comment"># https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>在使用本地搜索功能时，你可能会遇到以下错误：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This page contains the following errors:</span><br><span class="line">error on line 86 at column 35: Input is not proper UTF-8, indicate encoding !</span><br><span class="line">Bytes: 0x08 0xE8 0xB7 0x9F</span><br><span class="line">Below is a rendering of the page up to the first error.</span><br></pre></td></tr></table></figure><p>出现这种错误原因大多是因为搜狗输入法带来的特殊字符串，我们在源码中替换它即可。打开编辑器（比如<code>vscode</code>），在全局搜索错误信息<code>Bytes</code> 第一个字节 <code>/x08</code> 替换为空。</p><h3 id="github-emoji"><a href="#github-emoji" class="headerlink" title="github emoji"></a>github emoji</h3><p>如果你希望在博客中支持 <code>emoji</code> 的话，你可以安装 <a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use Github Emojis</span></span><br><span class="line"><span class="comment"># Docs: https://github.com/crimx/hexo-filter-github-emojis</span></span><br><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">unicode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">localEmojis:</span></span><br></pre></td></tr></table></figure><h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>为了让搜索引擎能找到我们的网站，我还需要给搜索引擎的网络蜘蛛提供<strong>站点地图文件</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo sitemap 生成器以及百度的 sitemap 生成器</span></span><br><span class="line">npm install hexo-generator-sitemap hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>依赖安装完后在<code>站点配置文件</code>中添加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Expansion: hexo-generator-sitemap</span></span><br><span class="line"><span class="comment"># generate sitemap.</span></span><br><span class="line"><span class="comment"># https://github.com/hexojs/hexo-generator-sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Expansion: hexo-generator-baidu-sitemap</span></span><br><span class="line"><span class="comment"># 针对百度进行优化的 sitemap，作者还是建议手动提交至百度会比较好</span></span><br><span class="line"><span class="comment"># https://github.com/coneycode/hexo-generator-baidu-sitemap</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><h3 id="设置无分页的归档"><a href="#设置无分页的归档" class="headerlink" title="设置无分页的归档"></a>设置无分页的归档</h3><p>如果你期望将归档目录在一页中全部加载出来，那么你可以添加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-archive</span></span><br><span class="line"><span class="comment"># 该插件默认内置于 hexo 中，只需参考文档添加配置即可</span></span><br><span class="line"><span class="comment"># https://github.com/hexojs/hexo-generator-archive</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="图片的引入"><a href="#图片的引入" class="headerlink" title="图片的引入"></a>图片的引入</h3><p>在 <code>hexo</code> 中引用图片主要有两种方式：</p><ul><li>在本地通过资源文件夹引入</li><li>使用图床</li></ul><p>在本地资源的引入，需要修改 <code>_config.yml</code> 的配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>设置完选项后，以后每次使用 <code>hexo new [layout] &lt;title&gt;</code> 后就会生成一个同名的文件夹。然后可以使用 `</p>` 来引入图片资源:<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 例如插入一个 banner 图，hexo 会自动寻找同名文件夹下的文件 --&gt;</span></span></span><br><span class="line">&#123;% asset_img banner.png banner %&#125;</span><br><span class="line"></span><br><span class="line">这里是一段示例内容。</span><br></pre></td></tr></table></figure><p>该方法的缺点是需要占用本地资源，如果你是使用 <code>git</code> 进行部署，因为使 <code>.git</code> 文件变大(即便删除了该文件，它还会存在 <code>git</code> 的 commit 信息中)。</p><p>第二种方式可以使用图床，免费图床有个问题就是服务可能会不稳定，风险不由自己掌控，相对没那么保险。但是它能节省空间，甚至在网络传输上下载速度更快。如果使用图床的话，可以尝试<a href="https://github.com/Suxiaogang/WeiboPicBed" target="_blank" rel="noopener">新浪微博图床</a>，将插件下载至 <code>chrome</code>，登录后即可上传得到相应的 <code>url</code>.</p><h3 id="README"><a href="#README" class="headerlink" title="README"></a>README</h3><p>默认情况下，将源码生成部署至服务器会将上一次生成的数据覆盖掉。如果你期望在 <code>github</code>上保留一个 <code>README.md</code> 给读者看说明的话，可以通过 <code>_config.yml</code> 来设置它：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">['images/loading.gif',</span> <span class="string">'README.md'</span><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="外链音乐播放器插件"><a href="#外链音乐播放器插件" class="headerlink" title="外链音乐播放器插件"></a>外链音乐播放器插件</h3><p>网易云音乐提供了一个外链音乐播放器，可以插入博客中，样式以及播放的歌单都是通过<code>url</code>控制的。我们稍微封装一下，添加如下代码：</p><figure class="highlight yml"><figcaption><span>/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网易云音乐插件</span></span><br><span class="line"><span class="comment"># 控制台: https://music.163.com/#/outchain/0/&#123;% music.id %&#125;/m/use/html</span></span><br><span class="line"><span class="comment"># 网易云音乐插件默认提供三种模式，不同模式设有不同宽高，样式也可能会略有不同。</span></span><br><span class="line"><span class="comment"># 如果你想调整默认的宽高的话，可以设置 width | height 覆盖原先 modal 的宽度</span></span><br><span class="line"><span class="comment"># modal: 1(310 X 430) | 2(310 X 90) | 3(278 | 32)</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">102842761</span>      <span class="comment"># 网易云分享的ID</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span>    <span class="comment"># 是否开启自动播放</span></span><br><span class="line">  <span class="attr">modal:</span> <span class="number">2</span>           <span class="comment"># 模式, 默认为 modal 2</span></span><br><span class="line">  <span class="comment"># width: 310       # 宽度, 默认为 modal 2</span></span><br><span class="line">  <span class="comment"># height: 90       # 高度, 默认为 modal 2</span></span><br></pre></td></tr></table></figure><p>添加 <code>netease-cloud-music.swig</code> 模板:</p><figure class="highlight html"><figcaption><span>/next/layout/_partials/sidebar/netease-cloud-music.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;##</span><br><span class="line"> # extend layout: 网易云音乐外链播放器</span><br><span class="line"> # @author anran758</span><br><span class="line"> #&#125;</span><br><span class="line">&#123;%- if theme.music and theme.music.enable %&#125;</span><br><span class="line">  &#123;# default size #&#125;</span><br><span class="line">  &#123;%- set music_model = theme.music.modal or 2 %&#125;</span><br><span class="line">  &#123;%- set music_width = 310 %&#125;</span><br><span class="line">  &#123;%- set music_height = 90 %&#125;</span><br><span class="line">  &#123;%- set music_padding = 20 %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;# default config #&#125;</span><br><span class="line">  &#123;%- set music_id = theme.music.id or 102842761 %&#125;</span><br><span class="line">  &#123;%- set music_auto = 0 %&#125;</span><br><span class="line">  &#123;%- if theme.music.autoplay %&#125;</span><br><span class="line">    &#123;%- set music_auto = 1 %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if theme.music.width %&#125;</span><br><span class="line">    &#123;%- set music_width = theme.music.width %&#125;</span><br><span class="line">  &#123;%- elif music_model === 1 or music_model === 2 %&#125;</span><br><span class="line">    &#123;%- set music_width = 310 %&#125;</span><br><span class="line">  &#123;%- elif music_model === 3 %&#125;</span><br><span class="line">    &#123;%- set music_width = 278 %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if theme.music.height %&#125;</span><br><span class="line">    &#123;%- set music_height = theme.music.height %&#125;</span><br><span class="line">  &#123;%- elif music_model === 1 %&#125;</span><br><span class="line">    &#123;%- set music_height = 430 %&#125;</span><br><span class="line">  &#123;%- elif music_model === 2 %&#125;</span><br><span class="line">    &#123;%- set music_height = 90 %&#125;</span><br><span class="line">  &#123;%- elif music_model === 3 %&#125;</span><br><span class="line">    &#123;%- set music_height = 32 %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">"no"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">border</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">marginwidth</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">marginheight</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"&#123;&#123; music_width + music_padding&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">"&#123;&#123; music_height + music_padding &#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=0&amp;id=&#123;&#123; music_id &#125;&#125;&amp;auto=&#123;&#123; music_auto &#125;&#125;&amp;height=&#123;&#123; music_height &#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"margin: 10px 0 50px;"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>在 <code>layout/_macro/sidebar.swig</code> 中插入模板：</p><figure class="highlight html"><figcaption><span>layout/_macro/sidebar.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-overview-wrap sidebar-panel"</span>&gt;</span></span><br><span class="line">  &#123;&#123; partial('_partials/sidebar/site-overview.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 插入下列代码 --&gt;</span></span><br><span class="line">  &#123;&#123; partial('_partials/sidebar/netease-cloud-music.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject('sidebar') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过值得注意的是，虽然插件能用，但由于博客渲染的是多页面，如果是跳到了别的页面，原先播放状态就会被破坏，从用户体验来看，这个功能并不太实用。</p><hr><p><code>Hexo</code> 的介绍就说到这里了，虽然还有一些技巧相关的内容，如果有读者感兴趣的话到时候再深入讲吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们希望有一个受控的博客，来记录或分享一些东西。这个博客的主题内容由你自己来决定，可以是技术分享(编程、汉化分享等)，也可以是生活感想。&lt;/p&gt;&lt;img src=&quot;/blog/2019/08/19/hexo-blog/banner.png&quot;&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="https://anran758.github.io/blog/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="blog" scheme="https://anran758.github.io/blog/tags/blog/"/>
    
      <category term="hexo" scheme="https://anran758.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[环境搭建] 从零开始配置前端开发环境</title>
    <link href="https://anran758.github.io/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/"/>
    <id>https://anran758.github.io/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/</id>
    <published>2019-07-26T01:55:10.000Z</published>
    <updated>2020-06-19T03:57:04.474Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间更换了设备，正好趁着这个机会来记录一下适合前端开发的一个环境，以及推荐提高效率的应用。</p><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p><strong><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a></strong> 是<code>JavaScript</code>运行时，目前前端工程化必不可缺的一个环境。通常我们会选择稳定版本(LTS)进行下载。</p><p><strong><a href="https://www.npmjs.com/get-npm" target="_blank" rel="noopener">NPM</a></strong> 是<code>javascript</code>的包管理工具，也是目前<code>Node.js</code>默认的包管理工具。一般下载了<code>Node.js</code>后会附带<code>npm</code>，不用专门的去下载。</p><p><strong><a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">YARN</a></strong> 是<code>Fackbook</code>开源的依赖管理包，和<code>npm</code>是做同样的工作，但相比<code>npm</code>安装依赖的速度会更加迅速。两者都是讲依赖写入<code>package.json</code>中，在使用习惯上是相近的。</p><p><strong><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></strong> 是最先进的代码版本控制软件。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="关于编辑器"><a href="#关于编辑器" class="headerlink" title="关于编辑器"></a>关于编辑器</h3><p>目前前端开发主流的编辑器有 <a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">sublimeText</a>、<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a>、<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a>，三种主流器各有特点:</p><ul><li><code>sublimeText</code>是一个十分轻巧的编辑器，在 macOS 上下载该软件仅需 15.2MB. 由于轻巧的缘故，很多那你所需的环境需要安装相应的插件，比如你可能需要某个语言的语法高亮，因此你需要在 store 上找到相应插件来提高你开发体验。然后该编辑器是付费软件(虽然可以无限试用</li><li><code>webStorm</code> 是一个功能强大的编辑器，同时也是一个付费软件，并不像<code>sublimeText</code>那样可以无限试用，由于功能太过于齐全，一些低配置的电脑可能会吃不消。以上特点是群友对<code>webStorm</code>的评价，笔者没有使用该编辑器，不过多评论。</li><li><code>vsocde</code> 是由微软开源的一个编辑器，虽然是后起之秀，但开源后该编辑器的设计与体验迅速吸引了一大批用户。它内置了一些前端基础的开发环境，针对<code>Node.js</code>还可以进行短点调试。</li></ul><p>笔者一开始也是<code>sublimeText</code>用户，但自从使用了<code>vscode</code>后就再也回不去了，因为确实是太好用了!</p><p><code>vscode</code>其中有一个插件叫做 <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">setiings sync</a> , 它可以将你的编辑器配置上传至<code>gist</code>。就算你换了一个全新的设备，下载<code>vscode</code>后，再下载该插件，传入<code>Token</code>后就可以同步你所有的配置，十分的方便~</p><p><code>vscode</code>的配置可以查看该文章: <a href="https://anran758.github.io/blog/2018/02/06/dev-zero-configuration-vscode/">[环境搭建] 从零开始配置 vscode</a></p><h3 id="关于浏览器"><a href="#关于浏览器" class="headerlink" title="关于浏览器"></a>关于浏览器</h3><p>前端的工作更多时候是与用户打交道，我们的工作产出通常在浏览器页面上呈现。</p><p>浏览器通常提供了开发者工具以供开发者调试，要选择浏览器作为调试可以先参考目前市面的浏览器份额： 目前市面上主流的浏览器主要就是<a href="https://www.google.com/intl/zh-CN/chrome/" target="_blank" rel="noopener">chrome</a>、<a href="https://www.apple.com/cn/safari/" target="_blank" rel="noopener">Safari</a>、<a href="https://www.apple.com/cn/safari/" target="_blank" rel="noopener">IE/Edge</a>、<a href="opera">opera</a>、<a href="https://www.firefox.com.cn/" target="_blank" rel="noopener">firefox</a>这五种浏览器。国内市场有<code>UC</code>浏览器等，但内核的大多都是采用<code>webkit</code>或者兼容低版本<code>IE</code>内核。</p><p>从 <a href="https://gs.statcounter.com" target="_blank" rel="noopener">statcounter</a> 上我们可以看到浏览器市场份额，选中 <strong>Edit Chart Data</strong>, 再选择 <code>Region</code> 为 <code>China</code>, 我们就能看到中国浏览器市场份额的数据, 以 <strong>2018.07 - 2019.07</strong> 的趋势为例:</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-1.jpg"><p>从统计数据来看目前主要的趋势还是以<code>chrome</code>所使用的<code>webkit</code>内核作为主流，同时<code>chrome</code>的开发者工具对于开发人员十分的友好，因此有很多的开发者选择了该浏览器作为首选的调试工具。<code>chrome</code>还有一个便利就是登陆了谷歌账号后，可以在别的机器上进行同步插件和配置。</p><p>打开<code>chrome</code>，右键页面并选中 “<strong>检查</strong>“即可打开开发者工具，<code>chrome</code>的具体使用参考下面几篇文章:</p><ul><li><a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans" target="_blank" rel="noopener">Chrome 键盘快捷键</a></li><li><a href="http://wiki.jikexueyuan.com/project/chrome-devtools/" target="_blank" rel="noopener">Chrome 开发工具指南</a></li></ul><h3 id="关于设计图"><a href="#关于设计图" class="headerlink" title="关于设计图"></a>关于设计图</h3><p>每个团队的设计师提供的设计图可能是不一致的，有些团队的设计师可能使用<code>Skitch</code>, 一个可以直接导出为<code>html</code>文件的设计图、有些则直接提供<code>PSD</code>文件。</p><p>如果要在两者当中选择，那么我更喜欢<code>PSD</code>的设计图。虽然<code>Skitch</code>导出的设计图可以直接查看每个元素的尺寸，但没有标注和测量的功能。<code>PSD</code>文件通常是源文件，可以在设计软件中打开，可以查看具体设计的详细信息。</p><p>打开<code>PSD</code>文件通常有两种方式：</p><ul><li><code>Photoshop</code>这个著名的设计软件就不必再多说了吧，优点是功能齐全，你想要的这里都有，缺点是具备一定的学习成本，功能繁多带来的问题就是眼花缭乱。</li><li><a href="https://www.fancynode.com.cn/pxcook" target="_blank" rel="noopener">PxCook</a> 就是专门为前端与设计师协作的工具，阉割了开发所用不到的功能，具备各种标注于测量。</li></ul><h2 id="扩展应用"><a href="#扩展应用" class="headerlink" title="扩展应用"></a>扩展应用</h2><p>有了以上的环境其实就可以投入开发了，但实际工作中还是不太够用，我们需要添加一些好用插件或者工具可以增加效率~</p><h3 id="chrome-插件"><a href="#chrome-插件" class="headerlink" title="chrome 插件"></a>chrome 插件</h3><p>下面推荐一些比较好用的开发类插件，但链接需要科学上网才能访问：</p><p><strong><a href="https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl" target="_blank" rel="noopener">Markdown Preview Plus</a></strong><br><code>markdown</code> 是程序员最常用的一个文件之一，默认情况下<code>chomre</code>查看<code>markdown</code>是无格式文字展示，可以安装此插件将<code>markdown</code>格式为文档。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-2.jpg"><p><strong><a href="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd" target="_blank" rel="noopener">Enhanced GitHub</a></strong><br>该插件将增强<code>github</code>的功能，能显示仓库的大小，能够支持下载单个文件等。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-3.jpg"><p><strong><a href="https://chrome.google.com/webstore/detail/github-hovercard/mmoahbbnojgkclgceahhakhnccimnplk" target="_blank" rel="noopener">GitHub Hovercard</a></strong><br>该插件提供 <strong>hover card</strong>, 显示用户信息、仓库信息、issue、ccommit 信息等。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-4.jpg"><p><strong><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc" target="_blank" rel="noopener">JSONView</a></strong><br><code>JSON</code>是一个通用的数据格式，无论是前端还是后端都会跟这个数据格式打交道，有时我们直接在URL打开会返回<code>JSON</code>接口后，会在页面上显示一串字符串对象，并不太方便阅读数据。</p><p>该插件就是格式化返回的<code>JSON</code>, 使其美观。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-5.jpg"><p><strong><a href="https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj" target="_blank" rel="noopener">NIM(Node.js 调试管理工具)</a></strong><br><code>Node.js</code>的调试工具，具体教程商城页有介绍。</p><p><strong><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">Vue.js devtools</a>、<a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">Redux DevTools</a>、<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="noopener">React Developer Tools</a></strong><br>对应前端框架开发必备的 <code>devtools</code>，需要的时候再安装也不迟。</p><p><strong><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">Proxy SwitchyOmega</a></strong><br>开发中还是必不可免会有使用代理的情况，该插件可以轻松快捷地管理和切换多个代理设置。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><strong><a href="https://www.getpostman.com/downloads/" target="_blank" rel="noopener">Postman</a></strong><br><code>Postman</code>是一个跨平台的应用，它拥有完整的<code>API</code>开发环境，该应用前后端的朋友都能使用的了。在<code>Chrome</code>插件商城中你也能找到它，安装后会自动将该应用离线下载至本地。如果你更偏爱于命令行，可以尝试<code>curl</code>。</p><p><strong><a href="https://www.Sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a></strong><br>Sourcetree 是<code>Git GUI</code>，使用可视化界面来对代码进行版本控制，操作起来会比较友好。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-6.jpg"><h2 id="Mac-环境"><a href="#Mac-环境" class="headerlink" title="Mac 环境"></a>Mac 环境</h2><blockquote><p>针对 macOS 环境的补充</p></blockquote><p><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>: macOS 的包管理器，如果需要使用 macOS 进行开发的话，请务必安装该包！</p><p><a href="https://pilotmoon.com/scrollreverser/" target="_blank" rel="noopener">scrollreverser</a>： 可以将鼠标和触摸板设置不同的方向。</p><p><a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">ShadowsocksX-NG</a>: 查看更广阔知识库的钥匙</p><p><a href="https://github.com/oldj/SwitchHosts/blob/master/README_cn.md" target="_blank" rel="noopener">SwitchHosts</a>: 开发中难免会修改<code>hosts</code>，该款软件可以用于快速切换<code>hosts</code>文件。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-8.jpg"><p><a href="https://iterm2.com/" target="_blank" rel="noopener">iterm2</a>: macOS 默认的终端实际上并不太好用，<code>iterm2</code>的出现就是为了替代默认的重点，它支持<a href="https://iterm2.com/features.html" target="_blank" rel="noopener">更多的功能</a>。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-9.jpg"><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>: 默认的终端或者<code>iterm2</code>的外观并不太美观~ <code>zsh</code>框架能使你的终端颜值更上一步~ 不仅如此，它作为一个框架，有更多的插件和主题可选择，感兴趣的朋友可以深究一下~</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-10.jpg"><hr><p><strong><a href="https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion" target="_blank" rel="noopener">git flow</a></strong><br>该包封装了<code>release</code>、<code>feature</code>、<code>hotfix</code>等项目代码管理流程，减少输入<code>git</code>命令过程。<code>git flow</code>也被封装进了 Sourcetree 中，只不过一个是带有 UI 界面的软件，另一个是直接在命令行使用的包，满足不同人的需求。</p><p>macOS 环境下配置的步骤:</p><ul><li>安装 <a href="https://github.com/nvie/gitflow/wiki/Mac-OS-X" target="_blank" rel="noopener">gitflow</a></li><li>如果你在使用 oy-my-zsh 的话，还可以安装它的插件 <a href="https://github.com/bobthecow/git-flow-completion#installation-for-zsh" target="_blank" rel="noopener">git-flow-completion</a> 来进行 tab 补全命令。</li></ul><hr><p><a href="https://zipzapmac.com/go2shell" target="_blank" rel="noopener">Go2Shell</a>: 在Finder中打开到当前目录的终端窗口。</p><p>安装方法如下：</p><ol><li><p>进入 <a href="https://zipzapmac.com/go2shell" target="_blank" rel="noopener">Go2Shell</a> 的官网，点击 <strong>Free DOWNLOAD</strong> 下载安装包并安装至应用程序</p></li><li><p>直接打开 Go2Shell 的图标进行配置, 在 <strong>Command to execute in terminal</strong> 输入框输入如下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear; <span class="built_in">cd</span> %PATH%;  <span class="built_in">echo</span> -e <span class="string">"Last login: `date`"</span>; <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></li><li><p>点击 <strong>Add Go2Shell button to Finder Toolabar</strong> 安装至工具栏</p></li><li><p>接着就可以在任意 Finder 文件夹中点击 Go2Shell 的图标，就会打开当前目录路径下 shell</p></li></ol><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/go2shell.png" title="go2shell"><h2 id="环境配置常见问题"><a href="#环境配置常见问题" class="headerlink" title="环境配置常见问题"></a>环境配置常见问题</h2><h3 id="解决-Homebrew-下载更新极慢的问题"><a href="#解决-Homebrew-下载更新极慢的问题" class="headerlink" title="解决 Homebrew 下载更新极慢的问题"></a>解决 Homebrew 下载更新极慢的问题</h3><p>更新 <code>Homebrew</code> 总是卡在 <code>updating homebrew...</code>，慢的难以忍受。</p><p>通过 <code>brew update --verbose</code> 可以输出更新的详细信息，可以发现是从储存库拉取代码时下载过慢的问题。</p><p>这个问题很好解决，我们只需要将储存库的源更改为国内的源即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  homebrew github origin =&gt; 阿里云镜像</span></span><br><span class="line">cd "$(brew --repo)"</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  homebrew-core github origin =&gt; 阿里云镜像</span></span><br><span class="line">cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 homebrew</span></span><br><span class="line">brew update --verbose</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间更换了设备，正好趁着这个机会来记录一下适合前端开发的一个环境，以及推荐提高效率的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="https://anran758.github.io/blog/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="https://anran758.github.io/blog/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="macOS" scheme="https://anran758.github.io/blog/tags/macOS/"/>
    
      <category term="chrome" scheme="https://anran758.github.io/blog/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>ant design pro 使用 no-mock 造成 POST 请求被重定向为 GET 请求</title>
    <link href="https://anran758.github.io/blog/2019/07/16/ant-design-redirect-change-method/"/>
    <id>https://anran758.github.io/blog/2019/07/16/ant-design-redirect-change-method/</id>
    <published>2019-07-16T13:37:01.000Z</published>
    <updated>2019-08-19T05:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 ant design pro 的项目遇到了一个奇怪的问题，在输入命令行<code>npm run start:no-mock</code>后，发现预期发出<code>POST</code>请求变成了<code>GET</code>请求，状态码是<code>301</code>永久重定向。而在使用<code>mock</code>数据中不会出现这种问题。</p><a id="more"></a><p>因此使用断点调试，经过一番尝试，逐步检查函数的调用及传参问题，最后也将此问题排除掉了。</p><p>随后想到问题是不是出现在类库身上，接口是基于<code>dva/fetch</code>进行封装的，而<code>dva/fetch</code>又是基于浏览器原生(<code>native code</code>)的<code>fetch</code>进行封装. 使用断点并没有进入<code>fetch</code>内部。</p><p>为了缩小范围，将发出请求的参数和方法从<code>Network</code>中拷贝下来，使用<code>fetch</code>直接调用，发现只要不经过<code>umi</code>类处理就不会出现这种现象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 dva/fetch</span></span><br><span class="line"><span class="comment">// request('/api/login', &#123; method: 'POST', body: &#123;username, password&#125; &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用原生 fetch</span></span><br><span class="line">request(<span class="string">'https://zzz.xxx.com/api/login'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">body</span>: &#123;username, password&#125; &#125;)</span><br></pre></td></tr></table></figure><p>随后在<code>network</code>上我注意到，通过<code>umi</code>处理后的请求<code>URL</code>有点奇怪:</p><p>虽然我没有研究过<code>umi</code>的具体实现细节，但可以推测出<code>umi</code>是通过<code>config</code>拿到<code>proxy.target</code>作为<code>base url</code>. 但项目中<code>target</code>使用的协议是<code>http</code>协议，在实际的<code>network</code>中被转换为了<code>https</code>.</p><p>难不成就是这个在作祟？抱着尝试的态度将<code>target</code>上的协议转为<code>https</code>, 发现就能正常的发出<code>POST</code>请求了。。</p><p>但这样就会很迷茫，真的是<code>umi</code>干的吗？由于该项目基础架构另一个团队上接手上来的，有了很多复杂的因素干扰，<code>method</code>在哪一步进行了转换呢? 然后为了解惑做了一些简单的排查:</p><p>从网络原理来考虑，这种情况应该是在客户端发生的，为了排除服务端重定向的嫌疑，使用了抓包查看了没有经过浏览器格式的报文信息，确定了是客户端的问题。接着去看了部分源码也没有看到相关的逻辑。</p><p>最后近期业务量还挺重的，因此在此文记录一下，后序会继续关注一下这个问题，了解到原因再回来补充。</p><p>由于项目是运行在内网中，因此没有升级<code>umi</code>最新版本(内网可能没有最新的版本的镜像), 也有可能在最新版已经修复但没有继续尝试了。如果有遇到相同问题的同学可以了解一下这个情况。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"umi"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="attr">"umi-plugin-react"</span>: <span class="string">"^1.0.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在 ant design pro 的项目遇到了一个奇怪的问题，在输入命令行&lt;code&gt;npm run start:no-mock&lt;/code&gt;后，发现预期发出&lt;code&gt;POST&lt;/code&gt;请求变成了&lt;code&gt;GET&lt;/code&gt;请求，状态码是&lt;code&gt;301&lt;/code&gt;永久重定向。而在使用&lt;code&gt;mock&lt;/code&gt;数据中不会出现这种问题。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="https://anran758.github.io/blog/categories/react/"/>
    
    
      <category term="HTTP" scheme="https://anran758.github.io/blog/tags/HTTP/"/>
    
      <category term="ant design pro" scheme="https://anran758.github.io/blog/tags/ant-design-pro/"/>
    
      <category term="react" scheme="https://anran758.github.io/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>在本地测试微信登录</title>
    <link href="https://anran758.github.io/blog/2019/05/18/wechat-pc-login/"/>
    <id>https://anran758.github.io/blog/2019/05/18/wechat-pc-login/</id>
    <published>2019-05-18T09:23:12.000Z</published>
    <updated>2019-08-19T05:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做微信登录的时候，希望能在本地能够测试登录。这里使用的是<strong>微信开放平台</strong>的<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&lang=zh_CN" target="_blank" rel="noopener">网站应用微信登录</a>, 与<strong>微信公众平台</strong>不同，<strong>微信开放平台</strong>并没有提供测试号的服务，因此在调试起来会十分的麻烦。比较传统的方法就是部署上测试服务器上专门先测试这一个接口。但从流程上来说，会比较麻烦，不够高效。下文将分享另一种测试的过程。</p><a id="more"></a><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>首先在页面引入微信的<code>js</code>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在登录页上实例化登录对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login.vuw --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"login_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// other code ...</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// other code ...</span></span></span><br><span class="line"></span><br><span class="line">    mounted() &#123;</span><br><span class="line">        APIs.login(&#123;</span><br><span class="line"><span class="actionscript">            redirect_uri: Base64.encode(<span class="string">'http://apitest.anran758.com'</span>)</span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">/* eslint-disable no-new */</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">new</span> WxLogin(&#123;</span></span><br><span class="line"><span class="actionscript">                    id: <span class="string">'login_container'</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// appid: "",</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// scope: "",</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// redirect_uri: "",</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// state: "",</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// style: "",</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// href: ""</span></span></span><br><span class="line">                    ...res.data</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>WxLogin</code>接收一个对象，对象属性如下所示。其中对象里的<code>appid</code>, <code>scope</code>，<code>redirect_uri</code>, <code>state</code>四个属性是由后端控制返回的。</p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>self_redirect</td><td>否</td><td>true：手机点击确认登录后可以在 iframe 内跳转到 redirect_uri，false：手机点击确认登录后可以在 top window 跳转到 redirect_uri。默认为 false。</td></tr><tr><td>id</td><td>是</td><td>第三方页面显示二维码的容器id</td></tr><tr><td>appid</td><td>是</td><td>应用唯一标识，在微信开放平台提交应用审核通过后获得</td></tr><tr><td>scope</td><td>是</td><td>应用授权作用域，拥有多个作用域用逗号（,）分隔，网页应用目前仅填写snsapi_login即可</td></tr><tr><td>redirect_uri</td><td>是</td><td>重定向地址，需要进行UrlEncode</td></tr><tr><td>state</td><td>否</td><td>用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验</td></tr><tr><td>style</td><td>否</td><td>提供”black”、”white”可选，默认为黑色文字描述。详见文档底部FAQ</td></tr><tr><td>href</td><td>否</td><td>自定义样式链接，第三方可根据实际需求覆盖默认样式。详见文档底部FAQ</td></tr></tbody></table><p>该方法会生成一个二维码，并挂载到指定的容器 ID 上。用户扫描二维码时，页面会向微信服务端发送一个请求等待用户确认，用户确认完成后，就会将页面重定向至指定的路径（redirect_uri）。</p><p>那么现在问题就来了：重定向的地址要跟<strong>微信开放平台</strong>里设置的重定向的域名一致，就是说我们在本地开发起的<code>localhost:8080</code>这种是不行的。<br>这时我们就会想到了去修改<code>hosts</code>，但光改<code>hosts</code>是不行，还需要改端口。。这时就可以用到<code>shistle</code>了。</p><h2 id="shistle"><a href="#shistle" class="headerlink" title="shistle"></a>shistle</h2><p><a href="https://github.com/avwo/whistle" target="_blank" rel="noopener">whistle</a>是基于Node实现的跨平台web调试代理工具，主要用于查看、修改HTTP、HTTPS、Websocket的请求、响应，也可以作为HTTP代理服务器使用。我们可以使用它来进行转发：</p><img data-src="/blog/2019/05/18/wechat-pc-login/whistle.png"><p>通过 npm 来安装 whistle:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 whistle</span></span><br><span class="line">npm install -g whistle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 whistle</span></span><br><span class="line">w2 start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定端口号来启动 whistle</span></span><br><span class="line">w2 start -p 9000</span><br></pre></td></tr></table></figure><p>安装完毕后命令行提示我们可以进入 whistle 的控制台(默认启动的 URL 是 127.0.0.1:8899)，但此时还不能直接抓包，还需要配置代理才可以使用.</p><p>配置代理可以使用全局代理或浏览器代理，比较推荐的做法是使用后者。我个人习惯使用<code>chrome</code>浏览器，因此可以安装 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">SwitchyOmega</a> 代理插件，将 shistle 的配置信息填入，保存配置后记得切换插件的模式噢。</p><img data-src="/blog/2019/05/18/wechat-pc-login/setting-proxy.png"> <img data-src="/blog/2019/05/18/wechat-pc-login/open-plugin.png"><p>想要拦截<code>HTPPS</code>的请求的话，还需要<a href="http://wproxy.org/whistle/webui/https.html" target="_blank" rel="noopener">安装根证书</a>,</p><img data-src="/blog/2019/05/18/wechat-pc-login/https.gif"><p>接着进入 whistle 的控制台, 点进<a href="http://127.0.0.1:8899/#rules" target="_blank" rel="noopener">rules</a>, 配置需要代理或转发的地址。这个配置规则类似于设置 hosts.</p><img data-src="/blog/2019/05/18/wechat-pc-login/rules.png"><p>设置好 rules 后，将本地开发的的网址<code>http://localhost:8020/#/login</code>替换为<code>http://test.anran758:8020/#/login</code>再进行测试登录，登录完毕后就能拿到用户数据了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/avwo/whistle/blob/master/README-zh_CN.md" target="_blank" rel="noopener">whistle</a></li><li><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&lang=zh_CN" target="_blank" rel="noopener">网站应用微信登录开发指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做微信登录的时候，希望能在本地能够测试登录。这里使用的是&lt;strong&gt;微信开放平台&lt;/strong&gt;的&lt;a href=&quot;https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&amp;lang=zh_CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网站应用微信登录&lt;/a&gt;, 与&lt;strong&gt;微信公众平台&lt;/strong&gt;不同，&lt;strong&gt;微信开放平台&lt;/strong&gt;并没有提供测试号的服务，因此在调试起来会十分的麻烦。比较传统的方法就是部署上测试服务器上专门先测试这一个接口。但从流程上来说，会比较麻烦，不够高效。下文将分享另一种测试的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="微信开发" scheme="https://anran758.github.io/blog/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信开发" scheme="https://anran758.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
      <category term="微信登录" scheme="https://anran758.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/"/>
    
      <category term="shistle" scheme="https://anran758.github.io/blog/tags/shistle/"/>
    
      <category term="网站应用" scheme="https://anran758.github.io/blog/tags/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>[UI组件] 来做一个可配置的滑块进度条吧</title>
    <link href="https://anran758.github.io/blog/2019/05/03/minp-customize-slider/"/>
    <id>https://anran758.github.io/blog/2019/05/03/minp-customize-slider/</id>
    <published>2019-05-03T12:51:37.000Z</published>
    <updated>2019-08-19T05:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一些需要用户填写资料的业务场景中，有时会让用户选择某个业务的范围，这时就需要用到滑块进度条。然后你们最爱的产品经理会说，给我整一个颜色可控，滑块按钮可大可小，滑块边框也要可大可小的滑动条来..</p><a id="more"></a><p>emmm，一看这样的设计需求就意味着小程序原生的<a href="https://developers.weixin.qq.com/miniprogram/dev/component/slider.html" target="_blank" rel="noopener">slider</a>组件就不能用了。因为这玩意在样式上就不能自由的配置，只好来手动实现一个。</p><hr><h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><img data-src="/blog/2019/05/03/minp-customize-slider/slider-bar.png" title="slider-bar"><p>行吧，那说干就干。首先滑动条可以从俯视图角度来看，分为三层。分别是<code>底部滑轨区域</code>，<code>进度条区域</code>以及供用户操作的<code>滑块</code>本身。</p><p>在结构设计中，可以将<code>底部滑轨区域</code>，<code>进度条区域</code>分为一块，这样<code>进度条区域</code>可以根据随着滑动条的高度变化而变化, 宽度则由<code>js</code>控制。除此之外还需要暴露一些参数给外部，让它自己定义长粗宽。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的属性列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// 滑块大小</span></span><br><span class="line">        blockSize: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">32</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑块宽度</span></span><br><span class="line">        blockBorderWidth: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑轨高度</span></span><br><span class="line">        height: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑轨进度</span></span><br><span class="line">        step: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进度值小数位</span></span><br><span class="line">        digits: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"slider-wrap"</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>  <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slider-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span>,</span><br><span class="line"><span class="selector-class">.silder-bg-inner</span>,</span><br><span class="line"><span class="selector-class">.silder-block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span>,</span><br><span class="line"><span class="selector-class">.silder-bg-inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2</span>rpx;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg-inner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#66a6ff</span>;</span><br><span class="line">    <span class="comment">/* border-radius: 8rpx; */</span></span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-block</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">3</span>rpx <span class="number">#66a6ff</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击行为事件"><a href="#点击行为事件" class="headerlink" title="点击行为事件"></a>点击行为事件</h2><blockquote><p>滑块进度条的<code>滑块</code>是一个听话的小朋友，就是说我们叫它去哪它就听话的过去。所以就不要抓它去煲汤了~</p></blockquote><p>在组件外部容器中绑定一个点击事件，我们必须得要知道用户点击位置，在<code>bind:tap</code>事件中取到<code>clientX</code>属性。除此之外还需要取到进度条的位置信息。</p><p>得到两个关键数据后，将用户点击的位置<code>ClintX</code>与进度条组件的偏移量<code>offset</code>相减，得出相对于组件内的进度<code>progress</code>.<br>再用组件的宽度<code>width</code>减去<code>progress</code>乘于<code>100</code>得到目前进度的百分比<code>percentage</code>。<br>同时为了防止进度条超出进度条</p><p>如下图所示：<code>((191 - 36) / 301) * 100 ≈ 52</code></p><img data-src="/blog/2019/05/03/minp-customize-slider/offset.png" title="关系示意图"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ...other --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        containerInfo: <span class="literal">null</span>,</span><br><span class="line">        percentage: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ready() &#123;</span><br><span class="line">        <span class="comment">// 取到滑块进度条的位置信息</span></span><br><span class="line">        wx.createSelectorQuery().in(<span class="keyword">this</span>)</span><br><span class="line">            .select(<span class="string">'.slider-wrap'</span>)</span><br><span class="line">            .boundingClientRect(<span class="function">(<span class="params">rect</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rect) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.data.container = rect;</span><br><span class="line">                <span class="keyword">this</span>._initBloackPos();</span><br><span class="line">            &#125;).exec()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击进度条</span></span><br><span class="line">    tappingSlider(evt) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">        <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要做边界处理</span></span><br><span class="line">        <span class="keyword">const</span> perc = <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(perc);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setData(&#123; percentage &#125;);</span><br><span class="line">        <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123;</span><br><span class="line">              value: percentage.toFixed(digits) * <span class="number">1</span></span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算相对容器的偏移距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">x</span></span> - X 坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">offset</span></span> - 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">maxVal</span></span> - 在 maxVal 范围内求百分比</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _computeOffset(x, offset, maxVal) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; width &#125; = <span class="keyword">this</span>.data.containerInfo;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 底层保证一定精度</span></span><br><span class="line">        <span class="keyword">return</span> (((x - offset) / width) * maxVal).toFixed(<span class="number">4</span>) * <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 边界处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">num</span></span> - 待处理的最值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">maxNum</span></span> - num 最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">minNum</span></span> - num 最小值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _boundaryHandler(num, maxNum = <span class="number">100</span>, minNum = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num &gt; maxNum ? maxNum : (num &lt; minNum ? minNum : num);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span> <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;percentage&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>虽然实现了点击滑动到指定位置的功能，但仔细一看还是有一些瑕疵的~ 当我们点击到百分百时，<code>滑块</code>超出原先设定的容器宽度。</p><p>超出的原因是因为在布局上，我们使用绝对定位<code>absolute</code>，通过设置滑块<code>left</code>属性来控制滑块位置的。<br>偏移量中还包含了滑块自身的宽度，因此还需要对滑块的偏移量做一定的处理，去掉自身宽度再获取百分比。</p><p>在文章开头我们已经暴露了一个<code>blockSize</code>的属性，利用该属性可以计算滑块的最大偏移量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        <span class="comment">// other data...</span></span><br><span class="line"></span><br><span class="line">        _blockOffset: <span class="number">0</span>,</span><br><span class="line">        _maxDistance: <span class="number">100</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 点击进度条</span></span><br><span class="line">        tappingSlider(evt) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(</span><br><span class="line">                computeOffset(_maxDistance), _maxDistance</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(computeOffset(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setData(&#123; _blockOffset, percentage &#125;);</span><br><span class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123; <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- other code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如此，该事件就完成啦~</p><h2 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h2><p>完成点击事件后，我们还得让它能进行自由的滑动。进度条组件的拖动的流程大致是：<code>点击滑块</code> -&gt; <code>拖动滑块</code> -&gt; <code>释放滑块</code>这三个步骤。</p><p>因此跟H5的思路一样，我们只需监听<code>touchmove</code>、<code>touchstatr</code>、<code>touchend</code>三个事件。</p><p>首先先监听<code>touchmove</code>，用户点击滑块后，记录当前的<code>clientX</code>属性, 随后还需要记录当前<code>进度</code>和滑块的<code>偏移量</code>；<br><code>touchmove</code>事件则由外层容器相关联，并更新滑动的距离。由于<code>touchmove</code>里针对<code>拖动事件</code>逻辑不能被随便触发，因此需要加一个标识的锁；<br>在<code>touchend</code>事件触发后释放锁即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onTouchStart(evt) &#123;</span><br><span class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录原始坐标</span></span><br><span class="line">            <span class="keyword">this</span>.data.originPos = <span class="keyword">this</span>.data._blockOffset;</span><br><span class="line">            <span class="keyword">this</span>.data.originPercentage = <span class="keyword">this</span>.data.percentage;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.data._startTouchX = evt.changedTouches[<span class="number">0</span>].clientX;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑块移动</span></span><br><span class="line">        onTouchMove(evt) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; moving, containerInfo &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!moving || !containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123;</span><br><span class="line">                digits,</span><br><span class="line">                originPos,</span><br><span class="line">                originPercentage,</span><br><span class="line">                _startTouchX,</span><br><span class="line">                _maxDistance</span><br><span class="line">            &#125; = <span class="keyword">this</span>.data;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, _startTouchX, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> perc = originPercentage + computeOffset(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(perc);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> offset = originPos + computeOffset(_maxDistance);</span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(offset, _maxDistance);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setData(&#123; percentage, _blockOffset &#125;);</span><br><span class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123;</span><br><span class="line">                value: percentage.toFixed(digits) * <span class="number">1</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        onTouchEnd(evt) &#123;</span><br><span class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span> <span class="attr">bindtap</span>=<span class="string">"tappingSlider"</span> <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindtouchstart</span>=<span class="string">"onTouchStart"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindtouchend</span>=<span class="string">"onTouchEnd"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>滑块进度条</code>组件的实现~ 实际上该组件还有更多可供配置的地方，如颜色值，背景控制等这些比较基础的东西就不继续展开讲啦~<br>本文是以小程序进行示例。但思路是共通的，也可以使用同样思路在<code>H5</code>实现，只不过是 API 的差异罢了~</p><p><a href="https://developers.weixin.qq.com/s/Oc79f7mv7K8N" target="_blank" rel="noopener">微信代码片段</a>, 可以直接拿来就用。</p><hr><p>2019/05/04 更新：</p><p>后面又重新看了一遍，发现该组件还是有可优化的空间：</p><p>操作不必局限于滑块上，可以将<code>bindtap</code>事件废弃，其余的所有事件都代理到最外部的节点中。<code>touchstar</code>的同时就渲染位置信息，还允许它自由的滑动:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"slider-wrap"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchstart</span>=<span class="string">"onTouchStart"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchmove</span>=<span class="string">"onTouchMove"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchend</span>=<span class="string">"onTouchEnd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"silder-bg"</span> <span class="attr">style</span>=<span class="string">"height: &#123;&#123;height&#125;&#125;rpx;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"silder-bg-inner"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"silder-block"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// other options ...</span></span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// other method ...</span></span><br><span class="line">        onTouchStart(evt) &#123;</span><br><span class="line">            <span class="keyword">this</span>.data.moving = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="keyword">this</span>.data;</span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._computeOffset(clientX, containerInfo.left, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="keyword">this</span>._boundaryHandler(</span><br><span class="line">                computeOffset(_maxDistance), _maxDistance</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="keyword">this</span>._boundaryHandler(computeOffset(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录原始坐标</span></span><br><span class="line">            <span class="keyword">this</span>.data.originPos = _blockOffset;</span><br><span class="line">            <span class="keyword">this</span>.data.originPercentage = percentage;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.data._startTouchX = clientX;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setData(&#123; _blockOffset, percentage &#125;);</span><br><span class="line">            <span class="keyword">this</span>.triggerEvent(<span class="string">'change'</span>, &#123; <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://developers.weixin.qq.com/s/XpaZV7mn7t8L" target="_blank" rel="noopener">微信代码片段 v0.0.2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一些需要用户填写资料的业务场景中，有时会让用户选择某个业务的范围，这时就需要用到滑块进度条。然后你们最爱的产品经理会说，给我整一个颜色可控，滑块按钮可大可小，滑块边框也要可大可小的滑动条来..&lt;/p&gt;
    
    </summary>
    
      <category term="小程序开发" scheme="https://anran758.github.io/blog/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="小程序开发" scheme="https://anran758.github.io/blog/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="UI组件" scheme="https://anran758.github.io/blog/tags/UI%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>H5微信支付所遇到的若干问题</title>
    <link href="https://anran758.github.io/blog/2019/02/23/h5-cookie-lost/"/>
    <id>https://anran758.github.io/blog/2019/02/23/h5-cookie-lost/</id>
    <published>2019-02-23T11:35:35.000Z</published>
    <updated>2019-08-19T05:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了个H5微信支付的需求，记录一下所遇到的一些问题。。</p><a id="more"></a><h2 id="cookie-丢失的问题"><a href="#cookie-丢失的问题" class="headerlink" title="cookie 丢失的问题"></a>cookie 丢失的问题</h2><p>在H5页面中，一开始我们是需要拿到微信用户的信息。因此需要调用获取用户的接口。<br>在第一次调用该接口时，需要有一个授权的过程。没有拿到用户信息的话，就需要调取授权让用户确认。</p><p>然后问题就来了<del>授权完成后，会发现后端是拿不到<code>cookie</code>信息。经过查询资料后发现原来还是跨域在作祟</del><br>虽然我们解决了基本的跨域问题，即域名(origin)的不同。但是默认情况下跨域请求不会发送<code>cookie</code>.</p><p>这时前端需要设置<code>XHR</code>的<code>withCredentials: true</code>, 后端也需要配合设置<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials" target="_blank" rel="noopener">Access-Control-Allow-Credentials</a>即可。</p><p>以 <code>axios</code> 为例, <code>withCredentials: true</code> 与 <code>data</code> 平级:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opt = &#123;</span><br><span class="line">  url: <span class="string">'/user'</span>,</span><br><span class="line">  method: <span class="string">'get'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'jojo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  withCredentials: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios(opt).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><p>这种情况一般是前后端项目不在同一个域名的情况下，且需要带凭证的场景需要设置<code>Credentials</code>。</p><h2 id="url未注册-url-not-registered"><a href="#url未注册-url-not-registered" class="headerlink" title="url未注册(url not registered)"></a>url未注册(url not registered)</h2><p>随后微信弹了一下<code>url not registered</code>的错误，检查支付目录已经正确的被配置。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&index=6" target="_blank" rel="noopener">微信内H5调起支付</a></li><li><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3" target="_blank" rel="noopener">jsapi 开发流程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了个H5微信支付的需求，记录一下所遇到的一些问题。。&lt;/p&gt;
    
    </summary>
    
      <category term="h5" scheme="https://anran758.github.io/blog/categories/h5/"/>
    
    
      <category term="cookie" scheme="https://anran758.github.io/blog/tags/cookie/"/>
    
      <category term="h5" scheme="https://anran758.github.io/blog/tags/h5/"/>
    
      <category term="微信" scheme="https://anran758.github.io/blog/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信支付" scheme="https://anran758.github.io/blog/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>在微信小程序中保存网络图片</title>
    <link href="https://anran758.github.io/blog/2019/02/11/miniprograms-download-image/"/>
    <id>https://anran758.github.io/blog/2019/02/11/miniprograms-download-image/</id>
    <published>2019-02-11T13:55:37.000Z</published>
    <updated>2019-08-19T05:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在小程序的文档中我们得知，<a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.saveImageToPhotosAlbum.html" target="_blank" rel="noopener">wx.saveImageToPhotosAlbum</a> 是用来保存图片到相册的。</p><p>但是仔细一看会发现这个接口的<code>filePath</code>参数只接受临时文件路径或永久文件路径，不支持网络图片路径，意味着我们不能直接调用这个接口。。</p><a id="more"></a><p>因此先需要把该文件下载至本地，使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.downloadFile.html?search-key=downloadFile" target="_blank" rel="noopener">wx.downloadFile</a> 。</p><p>但值得注意的是<strong>小程序只可以跟指定的域名与进行网络通信</strong>，也就是说下载图片之前，我们需要先去<strong>微信公众者平台</strong>的开发设置里设置<code>uploadFile合法域名</code>。</p><p>示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"qr-code"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">bindtap</span>=<span class="string">"saveImage"</span>&gt;</span>保存图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">'https://avatars3.githubusercontent.com/u/23024075?s=460&amp;v=4'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存图片</span></span><br><span class="line">  saveImage() &#123;</span><br><span class="line">    <span class="keyword">this</span>.wxToPromise(<span class="string">'downloadFile'</span>, &#123;</span><br><span class="line">        url: <span class="keyword">this</span>.data.url</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.wxToPromise(<span class="string">'saveImageToPhotosAlbum'</span>, &#123;</span><br><span class="line">        filePath: res.tempFilePath</span><br><span class="line">      &#125;))</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        wx.showToast(&#123; <span class="attr">title</span>: <span class="string">'保存成功~'</span>,<span class="attr">icon</span>: <span class="string">'none'</span> &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(err) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是用户自己取消的话保存图片的话</span></span><br><span class="line">        <span class="comment">// if (~err.errMsg.indexOf('cancel')) return;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将 callback 转为易读的 promise</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span>[promise]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  wxToPromise(method, opt) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      wx[method](&#123;</span><br><span class="line">        ...opt,</span><br><span class="line">        success(res) &#123;</span><br><span class="line">          opt.success &amp;&amp; opt.success();</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail(err) &#123;</span><br><span class="line">          opt.fail &amp;&amp; opt.fail();</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后理论上就可以保存图片了… 用户第一次在我们的小程序使用保存图片这个功能是会弹出一个授权弹框，如果用户手滑点了拒绝授权后再点一次保存图片，然后就会发现什么反应都没有了。。。</p><p>出现这样的原因是因为这个授权弹框只会出现一次，所以我们得想办法再让用户重新授权一次。这时就想到使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.authorize.html" target="_blank" rel="noopener">wx.authorize</a> .</p><p>但是经过测试后发现，使用 <code>wx.authorize</code> 后，会报 <code>authorize:fail auth deny</code> 的错误。然后经过查阅资料得知：</p><blockquote><ul><li>如果用户未接受或拒绝过此权限，会弹窗询问用户，用户点击同意后方可调用接口；</li><li>如果用户已授权，可以直接调用接口；</li><li>如果用户已拒绝授权，则不会出现弹窗，而是直接进入接口 fail 回调。请开发者兼容用户拒绝授权的场景。</li></ul></blockquote><p>emmm… 那这样效果当然不符合我们预期，只能在换一种方式。这时就想到了使用<code>&lt;button open-type=&quot;openSetting&quot;/&gt;</code>，在交互上做一个提示弹框，引导用户重新授权：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"qr-code"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">bindtap</span>=<span class="string">"saveImage"</span>&gt;</span>保存图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简陋版提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;showDialog&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"dialog-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dialog"</span>&gt;</span></span><br><span class="line">    这是一段提示用户授权的提示语</span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"btn"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">open-type</span>=<span class="string">"openSetting"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindtap</span>=<span class="string">"confirm"</span> &gt;</span></span><br><span class="line">         授权</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">bindtap</span>=<span class="string">"cancel"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">'https://avatars3.githubusercontent.com/u/23024075?s=460&amp;v=4'</span>,</span><br><span class="line">    showDialog: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  saveImage() &#123;</span><br><span class="line">    <span class="keyword">this</span>.wxToPromise(<span class="string">'downloadFile'</span>, &#123;</span><br><span class="line">        url: <span class="keyword">this</span>.data.url</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.wxToPromise(<span class="string">'saveImageToPhotosAlbum'</span>, &#123;</span><br><span class="line">        filePath: res.tempFilePath</span><br><span class="line">      &#125;))</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="comment">// this.hide();</span></span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">'保存成功~'</span>,</span><br><span class="line">          icon: <span class="string">'none'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">&#123; errMsg &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(errMsg)</span><br><span class="line">        <span class="comment">// if (~errMsg.indexOf('cancel')) return;</span></span><br><span class="line">        <span class="keyword">if</span> (!~errMsg.indexOf(<span class="string">'auth'</span>)) &#123;</span><br><span class="line">          wx.showToast(&#123; <span class="attr">title</span>: <span class="string">'图片保存失败，稍后再试'</span>, <span class="attr">icon</span>: <span class="string">'none'</span> &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 调用授权提示弹框</span></span><br><span class="line">          <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            showDialog: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// callback to promise</span></span><br><span class="line">  wxToPromise(method, opt) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      wx[method](&#123;</span><br><span class="line">        ...opt,</span><br><span class="line">        success(res) &#123;</span><br><span class="line">          opt.success &amp;&amp; opt.success();</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail(err) &#123;</span><br><span class="line">          opt.fail &amp;&amp; opt.fail();</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  confirm() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      showDialog:<span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  cancel() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      showDialog: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后这样就完成啦~</p><hr><p><a href="https://developers.weixin.qq.com/s/SoOhi6mX7D6Y" target="_blank" rel="noopener">微信代码片段点这里</a>, 该功能需要添加<code>appid</code>才能进行正常的测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在小程序的文档中我们得知，&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/wx.saveImageToPhotosAlbum.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wx.saveImageToPhotosAlbum&lt;/a&gt; 是用来保存图片到相册的。&lt;/p&gt;&lt;p&gt;但是仔细一看会发现这个接口的&lt;code&gt;filePath&lt;/code&gt;参数只接受临时文件路径或永久文件路径，不支持网络图片路径，意味着我们不能直接调用这个接口。。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序开发笔记 - 小程序项目的结构设计</title>
    <link href="https://anran758.github.io/blog/2018/11/23/miniprogrmas-build-frame/"/>
    <id>https://anran758.github.io/blog/2018/11/23/miniprogrmas-build-frame/</id>
    <published>2018-11-23T07:15:48.000Z</published>
    <updated>2019-08-19T07:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2018/11/23/miniprogrmas-build-frame/banner.png"><p>在工作中也做了好几个小程序项目了，正好抽空将小程序开发的一些知识重新整理一下~</p><a id="more"></a><h2 id="简要认识小程序开发"><a href="#简要认识小程序开发" class="headerlink" title="简要认识小程序开发"></a>简要认识小程序开发</h2><p>其中小程序的构成是由<code>.wxml</code>、<code>.wxss</code>、<code>.js</code>、<code>.json</code>四种类型构成(下文将简称为四类文件)。其开发方式跟传统网页开发是十分类似的。</p><ul><li><code>.wxml</code>模板文件对应为传统网页开发的<code>.html</code>文件，是一个页面(组件)的骨架。只不过它里面采用的语法跟传统的<code>HTML</code>语法有些差异, 比如标签的名称是微信自己在底层封装的组件。</li><li><code>.wxss</code>样式文件则对应<code>CSS</code>样式文件，具有大部分<code>CSS</code>的特性(比如<code>css3</code>的某些伪类特性就没有，但常见的<code>css3</code>属性倒是可以用)，除此之外还在此基础上做了新的扩展。</li><li><code>js</code>一直都是作为跟页面交互角色，在小程序开发中也不例外。<br>在<code>js</code>中，可以使用微信提供的<code>API</code>。如常见的<code>Page</code>(构造器)和<code>Component</code>，还有微信给出的一些特定权限的API.</li><li><code>json</code>则是配置文件，一般是页面或者组件内那一级的配置文件。</li></ul><p>(这里有个小细节可以区分<code>wxml</code>和<code>wxss</code>区别，这两者都是以<code>wx(微信)</code>为开头，后面的小尾巴是区别是样式文件还是模板文件)。</p><p>具体的更多细节可以去看<a href="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/file.html" target="_blank" rel="noopener">官网文档</a>。本文的重心还是在讨论项目结构如何安排会比较整洁合理。</p><h2 id="项目结构设计思路"><a href="#项目结构设计思路" class="headerlink" title="项目结构设计思路"></a>项目结构设计思路</h2><p>每个小程序项目的根目录会有一个<code>project.config.json</code>的项目配置文件，可以设置<code>miniprogramRoot</code>属性指定小程序源码的目录, 默认为根目录(<code>/</code>)。意思是说把源代码放在<code>/src/</code>下的目录也没有问题，笔者采用的是源码在根目录方式。</p><p>首先，小程序规定：一个小程序<strong>主体部分</strong>由三个文件组成，同时必须放在项目的根目录。</p><ul><li><code>app.js</code> 需要在里面调用<code>App()</code>函数，注册一个小程序。</li><li><code>app.json</code> 小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</li><li><code>app.wxss</code> 全局样式，作用于每一个页面。但注意的是<code>app.wxss</code>写的全局样式不会影响组件内的样式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>小程序是由许多页面组成的，因此我们需要一个目录来存放页面, 我们通常把这个文件夹命名为<code>/pages/</code>。<code>app.json</code>的<code>pages</code>是一个数组，数组的每一项是用来指定页面的路径，框架会根据路径自动去寻找相对位置的四类文件(小程序的代码构成)。数组第一项为小程序入口页面。</p><p>每个页面为单独的一个目录, 页面的四类文件使用统一的名称。这里我们跟官方同步，四类文件跟随目录的名称走:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── pages</span><br><span class="line">│   │── home</span><br><span class="line">│   │   ├── home.wxml</span><br><span class="line">│   │   ├── home.js</span><br><span class="line">│   │   ├── home.json</span><br><span class="line">│   │   └── home.wxss</span><br><span class="line">│   └── user</span><br><span class="line">│       ├── user.wxml</span><br><span class="line">│       └── user.js</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>除此之外，在开发小程序时，页面是会分主要页面和次要页面(子页)，子页通常是一些列表页详情页的东西。理论上只会有一个入口能跳的过去那种二级页面。如果这样的子页一多，然后全都放在了<code>/pages/</code>目录下，就会导致目录列表变得庞大，会比较难找…</p><p>这时可以考虑换一种方式储存，在页面文件夹里再加一个文件夹, 名为<code>subpage</code>。把子页放在这个文件夹内，这样层级关系就清晰了，缺点就是不适合套太深。或者说一个产品也不应该把页面藏得太深让用户找不到…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── pages</span><br><span class="line">│   └── home</span><br><span class="line">│       ├── subpage</span><br><span class="line">│       │   └── detail</span><br><span class="line">│       │       ├── index.wxml</span><br><span class="line">│       │       └── ...</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>至于项目简单一些的话前者会好一点(子页命名参照<code>master-description</code>的格式)，页面太过复杂的话可能会比较推荐使用后者的方式。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>既然有了页面，那么页面必不可免会需要引用到图片。图片大致可以分为<strong>业务类</strong>和<strong>公共类</strong>。一些可以复用的图片我们可以放在同一个地方统一管理。而业务类则放在对应的页面目录下, 命名格式推荐为<code>dir@description</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── iamges (公共图片)</span><br><span class="line">│   │── icon</span><br><span class="line">│   │   ├── icon@download.png</span><br><span class="line">│   │   └── icon@cancel.png</span><br><span class="line">|   └── ...</span><br><span class="line">├── pages</span><br><span class="line">│   └── index</span><br><span class="line">│       ├── images</span><br><span class="line">│       |   └── index@bg.png</span><br><span class="line">│       |   └── index@video.png</span><br><span class="line">│       ├── index.wxml</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       ├── index.json</span><br><span class="line">│       └── index.wxss</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>但值得注意的是，在<strong>js</strong>中使用<code>import</code>引入图片时不能通过根目录进行查找，而<code>wxml</code>则没有这种限制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绝对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">images</span> <span class="attr">src</span>=<span class="string">"/images/icon@download.png"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">images</span> <span class="attr">src</span>=<span class="string">"./images/index@video.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会报错</span></span><br><span class="line"><span class="keyword">import</span> iconDownload <span class="keyword">from</span> <span class="string">'/images/icon@download.png'</span></span><br><span class="line"><span class="comment">// 只能使用相对路径</span></span><br><span class="line"><span class="keyword">import</span> iconDownload <span class="keyword">from</span> <span class="string">'/../../icon@download.png'</span></span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>写完页面后自然需要给页面润色, 我们可以通过在页面的<code>.wxss</code>来写局部样式，这没问题。但在我们完成一个又一个页面后，这时你可能会发现有些页面的样式<strong>重复性</strong>太高了。</p><p>因为一个成熟的设计师，在设计每一个产品时，大多会有一套设计风格或者称之为主题的东西。这些元素大量重复在各个页面中，我们重复写这些样式实际上代码是有点冗余的。</p><img data-src="/blog/2018/11/23/miniprogrmas-build-frame/button.png" title="主题按钮"><p>这时有经验的开发者很自然就会想到将重复性的代码抽出来，所幸微信提供了<code>@import</code>语句可以导入外联样式表。而这些通用的样式可以放在<code>/style/</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── style</span><br><span class="line">│   ├── button.wxss</span><br><span class="line">│   └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>直接在<code>.wxss</code>的顶层引入即可复用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@improt</span> <span class="string">'/style/button.wxss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* other code */</span></span><br></pre></td></tr></table></figure><p>至于是为何不在<code>app.json</code>中设定全局样式而单独抽出来的原因也是前文所提及的问题————组件中默认情况下不受全局样式影响的，理论上组件也不该受到外部样式的”无意“的影响。<br>但<code>app.json</code>中的样式只需要加载一次就全局可用，外部样式就不一定了(因为没有实际的调研过)，而且还需要额外的去做引入的那一步。具体用哪一种方式还是要看具体情况来自己斟酌啦~</p><p>还有一些方法，比如使用<code>scss</code>、<code>less</code>之类的预处理之类的方案，也是可以，只不过超出了本文的讨论范围，不展开讲。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件对于熟悉模块化开发的同学自然不陌生，小程序基础库版本 <code>1.6.3</code> 就开始支持自定义组件了，至今为止也不用担心兼容性的问题了。从笔者角度来看看法，小程序的组件可以分为全局组件和局部组件。</p><p>全局性是指那种封装了登录、弹框、动画组件等等之类的组件，局部的大多是减轻一个页面内的复杂度，通过模块”搭积木”的方式来组成一个页面。即使某个功能砍了也能对页面减少牵连。</p><p>我们习惯于将全局性的东西放在源码的根目录上，因此会在根目录上创建<code>/components</code>文件夹，里面存放全局性的组件。<br>其中全局性的组件有不少会有同等类型的组件，因为可以再进一步的分类，如动画类组件存放为一个文件夹内。<br>再利用编辑器的文件名排序的特性，可以加上<code>@</code>提前组件集合。</p><p>组件下的四类文件按照<code>componment/index</code>的方式命名与<code>page</code>区分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">├── componments (公共组件)</span><br><span class="line">│   │── anima</span><br><span class="line">│   │   ├── coin</span><br><span class="line">│   |   |   ├── index.js</span><br><span class="line">│   |   |   └── ...</span><br><span class="line">│   │   └── liquid</span><br><span class="line">│   |       └── ...</span><br><span class="line">|   └── ...</span><br><span class="line">├── pages</span><br><span class="line">│   └── home</span><br><span class="line">│       ├── componments</span><br><span class="line">│       |   └── goods</span><br><span class="line">│       |     ├── index.wxml</span><br><span class="line">│       |     └── ...</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       ├── home.js</span><br><span class="line">│       ├── home.json</span><br><span class="line">│       └── home.wxss</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>在原生小程序开发中，一般在源码的根目录下，都会有一个<code>utils</code>文件夹，专门来干杂七杂八的脏话累活。其中包含工具类函数、<code>API</code>的管理、配置信息等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── utils (工具集)</span><br><span class="line">│   │── api</span><br><span class="line">│   │   └── ...</span><br><span class="line">|   ├── ... (其他工具类)</span><br><span class="line">|   ├── config.js</span><br><span class="line">|   └── local.config.js (本地配置，git忽略)</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><p>当小程序的资源大小超过了<code>2M</code>时，进行预览调试时就会报文件过大的错误，这时你可能就需要进行分包，将资源分开加载。小程序文档给出的目录结构是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── packageA</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── cat</span><br><span class="line">│       └── dog</span><br><span class="line">├── packageB</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── apple</span><br><span class="line">│       └── banana</span><br><span class="line">├── pages</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── user</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure><p>但经过我们在项目中尝试，我们发现通过编辑器的字符串排序后，会破坏目录结构的清晰度，所以推荐将分包放置到一个文件夹内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── subpackages (分包)</span><br><span class="line">│   │── news</span><br><span class="line">│   │   └── ...</span><br><span class="line">|   └── store</span><br><span class="line">│       └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后的一个小程序项目主体结构大致是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">├── components (公共组件目录)</span><br><span class="line">│   ├── @anima (动画组件)</span><br><span class="line">│   └── ...</span><br><span class="line">├── images（公共图片）</span><br><span class="line">│   └── icon</span><br><span class="line">│      ├── icon@download.png</span><br><span class="line">│      └── icon@cancel.png</span><br><span class="line">├── pages（主包目录）</span><br><span class="line">│   └── home (app.json 设置的入口页)</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       ├── home.js</span><br><span class="line">│       ├── home.json</span><br><span class="line">│       └── home.wxss</span><br><span class="line">├── style（公用样式目录）</span><br><span class="line">├── subpackages（分包目录）</span><br><span class="line">│   │── news</span><br><span class="line">|   └── store</span><br><span class="line">├── utils（公共模块，工具类）</span><br><span class="line">│   ├── config.js（项目配置）</span><br><span class="line">│   └── local.config.js (本地配置，git忽略)</span><br><span class="line">├── .editorconfig</span><br><span class="line">├── .gitignore</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── project.config.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><p>以上是从原生小程序开发的角度来对项目结构的设计进行一个思路总结，没有过多的讲更深入的东西。下一期想整理一下关于<code>API</code>封装和管理，欢迎指导~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/11/23/miniprogrmas-build-frame/banner.png&quot;&gt;&lt;p&gt;在工作中也做了好几个小程序项目了，正好抽空将小程序开发的一些知识重新整理一下~&lt;/p&gt;
    
    </summary>
    
      <category term="小程序开发" scheme="https://anran758.github.io/blog/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="小程序开发" scheme="https://anran758.github.io/blog/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="小程序开发笔记" scheme="https://anran758.github.io/blog/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Echarts 的食用方式</title>
    <link href="https://anran758.github.io/blog/2018/06/28/how-to-use-echart/"/>
    <id>https://anran758.github.io/blog/2018/06/28/how-to-use-echart/</id>
    <published>2018-06-28T05:04:46.000Z</published>
    <updated>2019-10-21T05:32:29.000Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2018/06/28/how-to-use-echart/banner.png"><p><code>ECharts</code>，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上。可以这么说，在国内，是个前端都知道这个玩意是干嘛用的，毕竟它还是出自于国人之手。</p><p>虽说如此，但是<code>Echarts</code>涵盖的类型实在是太广了，它给我们提供了很多配置项，但呼之而来的问题是会有点让刚接触的人有点茫然… 哪些参数是必要的？哪个参数又跟什么地方的<code>key</code>值相对应，缺失后就无法正常的显示…</p><p>因此就来专门讲一讲这配置项的坑以及如何通过组件的方式正确的”食用“。</p><a id="more"></a><hr><p>其实<code>Echarts</code>也有自己的使用教程，但本文的重心并不是从零开始讲解<code>Echarts</code>，至于更多使用细节可以看官方的<a href="http://echarts.baidu.com/tutorial.html" target="_blank" rel="noopener">文档</a>。</p><p>这里姑且先用折线图作示例。首先需要先引入<code>ECharts</code>, 我们选择好自己所需的版本后(tips: 如何选择版本，可以去看看<a href="http://echarts.baidu.com/download.html" target="_blank" rel="noopener">这里</a>)，然后在<code>&lt;/body&gt;</code>前插入脚本：<code>&lt;script src=&quot;echarts.min.js&quot;&gt;&lt;/script&gt;</code> 。</p><p>随后通过<code>echarts</code>提供的 API 初始化目标容器节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 echarts</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br></pre></td></tr></table></figure><p>接着我们需要填写配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  <span class="comment">// 全局 tooltip ,</span></span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 坐标轴触发</span></span><br><span class="line">    trigger: <span class="string">'axis'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图例组件，也就是提供显示或隐藏某一条数据信息开关</span></span><br><span class="line">  legend: &#123;</span><br><span class="line">    <span class="comment">// 组件在底部显示</span></span><br><span class="line">    bottom: <span class="string">'0px'</span>,</span><br><span class="line">    <span class="comment">// 图例每项之间的间隔</span></span><br><span class="line">    itemGap: <span class="number">46</span>,</span><br><span class="line">    <span class="comment">// 图例的数据数组, 省略则自动从 series.name 中获取</span></span><br><span class="line">    <span class="comment">// 但我们需要定制样式，因此我们添上去上去</span></span><br><span class="line">    data: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'曝光量'</span>,</span><br><span class="line">        icon: <span class="string">'circle'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'点击量'</span>,</span><br><span class="line">        icon: <span class="string">'circle'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 文字样式</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">      color: <span class="string">'#276dcc'</span>,</span><br><span class="line">      fontSize: <span class="number">14</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 重设全局调色盘的颜色，比如当前涉嫌图示例中有两条数据</span></span><br><span class="line">  <span class="comment">// 那这两条数据就会取得我们当前设置颜色作为展示</span></span><br><span class="line">  color: [<span class="string">'#42a66a'</span>, <span class="string">'#276dcc'</span>],</span><br><span class="line">  <span class="comment">// 网格布局</span></span><br><span class="line">  grid: &#123;</span><br><span class="line">    <span class="comment">// 下面三个是离容器的位置</span></span><br><span class="line">    left: <span class="string">'3%'</span>,</span><br><span class="line">    right: <span class="string">'4%'</span>,</span><br><span class="line">    bottom: <span class="string">'40px'</span>,</span><br><span class="line">    <span class="comment">// 坐标刻度，默认是false</span></span><br><span class="line">    containLabel: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// X轴配置</span></span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    type: <span class="string">'category'</span>,</span><br><span class="line">    boundaryGap: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 坐标轴配置</span></span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">'#d6dfea'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 坐标轴上的 label 样式</span></span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      margin: <span class="number">18</span>,</span><br><span class="line">      fontSize: <span class="number">14</span>,</span><br><span class="line">      color: <span class="string">'#56749d'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 类目数据，只有在 type: 'category' 中有效。</span></span><br><span class="line">    <span class="comment">// 一般情况下我们并不会手动写死数据进去，而是通过 Ajax 请求数据来展示</span></span><br><span class="line">    data: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Y轴配置</span></span><br><span class="line">  yAxis: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 数值轴</span></span><br><span class="line">      type: <span class="string">'value'</span>,</span><br><span class="line">      name: <span class="string">'点击量'</span>,</span><br><span class="line">      <span class="comment">// 左侧显示</span></span><br><span class="line">      position: <span class="string">'left'</span>,</span><br><span class="line">      <span class="comment">// 下面的样式不再多说</span></span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">'#d6dfea'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        margin: <span class="number">18</span>,</span><br><span class="line">        fontSize: <span class="number">14</span>,</span><br><span class="line">        color: <span class="string">'#56749d'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'value'</span>,</span><br><span class="line">      name: <span class="string">'曝光量'</span>,</span><br><span class="line">      position: <span class="string">'right'</span>,</span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">'#d6dfea'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        margin: <span class="number">18</span>,</span><br><span class="line">        fontSize: <span class="number">14</span>,</span><br><span class="line">        color: <span class="string">'#56749d'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 系列列表, 这个是数据的关键所在</span></span><br><span class="line">  series: [</span><br><span class="line">    <span class="comment">// 如果 legend.data 设置了数据的话，那么 series 的数目需要和 legend.data 的数目一致。</span></span><br><span class="line">    <span class="comment">// 否则图表会不工作 !!</span></span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'点击量'</span>,</span><br><span class="line">      <span class="comment">// 图表的类型，在这个示例中我们使用是折线图</span></span><br><span class="line">      type: <span class="string">'line'</span>,</span><br><span class="line">      yAxisIndex: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 系列中的数据内容数组</span></span><br><span class="line">      <span class="comment">// 同样的，我们主要展示的数据来自于服务端</span></span><br><span class="line">      data: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'曝光量'</span>,</span><br><span class="line">      type: <span class="string">'line'</span>,</span><br><span class="line">      <span class="comment">// 折线图一维数据可能是这种形式的数组</span></span><br><span class="line">      <span class="comment">// [1, 2, 3, 1, 4]</span></span><br><span class="line">      data: []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>随后可以通过 Ajax 获取数据，再使用<code>setOption</code>来设置选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  config.series[<span class="number">0</span>].data = res.data.click;</span><br><span class="line">  config.series[<span class="number">1</span>].data = res.data.exposure;</span><br><span class="line">  config.xAxis.data = res.data.xAxis;</span><br><span class="line"></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如此，这样我们定义的 echarts 就完成啦~</p><img data-src="/blog/2018/06/28/how-to-use-echart/echarts.png"><hr><h2 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h2><p>在<code>vue</code>中封装组件也不难，大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['data-echart', echartClass ]"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"data-echart__header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header__title"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"title-name"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-popover</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-if</span>=<span class="string">"tooltip"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">ref</span>=<span class="string">"tooltip"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">placement</span>=<span class="string">'bottom'</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">trigger</span>=<span class="string">'hover'</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-popover</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">"tooltip"</span> <span class="attr">class</span>=<span class="string">"el-icon-question"</span> <span class="attr">v-popover:tooltip</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">"echartId"</span> <span class="attr">class</span>=<span class="string">"echart__main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'echart'</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    echartClass: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    option: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    loading: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    domEchartId() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> (<span class="built_in">document</span> || <span class="built_in">window</span>.document).getElementById(<span class="keyword">this</span>.echartId);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 随机生成一个ID</span></span></span><br><span class="line"><span class="actionscript">      echartId: <span class="keyword">this</span>.randomChar(<span class="number">20</span>),</span></span><br><span class="line"><span class="actionscript">      myChart: <span class="literal">null</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    option: &#123;</span><br><span class="line"><span class="actionscript">      deep: <span class="literal">true</span>,</span></span><br><span class="line">      handler(newVal) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.update(newVal);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    loading(newVal) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.toggleLoading(newVal);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.init();</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 调起loading</span></span></span><br><span class="line">    toggleLoading(flag) &#123;</span><br><span class="line"><span class="actionscript">      flag ? <span class="keyword">this</span>.myChart.showLoading() : <span class="keyword">this</span>.myChart.hideLoading();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    init() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.myChart = echarts.init(<span class="keyword">this</span>.domEchartId);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.myChart.on(<span class="string">'click'</span>, (params) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">'clickEchart'</span>, params);</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 绘制图表</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.myChart.setOption(<span class="keyword">this</span>.option);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// Object.keys(this.data).length !== 0 &amp;&amp; this.myChart.setOption(this.data);</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    update(data) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.myChart.setOption(data);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 生成随机字符串</span><br><span class="line"><span class="javascript">     * @param &#123; <span class="built_in">Number</span> &#125; len - 指定随机字符串的长度</span></span><br><span class="line">     */</span><br><span class="line">    randomChar(len) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> x = <span class="string">'0123456789qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tmp = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">        tmp += x.charAt(<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">100000000</span>) % x.length);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> tmp;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">'scss'</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="keyword">@import</span> <span class="string">'~Scss/theme'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.data-echart</span> &#123;</span></span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.data-echart__header</span> &#123;</span></span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.header__title</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.title-name</span> &#123;</span></span><br><span class="line">    font-size: 16px;</span><br><span class="line">    color: $f-color--title;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.el-icon-question</span> &#123;</span></span><br><span class="line">    font-size: 18px;</span><br><span class="line">    color: $f-color--tip;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.echart__main</span> &#123;</span></span><br><span class="line">  flex: 1;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要将组件放入一个设有高度的容器上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"height: 600px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">echart</span> <span class="attr">:option</span>=<span class="string">"charts.option"</span>&gt;</span><span class="tag">&lt;/<span class="name">echart</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用的方式也面类似。首先声明一个基础的配置作为模板，在通过 ajax 拿到数据。通过动态数据传入组件内，组件<code>watch</code>到数据变化后立即重新渲染：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 某处集中封装的 ajax 请求</span></span><br><span class="line"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">'Common/apis'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      charts: &#123;</span><br><span class="line">        title: <span class="string">'My charts'</span></span><br><span class="line">        option： config</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;，</span><br><span class="line">  created() &#123;</span><br><span class="line">    API.getChartData()</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = res.data</span><br><span class="line">        <span class="keyword">this</span>.charts.option.xAxis.data = data.xAxis;</span><br><span class="line">        <span class="keyword">this</span>.charts.option.series[<span class="number">0</span>].data = data.click;</span><br><span class="line">        <span class="keyword">this</span>.charts.option.series[<span class="number">1</span>].data = data.exposure;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/06/28/how-to-use-echart/banner.png&quot;&gt;&lt;p&gt;&lt;code&gt;ECharts&lt;/code&gt;，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上。可以这么说，在国内，是个前端都知道这个玩意是干嘛用的，毕竟它还是出自于国人之手。&lt;/p&gt;&lt;p&gt;虽说如此，但是&lt;code&gt;Echarts&lt;/code&gt;涵盖的类型实在是太广了，它给我们提供了很多配置项，但呼之而来的问题是会有点让刚接触的人有点茫然… 哪些参数是必要的？哪个参数又跟什么地方的&lt;code&gt;key&lt;/code&gt;值相对应，缺失后就无法正常的显示…&lt;/p&gt;&lt;p&gt;因此就来专门讲一讲这配置项的坑以及如何通过组件的方式正确的”食用“。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://anran758.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://anran758.github.io/blog/tags/JavaScript/"/>
    
      <category term="Echarts" scheme="https://anran758.github.io/blog/tags/Echarts/"/>
    
      <category term="图表" scheme="https://anran758.github.io/blog/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>锚点定位导航</title>
    <link href="https://anran758.github.io/blog/2018/06/09/javascript-position-navigation/"/>
    <id>https://anran758.github.io/blog/2018/06/09/javascript-position-navigation/</id>
    <published>2018-06-09T08:15:32.000Z</published>
    <updated>2019-08-21T13:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2018/06/09/javascript-position-navigation/banner.jpg"><p>一般我们翻阅百科的时候，如果文章过长的话，就不太方便找到我们想要的资源。此时有一个定位导航的话，那可真是帮大忙了~今天，就来聊聊这种常见的锚点定位导航的原理以及是如何实现的。</p><a id="more"></a><hr><h2 id="定位原理"><a href="#定位原理" class="headerlink" title="定位原理"></a>定位原理</h2><p>首先我们来了解一下，什么锚点？</p><p>在海上，水手们会将锚丢入海中，或者靠岸时将锚抛上岸，其固定目的是让船固定位置。而<strong>锚点(anchor)</strong>也是一样，只不过场景不同罢了。</p><p>页面锚点定位可以通过<code>name</code>或者<code>id</code>属性来定位。<code>name</code>已经被<code>HTML5</code>废弃了，就不再多提。</p><p>在页面上，每个<code>id</code>都会自动创建一个锚点，同时还会生成一个<code>hash</code>，表示所处的文档位置。浏览器可以通过<code>hash</code>来确定位置，使用的方式一般如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title"</span>&gt;</span>跳到title<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 地址栏后会加上一段 # 开头的 hash --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://anran758.github.io/blog/#title --&gt;</span></span><br></pre></td></tr></table></figure><p>这个<code>hash</code>值我们可以通过浏览器的API<code>location.hash</code>取到。但值得注意的是，跳转<code>hash</code>的话是不会像服务端发送请求的(除了第一次请求页面)。</p><h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><p>但我们光知道跳转的原理可不够，只要你尝试了上面的跳转方法后，你会发现浏览器跳转方式是很唐突的。它会直愣愣的跳到指定位置(或者没有找到指定位置会，跳到页面最上面)，这在用户看来是十分生硬的，在体验上这个交互并不太友好。这时产品就会要求我们对此处进行优化~ 不过知道了上面的原理后，我们也可以直接使用js的方式来代替这种原生的默认跳转：</p><p>首先我们页面的结构大致如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"actived"</span> <span class="attr">href</span>=<span class="string">"#title1"</span>&gt;</span>第一组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title2"</span>&gt;</span>第二组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#title3"</span>&gt;</span>第三组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title1"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title2"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">"title3"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面布局固定了后，元素离页面顶部的距离可以通过<code>offsetTop</code>来获取到。同时我们可以操作滚动容器(html)的<code>scrollTop</code>来修改滚动位置。嘿，这样一上(目标距离顶部的高度)一下(滚动条)，两个<code>API</code>双剑合璧后，我们就可以点击模拟滚动啦..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery 环境</span></span><br><span class="line"><span class="keyword">var</span> $menu = $(<span class="string">'.nav'</span>);</span><br><span class="line"><span class="keyword">var</span> $menuList = $menu.find(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给超链接绑定点击事件</span></span><br><span class="line">$menuList.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">  $<span class="keyword">this</span>.click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $<span class="keyword">this</span>.attr(<span class="string">'href'</span>).replace(<span class="regexp">/#/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标距离顶部的高度</span></span><br><span class="line">    <span class="keyword">var</span> top = $(<span class="string">'#'</span> + id).offset().top - <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给滚动容器加动画的效果，滚动到目标位置</span></span><br><span class="line">    $(<span class="string">'html'</span>).animate(&#123; <span class="attr">scrollTop</span>: top &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>蹡蹡！在页面中调试会发现，点击后页面会平滑的滚动到指定的锚点~ 除此之外，我们还得再添加一个功能：在页面滚动的时候，能让用户知道自己所在的位置~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> contentList = $(<span class="string">'#content'</span>).find(<span class="string">'.item'</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> top = $(<span class="built_in">document</span>).scrollTop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取目前滚动条所处的区间</span></span><br><span class="line">  <span class="keyword">var</span> currentID = <span class="string">''</span>;</span><br><span class="line">  contentList.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前距离顶部的数值</span></span><br><span class="line">    <span class="keyword">var</span> itemTop = $<span class="keyword">this</span>.offset().top;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前滚动距离已经进入了 item 的区间</span></span><br><span class="line">    <span class="keyword">if</span> (top &gt; itemTop - <span class="number">250</span>) &#123;</span><br><span class="line">      currentID = <span class="string">'#'</span> + $<span class="keyword">this</span>.attr(<span class="string">'id'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentLink = $menu.find(<span class="string">'.actived'</span>);</span><br><span class="line">  <span class="comment">// 移除其他的类名</span></span><br><span class="line">  <span class="keyword">if</span> (currentID &amp;&amp; currentLink.attr(<span class="string">'href'</span>) !== currentID) &#123;</span><br><span class="line">    currentLink.removeClass(<span class="string">'actived'</span>);</span><br><span class="line"></span><br><span class="line">    $menu.find(<span class="string">"[href='"</span> + currentID + <span class="string">"']"</span>).addClass(<span class="string">'actived'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就锚点定位导航的功能就大功告成啦~ 最后将测试代码放入了<a href="https://codepen.io/anran758/pen/yEVqRa" target="_blank" rel="noopener">codepen</a>上了，感兴趣的同学可以去看看。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/06/09/javascript-position-navigation/banner.jpg&quot;&gt;&lt;p&gt;一般我们翻阅百科的时候，如果文章过长的话，就不太方便找到我们想要的资源。此时有一个定位导航的话，那可真是帮大忙了~今天，就来聊聊这种常见的锚点定位导航的原理以及是如何实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://anran758.github.io/blog/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://anran758.github.io/blog/tags/JavaScript/"/>
    
      <category term="业务组件" scheme="https://anran758.github.io/blog/tags/%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6/"/>
    
      <category term="jQuery" scheme="https://anran758.github.io/blog/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>将项目资源上传至七牛CDN</title>
    <link href="https://anran758.github.io/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/"/>
    <id>https://anran758.github.io/blog/2018/05/24/node-将项目资源上传至七牛CDN/</id>
    <published>2018-05-24T12:40:40.000Z</published>
    <updated>2019-08-19T07:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/banner.png"><p>在实际工作中，常常会遇到需要将项目中的资源传入 CDN 上，以提升用户的加载速度。七牛就是国内一个挺有名的服务商，今天就来分享一下，如何将项目资源上传至七牛吧~</p><a id="more"></a><p>一般情况下，我们开发中会有一个脚手架，里面搭建了我们的开发环境，我们通过<code>npm</code>安装七牛的 API 客户端，<code>npm install -D qn</code>。随后我们在 build 目录下(这里我们习惯将脚手架相关的代码放在此处..)创建一个名为<code>upload.js</code>的文件。</p><p>一般 我们的代码打包后会放在一个<code>dist</code>目录下，我们通过 Node.js 查找我们想要 上传的所有文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">'../'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义指定目录，以及过滤掉多余的系统文件</span></span><br><span class="line"><span class="keyword">const</span> distPath = <span class="string">'dist'</span>;</span><br><span class="line"><span class="keyword">const</span> ignore = [<span class="string">'.DS_Store'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取全部文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123; String &#125;</span> <span class="variable">dir</span></span> - 指定目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123; Array &#125;</span> </span>返回待上传的文件数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllFiles</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> paths = fs.readdirSync(dir);</span><br><span class="line">    <span class="keyword">let</span> files = [];</span><br><span class="line"></span><br><span class="line">    paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件相关信息</span></span><br><span class="line">      <span class="keyword">let</span> dirname = path.resolve(dir, <span class="string">'./'</span>, file);</span><br><span class="line">      <span class="keyword">let</span> stat = fs.lstatSync(dirname);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 过滤文件</span></span><br><span class="line">      <span class="keyword">let</span> filter = ignore.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v === file;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (filter.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!stat.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// 如果是文件的话，就转为将绝对路径转为相对路径</span></span><br><span class="line">        <span class="comment">// users/xxx/project/dist/static/js/vendors.js</span></span><br><span class="line">        <span class="comment">// =&gt; ./dist/static/js/vendors.js'</span></span><br><span class="line">        files.push(dirname.replace(rootPath, <span class="string">'.'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 文件夹，递归继续查找文件</span></span><br><span class="line">        files = files.concat(getAllFiles(dirname));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e + <span class="string">'\n'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok~ 有了文件列表后，接着我们就要考虑上传的问题啦。不过在这之前，我们还需要再做一些准备…我们要先去<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener">七牛开发者平台</a>获取签名信息，用来作为上传的凭证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/base.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// other configuration...</span></span><br><span class="line">  cdn: &#123;</span><br><span class="line">    <span class="comment">// https://portal.qiniu.com/user/key</span></span><br><span class="line">    accessKey: <span class="string">'your access key'</span>,</span><br><span class="line">    secretKey: <span class="string">'your secret key'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://portal.qiniu.com/bucket/koudaifm/index</span></span><br><span class="line">    bucket: <span class="string">'project'</span>,                    <span class="comment">// 就是储存空间的域名，一般来说也是你的项目名</span></span><br><span class="line">    origin: <span class="string">'http://fs.project.com'</span>,      <span class="comment">// 外链域名，这个可以自己设置，一开始七牛会分配给你一个随机的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://developer.qiniu.com/kodo/manual/1671/region-endpoint</span></span><br><span class="line">    <span class="comment">// 这个是跟项目所在的储存区域相对应的，比如华南地区的就是这个示例的uploadURL</span></span><br><span class="line">    uploadURL: <span class="string">'http://up-z2.qiniu.com'</span>,</span><br><span class="line">    <span class="comment">// timeout: 3600000                   // 超时，唔..这里姑且不需要</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/qiniu.png" title="七牛储存空间"><hr><p>考虑到上传资源时，可能会碰到资源已存在的问题，这时就需要再额外创建一个函数来处理这个问题~ 然后我们开始封装上传函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将配置项放到单独文件上，统一改起来也方便..</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/base'</span>);</span><br><span class="line"><span class="keyword">const</span> pluginName = <span class="built_in">require</span>(<span class="string">'../package.json'</span>).name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> client = qn.create(config.cdn);</span><br><span class="line"><span class="keyword">let</span> done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除七牛资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnDelete</span>(<span class="params">key, cb</span>) </span>&#123;</span><br><span class="line">  client.delete(key, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Delete '</span>.yellow + <span class="string">'success'</span>.green + <span class="string">': '</span>, key);</span><br><span class="line">      cb &amp;&amp; cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'Delete '</span>.yellow + <span class="string">'error'</span>.red + <span class="string">': '</span>,</span><br><span class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnUpload</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 上传到七牛对应的(bucket)下</span></span><br><span class="line">  <span class="keyword">var</span> key = pluginName + dir.replace(<span class="string">'./'</span>, <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">  client.uploadFile(dir, &#123; <span class="attr">key</span>: key &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Upload '</span> + <span class="string">'success'</span>.green + <span class="string">': '</span>, result.key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果目标资源已存在，七牛会返回一个 614 的错误码</span></span><br><span class="line">      <span class="comment">// https://developer.qiniu.com/fusion/kb/1352/the-http-request-return-a-status-code</span></span><br><span class="line">      <span class="keyword">if</span> (err.code === <span class="number">614</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除文件并重试，以最新</span></span><br><span class="line">        qnDelete(key, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          qnUpload(dir);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 报错信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'Upload '</span> + <span class="string">'error'</span>.red + <span class="string">': '</span>,</span><br><span class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (++done === filesLength) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Upload <span class="subst">$&#123;distPath&#125;</span>/** to qiniu CDN.\n`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每个文件调用 qnUpload</span></span><br><span class="line">myFiles.forEach(qnUpload);</span><br></pre></td></tr></table></figure><hr><p>锵锵！一个可复用的上传组件就这么出现啦~ 最后上完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> qn = <span class="built_in">require</span>(<span class="string">'qn'</span>);</span><br><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config/base'</span>);</span><br><span class="line"><span class="keyword">const</span> pluginName = <span class="built_in">require</span>(<span class="string">'../package.json'</span>).name;</span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">'../'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> distPath = <span class="string">'dist'</span>;</span><br><span class="line"><span class="keyword">const</span> ignore = [<span class="string">'.DS_Store'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取全部文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123; String &#125;</span> <span class="variable">dir</span></span> - 指定目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123; Array &#125;</span> </span>返回待上传的文件数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllFiles</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> paths = fs.readdirSync(dir);</span><br><span class="line">    <span class="keyword">let</span> files = [];</span><br><span class="line"></span><br><span class="line">    paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件信息</span></span><br><span class="line">      <span class="keyword">let</span> dirname = path.resolve(dir, <span class="string">'./'</span>, file);</span><br><span class="line">      <span class="keyword">let</span> stat = fs.lstatSync(dirname);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> filter = ignore.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v === file;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (filter.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!stat.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// 如果是文件的话，就转为将绝对路径转为相对路径</span></span><br><span class="line">        <span class="comment">// users/xxx/project/dist/static/js/vendors.js</span></span><br><span class="line">        <span class="comment">// =&gt; ./dist/static/js/vendors.js'</span></span><br><span class="line">        files.push(dirname.replace(rootPath, <span class="string">'.'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 递归重复查找文件</span></span><br><span class="line">        files = files.concat(getAllFiles(dirname));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e + <span class="string">'\n'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myFiles = getAllFiles(distPath);</span><br><span class="line"><span class="keyword">const</span> filesLength = myFiles.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 七牛上传配置</span></span><br><span class="line"><span class="comment">// https://www.npmjs.com/package/qn#upload</span></span><br><span class="line"><span class="keyword">let</span> client = qn.create(config.cdn);</span><br><span class="line"><span class="keyword">let</span> done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除七牛资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnDelete</span>(<span class="params">key, cb</span>) </span>&#123;</span><br><span class="line">  client.delete(key, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Delete '</span>.yellow + <span class="string">'success'</span>.green + <span class="string">': '</span>, key);</span><br><span class="line">      cb &amp;&amp; cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'Delete '</span>.yellow + <span class="string">'error'</span>.red + <span class="string">': '</span>,</span><br><span class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnUpload</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 上传到七牛对应的(bucket)下</span></span><br><span class="line">  <span class="keyword">var</span> key = pluginName + dir.replace(<span class="string">'./'</span>, <span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">  client.uploadFile(dir, &#123; <span class="attr">key</span>: key &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Upload '</span> + <span class="string">'success'</span>.green + <span class="string">': '</span>, result.key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果目标资源已存在，七牛会返回一个 614 的错误码</span></span><br><span class="line">      <span class="comment">// https://developer.qiniu.com/fusion/kb/1352/the-http-request-return-a-status-code</span></span><br><span class="line">      <span class="keyword">if</span> (err.code === <span class="number">614</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除文件并重试</span></span><br><span class="line">        qnDelete(key, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          qnUpload(dir);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 报错信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'Upload '</span> + <span class="string">'error'</span>.red + <span class="string">': '</span>,</span><br><span class="line">        err.name + <span class="string">' [code: '</span> + err.code + <span class="string">']'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (++done === filesLength) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Upload <span class="subst">$&#123;distPath&#125;</span>/** to qiniu CDN.\n`</span>);</span><br><span class="line"></span><br><span class="line">myFiles.forEach(qnUpload);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/banner.png&quot;&gt;&lt;p&gt;在实际工作中，常常会遇到需要将项目中的资源传入 CDN 上，以提升用户的加载速度。七牛就是国内一个挺有名的服务商，今天就来分享一下，如何将项目资源上传至七牛吧~&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://anran758.github.io/blog/categories/Node/"/>
    
    
      <category term="Node" scheme="https://anran758.github.io/blog/tags/Node/"/>
    
      <category term="Javascirpt" scheme="https://anran758.github.io/blog/tags/Javascirpt/"/>
    
      <category term="七牛" scheme="https://anran758.github.io/blog/tags/%E4%B8%83%E7%89%9B/"/>
    
      <category term="项目管理" scheme="https://anran758.github.io/blog/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>常见的几种压缩图片的思路</title>
    <link href="https://anran758.github.io/blog/2018/05/08/canvas-compress-prictures/"/>
    <id>https://anran758.github.io/blog/2018/05/08/canvas-compress-prictures/</id>
    <published>2018-05-08T15:15:40.000Z</published>
    <updated>2019-10-28T11:14:42.774Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2018/05/08/canvas-compress-prictures/banner.png"><p>在做 H5 开发时，难免会遇到有需要上传图片的需求。这种需要我们去引入一些库，或者自己来实现这么个功能。那么一般是如何去处理压缩图片的需求呢？这里简要的概述一下实现原理~</p><a id="more"></a><p>目前主流对图片进行处理都是使用<code>canvas</code>技术~当我们碰到需要压缩图片的场景时，第一种我们就可以尝试控制图片的尺寸。因为图片的尺寸越大，里面包含的信息就越多，自然体积也随着增加了起来。</p><p>我们可以做一个宽高的限制，超出就对其进行尺寸的缩放。那么限制最大值是多少呢？这个应该根据产品或者需求来调整。当然，裁剪图片也是一种思路，那么该如何去裁剪，让用户选择还是我们自定义？这也是需要考虑的一点。</p><p>判断缩放的方法主要使用<code>drawImage</code>将图片导入canvas，如果图片超过了指定的宽高，就进行缩放图片。关于这一点，我觉得张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2017/07/html5-canvas-image-compress-upload/" target="_blank" rel="noopener">这篇文章</a>讲的已经足够简洁的了，感兴趣的同学可以看这边~</p><hr><p>第二种就是使用<code>canvas</code>提供的另一个接口：<code>canvas.toDataURL(type, encoderOptions)</code>。这是浏览器原生提供可以压缩图片的方法，该方法返回一个包含图片展示的<code>data URI</code>(也就是我们常说的base64)。</p><p>它接受两个可选参数，我们可以使用<code>type</code>参数指定其类型，默认为<code>PNG</code>格式。<code>encoderOptions</code>则是压缩图片质量参数，区间在 0~1 之间。值得注意的是，<strong>压缩图片质量这个参数只对<code>image/jpeg</code>或<code>image/webp</code>有效</strong>。所幸的是，其他格式用不了压缩图片的参数，但浏览器还是会对图片进行压缩处理，剔除对 web 展示没啥用的元数据(虽然可能会涉及到版权纠纷的问题)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="comment">// 中间处理的过程省略 ...</span></span><br><span class="line"><span class="keyword">var</span> fullQuality = canvas.toDataURL(<span class="string">"image/jpeg"</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure><p>但单单是转为 base64 是不能满足我们一些需求的，这时我们可能会想要让它再转为对服务端友好的<code>blob</code>类型。<br>这时我们就需要用到<code>window.atob()</code>, 将已经编译成 base64 的字符串解码为二进制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> type = fullQuality.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码为二进制</span></span><br><span class="line"><span class="keyword">var</span> binStr = atob(fullQuality.split(<span class="string">','</span>)[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">var</span> length = binStr.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个缓存区，容器大小可以容纳 binStr.</span></span><br><span class="line"><span class="comment">// 这个缓存区我们是不能直接操作的。</span></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(binStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立`Uint8Array`类型数组</span></span><br><span class="line"><span class="comment">// 这样我们就可以通过对象的方法或者数组索引读写里面的数据啦</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// var buff = new ArrayBuffer(4);   =&gt; ArrayBuffer(4) &#123;&#125;</span></span><br><span class="line"><span class="comment">// var arr = new Uint8Array(buff);  =&gt; Uint8Array(4) [0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// arr[2] = 8;</span></span><br><span class="line"><span class="comment">// console.log(buff)    =&gt; 缓存区和 Uint8Array 同时被修改了</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  <span class="comment">// 逐个查询 binStr 里的二进制 Unicode 编码，并存入类型数组中</span></span><br><span class="line">  arr[i] = binStr.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([buffer],&#123; <span class="attr">type</span>: type &#125;</span><br></pre></td></tr></table></figure><p>如果是想转为<code>File</code>类型的话，和上面的方法实现的也一致..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/File/File</span></span><br><span class="line"><span class="comment">// 第一个参数传入 ArrayBuffer 也行，blob 也行..</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> File([buff], <span class="string">"img.jpg"</span>, &#123; <span class="attr">type</span>: type &#125;);</span><br></pre></td></tr></table></figure><p>哇，转个类型都看起来好像挺麻烦的样子呢…那么有没有内置的方法呀？答案是有，canvas 里有个<code>toBlob(callback, type, encoderOptions)</code>的方法, 它接受三个参数，一个是将canvas转为<code>blob</code>后接受的回调函数、一个是指定的图片格式、另一个是图片质量，区间也在 0~1 之间。</p><p>看起来这个方法似乎比上面那个更好用呢..然而残念的是，这货还受着兼容性影响，不在乎的兼容性的话倒是可以使用… 不然就需要上一种polyfill 的方式来实现~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接收转换后的 blob 类型</span></span><br><span class="line">  <span class="comment">// 此时可以在函数里发起请求</span></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: baseURL + <span class="string">'/uploader/'</span>,</span><br><span class="line">    data: &#123; <span class="attr">act_id</span>: actID, <span class="attr">pic_1</span>: blob &#125;,</span><br><span class="line">    type: <span class="string">'POST'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// success</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="string">'image/png'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/05/08/canvas-compress-prictures/banner.png&quot;&gt;&lt;p&gt;在做 H5 开发时，难免会遇到有需要上传图片的需求。这种需要我们去引入一些库，或者自己来实现这么个功能。那么一般是如何去处理压缩图片的需求呢？这里简要的概述一下实现原理~&lt;/p&gt;
    
    </summary>
    
      <category term="性能优化" scheme="https://anran758.github.io/blog/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="https://anran758.github.io/blog/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="图片" scheme="https://anran758.github.io/blog/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="图片压缩" scheme="https://anran758.github.io/blog/tags/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>浅谈CSS3 Matrix 的使用</title>
    <link href="https://anran758.github.io/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://anran758.github.io/blog/2018/05/06/谈谈CSS3-Matrix-的理解/</id>
    <published>2018-05-06T02:11:26.000Z</published>
    <updated>2020-02-16T10:06:39.000Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/banner.png"><p>CSS3的<code>transform</code>里有一个方法叫做<code>Matrix</code>，该需要六个参数，可以使用数学函数让元素进行旋转、缩放、移动以及倾斜元素。</p><p>光是看这名词好像有点吓人，仿佛又回想起当初被数学支配的恐惧。的确，相比那些<code>translate(25deg)</code>之类有着明确语义跟容易调用方法外，<code>Matrix</code>使用起来确实有些复杂~</p><a id="more"></a><p><code>Matrix</code>的参数分别有a, b, c, d, e, f六个参数，我们可以分别对应：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(<span class="selector-tag">X</span>轴的缩放， <span class="selector-tag">X</span>轴拉升, <span class="selector-tag">Y</span>轴的拉伸, <span class="selector-tag">Y</span>轴的缩放, <span class="selector-tag">X</span>轴的位移, <span class="selector-tag">Y</span>轴的位移);</span><br></pre></td></tr></table></figure><p>这样看上去好像好多了，我们常使用的几个方法也是可以通过Matrix来实现：</p><p>元素默认情况下的表现可以用<code>Matrix</code>来表示为：<code>matrix(1, 0, 0, 1, 0, 0)</code>;</p><p>通过上面的例子，我们很容易推测出缩放的公式为：<code>translate(sx, sy)</code>等于<code>matrix(sx, 0, 0, sy, 0, 0)</code>;</p><p>位移就更简单啦： <code>translate(tx, ty)</code>等于<code>matrix(1, 0, 0, 1, tx, ty)</code>;</p><p>拉升则是：<code>skew(degx, degy)</code>等于<code>matrix(1, tan(degx), tan(degy), 1, 0, 0)</code></p><p>旋转没有提供相应的参数，他需要套用数学的公式，毕竟这个方法名就是<code>矩阵</code>嘛：<code>rotate(deg)</code>等于<code>matrix(cos(deg),sin(deg), -sin(deg), cos(deg), 0, 0)</code></p><hr><p>那问题来了，为啥有简单易用的方法不用，我们非要搞这么麻烦的东西呢？这是因为很多时候我们需要高度精确定制动画时，那些简单的方法以及不能满足我们的需求啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/banner.png&quot;&gt;&lt;p&gt;CSS3的&lt;code&gt;transform&lt;/code&gt;里有一个方法叫做&lt;code&gt;Matrix&lt;/code&gt;，该需要六个参数，可以使用数学函数让元素进行旋转、缩放、移动以及倾斜元素。&lt;/p&gt;&lt;p&gt;光是看这名词好像有点吓人，仿佛又回想起当初被数学支配的恐惧。的确，相比那些&lt;code&gt;translate(25deg)&lt;/code&gt;之类有着明确语义跟容易调用方法外，&lt;code&gt;Matrix&lt;/code&gt;使用起来确实有些复杂~&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://anran758.github.io/blog/categories/CSS/"/>
    
    
      <category term="transform" scheme="https://anran758.github.io/blog/tags/transform/"/>
    
      <category term="CSS" scheme="https://anran758.github.io/blog/tags/CSS/"/>
    
      <category term="CSS3" scheme="https://anran758.github.io/blog/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>git-flow 练习笔记</title>
    <link href="https://anran758.github.io/blog/2018/04/23/git-flow/"/>
    <id>https://anran758.github.io/blog/2018/04/23/git-flow/</id>
    <published>2018-04-23T08:09:23.000Z</published>
    <updated>2020-05-20T13:20:45.289Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/blog/2018/04/23/git-flow/banner.png"><p>在我们团队开发中，必不可免会使用到版本控制。同时还需要一个统一的工作流程，创建新的功能、打补丁、正式版发布打tag等等，git-flow工作流就这些繁琐的东西简化了，它封装了git命令，将命令组合了起来，我们只需要几行代码就能解决这些繁琐的工作。正好工作也有好一段时间了，想将这方面的知识梳理一下。</p><a id="more"></a><p>git flow 有好几个版本，这里笔者演示使用的是<a href="https://github.com/petervanderdoes/gitflow-avh" target="_blank" rel="noopener">git-flow-avh</a>的版本。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先我们先开始初始化仓库的工作流，我们在命令行使用<code>git flow init</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git flow init</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (<span class="built_in">local</span>) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (global) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (system) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (file) on this platform</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">No branches exist yet. Base branches must be created now.</span><br></pre></td></tr></table></figure><p>命令行出现了警告，告诉我们还没有基础的分支。这是因为测试是全新的仓库作测试，这个我们姑且先不管它，接着引导会向我们确定需要初始化分支的名字，我们都采用默认即可。<br>直到询问<code>Version tag prefix</code>时，我们采用<code>v</code>作版本前缀，这其实也是很常见的一种习惯。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Branch name <span class="keyword">for</span> production releases: [master]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">Branch name <span class="keyword">for</span> <span class="string">"next release"</span> development: [develop]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">How to name your supporting branch prefixes?</span><br><span class="line">Feature branches? [feature/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Bugfix branches? [bugfix/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Release branches? [release/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Hotfix branches? [hotfix/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Support branches? [support/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">Version tag prefix? [] v</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Hooks and filters directory? [/Users/anran/MyProject/git-flow-test/.git/hooks]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br></pre></td></tr></table></figure><p>随后我们使用<code>git branch</code>查看一下当前分支，我们会发现，git flow 创建了两条分支————主分支（master）和开发分支（develop），并自动切换到了 develop 上。</p><p>一般来说，我们常将 master 作为部署的分支，这个版本的产品防止稳定的代码和功能，作为产品的一个正式版部署。<br>正常情况下，我们不能直接在 master 分支上进行工作，而该是在 develop 开发环境下进行工作。<br>除此之外，develop 还是一个基础的分支，当我们开发新的功能时，我们会另开一个分支，在新的分支上进行功能开发，等功能开发完毕后再合并进来 develop 分支。</p><p>嘿，我们先创建一个<code>README.md</code>，在里面添加一些文字进去，再提交上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git branch</span><br><span class="line">* develop</span><br><span class="line">  master</span><br><span class="line">➜  git-flow-test git:(develop) touch README.md</span><br><span class="line">➜  git-flow-test git:(develop) ✗ vim README.md</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git status</span><br><span class="line">On branch develop</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   README.md</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(develop) ✗ git commit -m <span class="string">"First commit"</span></span><br><span class="line">[develop 61ec91a] First commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure><p>如果这时直接用<code>push</code>的话，git会提示你没有设定上游分支————别忘了现在我们在使用全新的测试仓库。</p><figure class="highlight plain"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git push</span><br><span class="line">fatal: The current branch develop has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin develop</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(develop) git push --set-upstream origin develop</span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">Writing objects: 100% (5&#x2F;5), 385 bytes | 385.00 KiB&#x2F;s, done.</span><br><span class="line">Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:anran758&#x2F;git-flow-test.git</span><br><span class="line"> * [new branch]      develop -&gt; develop</span><br><span class="line">Branch &#39;develop&#39; set up to track remote branch &#39;develop&#39; from &#39;origin&#39;.</span><br><span class="line">➜  git-flow-test git:(develop)</span><br></pre></td></tr></table></figure><h2 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h2><p>umm..现在假设我们现在碰到了一个需求，需要加一些功能，这时我们就需要开一个功能分支了，这时工作中常用的分支。那为啥都切到开发环境了还要单独开一个分支呢？这是避免产品调皮的说，“刚才那个功能只是我突发奇想，咱们不要了吧(诶嘿.jpg”。嗯，这时宰一个产品祭天事小，污染了全局的开发环境才事大，回退都不好回退（可能团队中其他人也在写一些功能上去或者修复了一些bug上去，回退意味着其他人也会收到影响）。</p><p>而单独开一个分支则没那么多破事需要烦恼，再不济就删除这个分支即可，不需要耗费额外的成本。</p><p>我们先看一下给flow都有啥，使用命令<code>git flow -h</code>会提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow -h</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">usage: git flow &lt;subcommand&gt;</span><br><span class="line"></span><br><span class="line">Available subcommands are:</span><br><span class="line">   init      Initialize a new git repo with support <span class="keyword">for</span> the branching model.</span><br><span class="line">   feature   Manage your feature branches.</span><br><span class="line">   bugfix    Manage your bugfix branches.</span><br><span class="line">   release   Manage your release branches.</span><br><span class="line">   hotfix    Manage your hotfix branches.</span><br><span class="line">   support   Manage your support branches.</span><br><span class="line">   version   Shows version information.</span><br><span class="line">   config    Manage your git-flow configuration.</span><br><span class="line">   <span class="built_in">log</span>       Show <span class="built_in">log</span> deviating from base branch.</span><br><span class="line"></span><br><span class="line">Try <span class="string">'git flow &lt;subcommand&gt; help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>因为我们现在是想做一个新功能，feature 就是我们想要的命令。我们进一步查看详情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow feature <span class="built_in">help</span></span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">usage: git flow feature [list]</span><br><span class="line">   or: git flow feature start</span><br><span class="line">   or: git flow feature finish</span><br><span class="line">   or: git flow feature publish</span><br><span class="line">   or: git flow feature track</span><br><span class="line">   or: git flow feature diff</span><br><span class="line">   or: git flow feature rebase</span><br><span class="line">   or: git flow feature checkout</span><br><span class="line">   or: git flow feature pull</span><br><span class="line">   or: git flow feature delete</span><br><span class="line"></span><br><span class="line">    Manage your feature branches.</span><br><span class="line"></span><br><span class="line">    For more specific <span class="built_in">help</span> <span class="built_in">type</span> the <span class="built_in">command</span> followed by --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><hr><p>我们使用<code>git flow feature start</code>再加上一个名字，这个名字代表着这个功能分支是做什么的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow feature start home</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Switched to a new branch <span class="string">'feature/home'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'feature/home'</span> was created, based on <span class="string">'develop'</span></span><br><span class="line">- You are now on branch <span class="string">'feature/home'</span></span><br><span class="line"></span><br><span class="line">Now, start committing on your feature. When <span class="keyword">done</span>, use:</span><br><span class="line"></span><br><span class="line">     git flow feature finish home</span><br></pre></td></tr></table></figure><p>这时我们创建了一个名为<code>feature/home</code>的新分支，并且切换到了新分支上。feature的前缀就是前面使用默认的功能分支的名字。<br>这个 feature 可以当成一个放置功能的文件夹。</p><p>随后我创建一个 HTML 文件，并在上面写了少许代码假装（雾）完成了这个新功能的开发。<br>使用<code>git flow feature finish &lt;name&gt;</code>完成本回合的开发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(feature/home) ✗ git flow finish home</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">Your branch is up to date with <span class="string">'origin/develop'</span>.</span><br><span class="line">Already up to date.</span><br><span class="line">Deleted branch feature/home (was 61ec91a).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- The feature branch <span class="string">'feature/home'</span> was merged into <span class="string">'develop'</span></span><br><span class="line">- Feature branch <span class="string">'feature/home'</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">'develop'</span></span><br></pre></td></tr></table></figure><p>git flow 将分支合并后，会将<code>feature/home</code>分支删除。这时分支会切换到<code>develop</code>。<strong>注意，这时候的代码还没有提交到远端！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git commit -m <span class="string">"添加新的功能"</span></span><br><span class="line">[develop 9ca31f9] 添加新的功能</span><br><span class="line"> 1 file changed, 12 insertions(+)</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git push</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 482 bytes | 482.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:anran758/git-flow-test.git</span><br><span class="line">   61ec91a..9ca31f9  develop -&gt; develop</span><br></pre></td></tr></table></figure><h2 id="正式发布"><a href="#正式发布" class="headerlink" title="正式发布"></a>正式发布</h2><p>好啦，当我们开发的差不多了，bug都修完并且都测试过了，这时就可以考虑部署一版了。这时我们可以使用<code>git flow release start &lt;version number&gt;</code>进入发布的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) ✗ git flow release start 1.0.0</span><br><span class="line">Switched to a new branch <span class="string">'release/1.0.0'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'release/1.0.0'</span> was created, based on <span class="string">'develop'</span></span><br><span class="line">- You are now on branch <span class="string">'release/1.0.0'</span></span><br><span class="line"></span><br><span class="line">Follow-up actions:</span><br><span class="line">- Bump the version number now!</span><br><span class="line">- Start committing last-minute fixes <span class="keyword">in</span> preparing your release</span><br><span class="line">- When <span class="keyword">done</span>, run:</span><br><span class="line"></span><br><span class="line">     git flow release finish <span class="string">'1.0.0'</span></span><br></pre></td></tr></table></figure><p>git flow 基于<code>develop</code>创建了一个新的分支，同时切换到新分支<code>release/1.0.0</code>上了。</p><p>这时我们可以进入最后的准备啦~比如我们一般发布都需要写版本信息，说明这版本都做了什么？新加了哪些功能？修了哪些bug等信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ touch changelog.md</span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ vim changelog.md</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line"><span class="comment"># item name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## v1.0.0 2018/04/23</span></span><br><span class="line"></span><br><span class="line">* 基础功能完善</span><br><span class="line">* 完成巴拉巴拉功能</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">"changelog.md"</span> 6L, 83C</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ git add changelog.md</span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ git commit -m <span class="string">"增加版本号信息"</span></span><br><span class="line">[release/1.0.0 f8464d6] 修改版本号信息</span><br><span class="line"> 1 file changed, 6 insertions(+)</span><br><span class="line"> create mode 100644 changelog.md</span><br></pre></td></tr></table></figure><p>这时暂时先不用push，不过这里值得注意的是，<strong>一般来说，我们只有两个长期分支，一个 develop，另一个是 master分支。例如release 、feature等分支一般不会出现在远程的分支中。这是以为当我们做完这些工作流后，这些分支都会合并删除了。</strong></p><p>等完成这些工作后，我们把发布流程结束，在命令行输入: <code>git flow release finish 1.0.0</code>。git flow将会做以下几个步骤：</p><ul><li><p>pull代码，以确保本地分支的代码都是最新的版本。</p></li><li><p>然后，release 的内容会被合并到 “master” 和 “develop” 两个分支中去，这样不仅产品代码为最新的版本，而且新的功能分支也将基于最新代码。<br>这时命令行会进入vim编辑器里的合并信息页，默认会以<code>Merge branch &#39;release/1.0.0&#39;</code>作为 commit<br>信息提交。我们也可以自己输入一些信息进行描述。(vim编辑器状态下，输入<code>a</code>则进入编辑状态，使用<code>:q</code>为不保存信息退出编辑器，<code>:wq</code>为保存信息并退出vim)。</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Merge branch <span class="string">'release/1.0.0'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Please enter <span class="keyword">a</span> commit message <span class="keyword">to</span> explain why this merge <span class="keyword">is</span> necessary,</span><br><span class="line"># especially <span class="keyword">if</span> it merges <span class="keyword">an</span> updated upstream into <span class="keyword">a</span> topic branch.</span><br><span class="line">#</span><br><span class="line"># Lines starting with <span class="string">'#'</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts</span><br><span class="line"># the commit.</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">"~/MyProject/git-flow-test/.git/MERGE_MSG"</span> <span class="number">7</span>L, <span class="number">256</span>C</span><br></pre></td></tr></table></figure><ul><li>保存后又会进入另一个信息，这次这个是确定版本号信息。我们将<code>v1.0.0</code>前面的<code>#</code>去掉，让其作为tag，<code>v</code>是一开头初始化所用的前缀，而<code>1.0.0</code>则是我们这次发布的名称（版本号）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Write a message for tag:</span></span><br><span class="line"><span class="comment">#   v1.0.0</span></span><br><span class="line"><span class="comment"># Lines starting with '#' will be ignored.</span></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">"~/MyProject/git-flow-test/.git/TAG_EDITMSG"</span> 5L, 84C</span><br></pre></td></tr></table></figure><ul><li>为便于识别和做历史参考，release 提交会被标记上这个 release 的名字。</li><li>清理操作，版本分支会被删除，并且回到 “develop”。</li></ul><h2 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h2><p>上线后，在进行测试时会可能会发现之前没有留意到的小bug，比如展示的数据调错了字段，当bug修复后，这时就可以使用git flow 里的<code>hotfix</code>，用来表示bug的修复。值得注意的是，<code>hotfix</code>与之前两个分支有些不同，<code>hotfix</code>是基于<code>master</code>主分支的修复，而前面两者是基于<code>develop</code>分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(master) git flow hotfix start v1.0.1hotfix</span><br><span class="line">Switched to a new branch <span class="string">'hotfix/v1.0.1hotfix'</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">'hotfix/v1.0.1hotfix'</span> was created, based on <span class="string">'master'</span></span><br><span class="line">- You are now on branch <span class="string">'hotfix/v1.0.1hotfix'</span></span><br><span class="line"></span><br><span class="line">Follow-up actions:</span><br><span class="line">- Start committing your hot fixes</span><br><span class="line">- Bump the version number now!</span><br><span class="line">- When <span class="keyword">done</span>, run:</span><br><span class="line"></span><br><span class="line">     git flow hotfix finish <span class="string">'fixShoppingCart'</span></span><br></pre></td></tr></table></figure><p>然后你会看到git flow会提示你：</p><ul><li>开始修复你bug</li><li>修复bug也是需要影响版本号的</li><li>完成上述工作后就可以结束这个补丁啦~</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) vim index.html</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ vim changelog.md</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ git commit -m <span class="string">"fixed shopping cart bug"</span></span><br><span class="line">[hotfix/v1.0.1hotfix 1506b7f] fixed shopping cart bug</span><br><span class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) git flow hotfix finish v1.0.1hotfix</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> changelog.md | 2 ++</span><br><span class="line"> index.html   | 4 ++--</span><br><span class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">Your branch is up to date with <span class="string">'origin/develop'</span>.</span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> changelog.md | 8 ++++++++</span><br><span class="line"> index.html   | 4 ++--</span><br><span class="line"> 2 files changed, 10 insertions(+), 2 deletions(-)</span><br><span class="line"> create mode 100644 changelog.md</span><br><span class="line">Deleted branch hotfix/v1.0.1hotfix (was 1506b7f).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- Hotfix branch <span class="string">'hotfix/v1.0.1hotfix'</span> has been merged into <span class="string">'master'</span></span><br><span class="line">- The hotfix was tagged <span class="string">'vv1.0.1hotfix'</span></span><br><span class="line">- Hotfix tag <span class="string">'vv1.0.1hotfix'</span> has been back-merged into <span class="string">'develop'</span></span><br><span class="line">- Hotfix branch <span class="string">'hotfix/v1.0.1hotfix'</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">'develop'</span></span><br></pre></td></tr></table></figure><p>我们使用<code>git flow hotfix finish v1.0.1hotfix</code>结束工作流后，跟之前那样会出现合并的信息，如果需要的话，就添加相应秒速信息，再保存退出即可。</p><p>这时会将修复的部分同时合并到<code>master</code>和<code>develop</code>分支上，同时会为这次hotfix打上 tag。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>bugfix</code>，它也是修复bug分支。看到这里就会有同学会疑问了：“啥？又改bug，这和之前那个又有啥区别？”。</p><p>原来它与<code>hotbug</code>不同的是，它是基于<code>develop</code>分支的。事实上这一个工作流在笔者的日常开发中用的比较少，似乎有些gif flow 的模型中都没有这个工作流，不过我也没有深入的去考证~因为目前没有遇到碰到这个的场景，了解的同学不妨留言讨论分享一下。</p><p>除此之外还有一个<code>support</code>的功能，是想用来支持以前的版本产品，这是一个实验性的功能，不太建议使用这个。</p><p>如果你偏爱于可视化的git的话，如同 Sourcetree 之类的 Git GUI 也内置有git flow。</p><img data-src="/blog/2018/04/23/git-flow/img-1.png" title="Mac下的Sourcetree"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>git flow实际上就一连串命令的组合，我们也可以单个单个的输入命令达到同样的效果。虽说git flow统一了工作流程，但并不是适用于全部的场景。项目中只有一个人时却反而会显得有点繁琐了。我们应该根据实际项目去选择符合项目的工作流。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2018/04/23/git-flow/banner.png&quot;&gt;&lt;p&gt;在我们团队开发中，必不可免会使用到版本控制。同时还需要一个统一的工作流程，创建新的功能、打补丁、正式版发布打tag等等，git-flow工作流就这些繁琐的东西简化了，它封装了git命令，将命令组合了起来，我们只需要几行代码就能解决这些繁琐的工作。正好工作也有好一段时间了，想将这方面的知识梳理一下。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://anran758.github.io/blog/categories/git/"/>
    
    
      <category term="git" scheme="https://anran758.github.io/blog/tags/git/"/>
    
      <category term="github" scheme="https://anran758.github.io/blog/tags/github/"/>
    
      <category term="git flow" scheme="https://anran758.github.io/blog/tags/git-flow/"/>
    
  </entry>
  
</feed>
